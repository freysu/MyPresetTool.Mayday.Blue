/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/automation-events/build/es5/bundle.js":
/*!************************************************************!*\
  !*** ./node_modules/automation-events/build/es5/bundle.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

(function (global, factory) {
     true ? factory(exports, __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js"), __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"), __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js")) :
    0;
})(this, (function (exports, _slicedToArray, _classCallCheck, _createClass) { 'use strict';

    var createExtendedExponentialRampToValueAutomationEvent = function createExtendedExponentialRampToValueAutomationEvent(value, endTime, insertTime) {
      return {
        endTime: endTime,
        insertTime: insertTime,
        type: 'exponentialRampToValue',
        value: value
      };
    };

    var createExtendedLinearRampToValueAutomationEvent = function createExtendedLinearRampToValueAutomationEvent(value, endTime, insertTime) {
      return {
        endTime: endTime,
        insertTime: insertTime,
        type: 'linearRampToValue',
        value: value
      };
    };

    var createSetValueAutomationEvent = function createSetValueAutomationEvent(value, startTime) {
      return {
        startTime: startTime,
        type: 'setValue',
        value: value
      };
    };

    var createSetValueCurveAutomationEvent = function createSetValueCurveAutomationEvent(values, startTime, duration) {
      return {
        duration: duration,
        startTime: startTime,
        type: 'setValueCurve',
        values: values
      };
    };

    var getTargetValueAtTime = function getTargetValueAtTime(time, valueAtStartTime, _ref) {
      var startTime = _ref.startTime,
        target = _ref.target,
        timeConstant = _ref.timeConstant;
      return target + (valueAtStartTime - target) * Math.exp((startTime - time) / timeConstant);
    };

    var isExponentialRampToValueAutomationEvent = function isExponentialRampToValueAutomationEvent(automationEvent) {
      return automationEvent.type === 'exponentialRampToValue';
    };

    var isLinearRampToValueAutomationEvent = function isLinearRampToValueAutomationEvent(automationEvent) {
      return automationEvent.type === 'linearRampToValue';
    };

    var isAnyRampToValueAutomationEvent = function isAnyRampToValueAutomationEvent(automationEvent) {
      return isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent);
    };

    var isSetValueAutomationEvent = function isSetValueAutomationEvent(automationEvent) {
      return automationEvent.type === 'setValue';
    };

    var isSetValueCurveAutomationEvent = function isSetValueCurveAutomationEvent(automationEvent) {
      return automationEvent.type === 'setValueCurve';
    };

    var _getValueOfAutomationEventAtIndexAtTime = function getValueOfAutomationEventAtIndexAtTime(automationEvents, index, time, defaultValue) {
      var automationEvent = automationEvents[index];
      return automationEvent === undefined ? defaultValue : isAnyRampToValueAutomationEvent(automationEvent) || isSetValueAutomationEvent(automationEvent) ? automationEvent.value : isSetValueCurveAutomationEvent(automationEvent) ? automationEvent.values[automationEvent.values.length - 1] : getTargetValueAtTime(time, _getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, automationEvent.startTime, defaultValue), automationEvent);
    };

    var getEndTimeAndValueOfPreviousAutomationEvent = function getEndTimeAndValueOfPreviousAutomationEvent(automationEvents, index, currentAutomationEvent, nextAutomationEvent, defaultValue) {
      return currentAutomationEvent === undefined ? [nextAutomationEvent.insertTime, defaultValue] : isAnyRampToValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.endTime, currentAutomationEvent.value] : isSetValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime, currentAutomationEvent.value] : isSetValueCurveAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime + currentAutomationEvent.duration, currentAutomationEvent.values[currentAutomationEvent.values.length - 1]] : [currentAutomationEvent.startTime, _getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, currentAutomationEvent.startTime, defaultValue)];
    };

    var isCancelAndHoldAutomationEvent = function isCancelAndHoldAutomationEvent(automationEvent) {
      return automationEvent.type === 'cancelAndHold';
    };

    var isCancelScheduledValuesAutomationEvent = function isCancelScheduledValuesAutomationEvent(automationEvent) {
      return automationEvent.type === 'cancelScheduledValues';
    };

    var getEventTime = function getEventTime(automationEvent) {
      if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {
        return automationEvent.cancelTime;
      }
      if (isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent)) {
        return automationEvent.endTime;
      }
      return automationEvent.startTime;
    };

    var getExponentialRampValueAtTime = function getExponentialRampValueAtTime(time, startTime, valueAtStartTime, _ref) {
      var endTime = _ref.endTime,
        value = _ref.value;
      if (valueAtStartTime === value) {
        return value;
      }
      if (0 < valueAtStartTime && 0 < value || valueAtStartTime < 0 && value < 0) {
        return valueAtStartTime * Math.pow(value / valueAtStartTime, (time - startTime) / (endTime - startTime));
      }
      return 0;
    };

    var getLinearRampValueAtTime = function getLinearRampValueAtTime(time, startTime, valueAtStartTime, _ref) {
      var endTime = _ref.endTime,
        value = _ref.value;
      return valueAtStartTime + (time - startTime) / (endTime - startTime) * (value - valueAtStartTime);
    };

    var interpolateValue = function interpolateValue(values, theoreticIndex) {
      var lowerIndex = Math.floor(theoreticIndex);
      var upperIndex = Math.ceil(theoreticIndex);
      if (lowerIndex === upperIndex) {
        return values[lowerIndex];
      }
      return (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];
    };

    var getValueCurveValueAtTime = function getValueCurveValueAtTime(time, _ref) {
      var duration = _ref.duration,
        startTime = _ref.startTime,
        values = _ref.values;
      var theoreticIndex = (time - startTime) / duration * (values.length - 1);
      return interpolateValue(values, theoreticIndex);
    };

    var isSetTargetAutomationEvent = function isSetTargetAutomationEvent(automationEvent) {
      return automationEvent.type === 'setTarget';
    };

    var AutomationEventList = /*#__PURE__*/function () {
      function AutomationEventList(defaultValue) {
        _classCallCheck(this, AutomationEventList);
        this._automationEvents = [];
        this._currenTime = 0;
        this._defaultValue = defaultValue;
      }
      return _createClass(AutomationEventList, [{
        key: Symbol.iterator,
        value: function value() {
          return this._automationEvents[Symbol.iterator]();
        }
      }, {
        key: "add",
        value: function add(automationEvent) {
          var eventTime = getEventTime(automationEvent);
          if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {
            var index = this._automationEvents.findIndex(function (currentAutomationEvent) {
              if (isCancelScheduledValuesAutomationEvent(automationEvent) && isSetValueCurveAutomationEvent(currentAutomationEvent)) {
                return currentAutomationEvent.startTime + currentAutomationEvent.duration >= eventTime;
              }
              return getEventTime(currentAutomationEvent) >= eventTime;
            });
            var removedAutomationEvent = this._automationEvents[index];
            if (index !== -1) {
              this._automationEvents = this._automationEvents.slice(0, index);
            }
            if (isCancelAndHoldAutomationEvent(automationEvent)) {
              var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];
              if (removedAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(removedAutomationEvent)) {
                if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {
                  throw new Error('The internal list is malformed.');
                }
                var startTime = lastAutomationEvent === undefined ? removedAutomationEvent.insertTime : isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.startTime + lastAutomationEvent.duration : getEventTime(lastAutomationEvent);
                var startValue = lastAutomationEvent === undefined ? this._defaultValue : isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.values[lastAutomationEvent.values.length - 1] : lastAutomationEvent.value;
                var value = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? getExponentialRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent) : getLinearRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent);
                var truncatedAutomationEvent = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? createExtendedExponentialRampToValueAutomationEvent(value, eventTime, this._currenTime) : createExtendedLinearRampToValueAutomationEvent(value, eventTime, this._currenTime);
                this._automationEvents.push(truncatedAutomationEvent);
              }
              if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {
                this._automationEvents.push(createSetValueAutomationEvent(this.getValue(eventTime), eventTime));
              }
              if (lastAutomationEvent !== undefined && isSetValueCurveAutomationEvent(lastAutomationEvent) && lastAutomationEvent.startTime + lastAutomationEvent.duration > eventTime) {
                var duration = eventTime - lastAutomationEvent.startTime;
                var ratio = (lastAutomationEvent.values.length - 1) / lastAutomationEvent.duration;
                var length = Math.max(2, 1 + Math.ceil(duration * ratio));
                var fraction = duration / (length - 1) * ratio;
                var values = lastAutomationEvent.values.slice(0, length);
                if (fraction < 1) {
                  for (var i = 1; i < length; i += 1) {
                    var factor = fraction * i % 1;
                    values[i] = lastAutomationEvent.values[i - 1] * (1 - factor) + lastAutomationEvent.values[i] * factor;
                  }
                }
                this._automationEvents[this._automationEvents.length - 1] = createSetValueCurveAutomationEvent(values, lastAutomationEvent.startTime, duration);
              }
            }
          } else {
            var _index = this._automationEvents.findIndex(function (currentAutomationEvent) {
              return getEventTime(currentAutomationEvent) > eventTime;
            });
            var previousAutomationEvent = _index === -1 ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[_index - 1];
            if (previousAutomationEvent !== undefined && isSetValueCurveAutomationEvent(previousAutomationEvent) && getEventTime(previousAutomationEvent) + previousAutomationEvent.duration > eventTime) {
              return false;
            }
            var persistentAutomationEvent = isExponentialRampToValueAutomationEvent(automationEvent) ? createExtendedExponentialRampToValueAutomationEvent(automationEvent.value, automationEvent.endTime, this._currenTime) : isLinearRampToValueAutomationEvent(automationEvent) ? createExtendedLinearRampToValueAutomationEvent(automationEvent.value, eventTime, this._currenTime) : automationEvent;
            if (_index === -1) {
              this._automationEvents.push(persistentAutomationEvent);
            } else {
              if (isSetValueCurveAutomationEvent(automationEvent) && eventTime + automationEvent.duration > getEventTime(this._automationEvents[_index])) {
                return false;
              }
              this._automationEvents.splice(_index, 0, persistentAutomationEvent);
            }
          }
          return true;
        }
      }, {
        key: "flush",
        value: function flush(time) {
          var index = this._automationEvents.findIndex(function (currentAutomationEvent) {
            return getEventTime(currentAutomationEvent) > time;
          });
          if (index > 1) {
            var remainingAutomationEvents = this._automationEvents.slice(index - 1);
            var firstRemainingAutomationEvent = remainingAutomationEvents[0];
            if (isSetTargetAutomationEvent(firstRemainingAutomationEvent)) {
              remainingAutomationEvents.unshift(createSetValueAutomationEvent(_getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, firstRemainingAutomationEvent.startTime, this._defaultValue), firstRemainingAutomationEvent.startTime));
            }
            this._automationEvents = remainingAutomationEvents;
          }
        }
      }, {
        key: "getValue",
        value: function getValue(time) {
          if (this._automationEvents.length === 0) {
            return this._defaultValue;
          }
          var indexOfNextEvent = this._automationEvents.findIndex(function (automationEvent) {
            return getEventTime(automationEvent) > time;
          });
          var nextAutomationEvent = this._automationEvents[indexOfNextEvent];
          var indexOfCurrentEvent = (indexOfNextEvent === -1 ? this._automationEvents.length : indexOfNextEvent) - 1;
          var currentAutomationEvent = this._automationEvents[indexOfCurrentEvent];
          if (currentAutomationEvent !== undefined && isSetTargetAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || nextAutomationEvent.insertTime > time)) {
            return getTargetValueAtTime(time, _getValueOfAutomationEventAtIndexAtTime(this._automationEvents, indexOfCurrentEvent - 1, currentAutomationEvent.startTime, this._defaultValue), currentAutomationEvent);
          }
          if (currentAutomationEvent !== undefined && isSetValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {
            return currentAutomationEvent.value;
          }
          if (currentAutomationEvent !== undefined && isSetValueCurveAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || currentAutomationEvent.startTime + currentAutomationEvent.duration > time)) {
            if (time < currentAutomationEvent.startTime + currentAutomationEvent.duration) {
              return getValueCurveValueAtTime(time, currentAutomationEvent);
            }
            return currentAutomationEvent.values[currentAutomationEvent.values.length - 1];
          }
          if (currentAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {
            return currentAutomationEvent.value;
          }
          if (nextAutomationEvent !== undefined && isExponentialRampToValueAutomationEvent(nextAutomationEvent)) {
            var _getEndTimeAndValueOf = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, indexOfCurrentEvent, currentAutomationEvent, nextAutomationEvent, this._defaultValue),
              _getEndTimeAndValueOf2 = _slicedToArray(_getEndTimeAndValueOf, 2),
              startTime = _getEndTimeAndValueOf2[0],
              value = _getEndTimeAndValueOf2[1];
            return getExponentialRampValueAtTime(time, startTime, value, nextAutomationEvent);
          }
          if (nextAutomationEvent !== undefined && isLinearRampToValueAutomationEvent(nextAutomationEvent)) {
            var _getEndTimeAndValueOf3 = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, indexOfCurrentEvent, currentAutomationEvent, nextAutomationEvent, this._defaultValue),
              _getEndTimeAndValueOf4 = _slicedToArray(_getEndTimeAndValueOf3, 2),
              _startTime = _getEndTimeAndValueOf4[0],
              _value = _getEndTimeAndValueOf4[1];
            return getLinearRampValueAtTime(time, _startTime, _value, nextAutomationEvent);
          }
          return this._defaultValue;
        }
      }]);
    }();

    var createCancelAndHoldAutomationEvent = function createCancelAndHoldAutomationEvent(cancelTime) {
      return {
        cancelTime: cancelTime,
        type: 'cancelAndHold'
      };
    };

    var createCancelScheduledValuesAutomationEvent = function createCancelScheduledValuesAutomationEvent(cancelTime) {
      return {
        cancelTime: cancelTime,
        type: 'cancelScheduledValues'
      };
    };

    var createExponentialRampToValueAutomationEvent = function createExponentialRampToValueAutomationEvent(value, endTime) {
      return {
        endTime: endTime,
        type: 'exponentialRampToValue',
        value: value
      };
    };

    var createLinearRampToValueAutomationEvent = function createLinearRampToValueAutomationEvent(value, endTime) {
      return {
        endTime: endTime,
        type: 'linearRampToValue',
        value: value
      };
    };

    var createSetTargetAutomationEvent = function createSetTargetAutomationEvent(target, startTime, timeConstant) {
      return {
        startTime: startTime,
        target: target,
        timeConstant: timeConstant,
        type: 'setTarget'
      };
    };

    exports.AutomationEventList = AutomationEventList;
    exports.createCancelAndHoldAutomationEvent = createCancelAndHoldAutomationEvent;
    exports.createCancelScheduledValuesAutomationEvent = createCancelScheduledValuesAutomationEvent;
    exports.createExponentialRampToValueAutomationEvent = createExponentialRampToValueAutomationEvent;
    exports.createLinearRampToValueAutomationEvent = createLinearRampToValueAutomationEvent;
    exports.createSetTargetAutomationEvent = createSetTargetAutomationEvent;
    exports.createSetValueAutomationEvent = createSetValueAutomationEvent;
    exports.createSetValueCurveAutomationEvent = createSetValueCurveAutomationEvent;

}));


/***/ }),

/***/ "./original_src/fetch_music_data.js":
/*!******************************************!*\
  !*** ./original_src/fetch_music_data.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fetchSongData: () => (/* binding */ fetchSongData),
/* harmony export */   fetchSongList: () => (/* binding */ fetchSongList)
/* harmony export */ });
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var lru_min__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lru.min */ "./node_modules/lru.min/lib/index.mjs");
/* harmony import */ var axios_retry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios-retry */ "./node_modules/axios-retry/dist/esm/index.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/*
 * @Author: freysu
 * @Date: 2024-11-27 03:28:10
 * @LastEditors: freysu
 * @LastEditTime: 2024-11-27 05:49:04
 * @Description: file content
 */



(0,axios_retry__WEBPACK_IMPORTED_MODULE_2__["default"])(axios__WEBPACK_IMPORTED_MODULE_0__["default"], {
  retries: 3,
  retryDelay: axios_retry__WEBPACK_IMPORTED_MODULE_2__["default"].exponentialDelay,
  retryCondition: function retryCondition(error) {
    var _error$response;
    // 只在服务不可用（503）或者请求超时（ECONNABORTED）时重试
    return ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 503 || error.code === 'ECONNABORTED';
  }
});
var ENDPOINT_CENGUIGUI = 'https://api.cenguigui.cn/api/netease/music_v1.php';
var ENDPOINT_CLOUDMUSIC = 'https://music.163.com/api/search/get/web';
var options_CENGGUIGUI = {
  method: 'GET',
  headers: {
    Accept: '*/*',
    'Accept-Language': 'zh-CN,zh;q=0.8'
  },
  timeout: 30000,
  compress: true
};
var options_cloudMusic = {
  method: 'GET',
  timeout: 8000,
  headers: {
    'Content-Type': 'application/x-www-form-urlencoded',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36',
    Referer: 'https://music.163.com'
  }
};
var musicCache = (0,lru_min__WEBPACK_IMPORTED_MODULE_1__.createLRU)({
  max: 150000,
  onEviction: function onEviction(key, value) {
    console.log("Key \"".concat(key, "\" with value \"").concat(value, "\" has been evicted."));
  }
});
var songListCache = (0,lru_min__WEBPACK_IMPORTED_MODULE_1__.createLRU)({
  max: 150000,
  onEviction: function onEviction(key, value) {
    console.log("Key \"".concat(key, "\" with value \"").concat(value, "\" has been evicted."));
  }
});

// 获取缓存数据
function getFromCache(CACHE, cacheKey) {
  if (CACHE.has(cacheKey)) {
    return CACHE.get(cacheKey);
  }
  return null;
}

// 设置缓存数据
function setToCache(CACHE, cacheKey, data) {
  CACHE.set(cacheKey, data);
}

// 验证参数
function validateParams_CENGGUIGUI(params) {
  if (!params.id) {
    throw new Error('Song ID is required');
  }
  if (params.type && !['json', 'mp3', 'pic', 'mv', 'lyric'].includes(params.type)) {
    throw new Error('Invalid type parameter');
  }
  if (params.level && !['standard', 'exhigh', 'lossless', 'hires', 'jyeffect', 'sky', 'jymaster'].includes(params.level)) {
    throw new Error('Invalid level parameter');
  }
  // 防止 SQL 注入等攻击
  if (typeof params.id !== 'string' || !/^\d+$/.test(params.id)) {
    throw new Error('Invalid song ID format');
  }
}

/*
https://music.163.com/api/search/get/web?csrf_token=hlpretag=&hlposttag=&s={query}&type=1&offset=0&total=true&limit=100
requestData: {
    s: query,
    type: 1, // 搜索类型：歌曲
    limit: Math.max(1, Math.min(limit, 100)), // 限制 limit 在 1 到 100 之间
    offset: Math.max(0, offset), // 确保 offset 是非负数
    total: true
  }
*/
function fetchSongList(sss) {
  return new Promise(function (resolve, reject) {
    try {
      var params = {
        s: sss.query,
        type: 1,
        // 搜索类型：歌曲
        limit: sss.limit ? Math.max(1, Math.min(sss.limit, 100)) : 10,
        // 限制 limit 在 1 到 100 之间
        offset: sss.offset ? Math.max(0, sss.offset) : 0,
        // 确保 offset 是非负数
        total: true
      };
      var cacheKey = "music_s_".concat(params.s, "_limit_").concat(params.limit, "_offset_").concat(params.offset);
      var cachedData = getFromCache(songListCache, cacheKey);
      if (cachedData) {
        resolve(cachedData);
        return;
      }
      axios__WEBPACK_IMPORTED_MODULE_0__["default"].get(ENDPOINT_CLOUDMUSIC, _objectSpread({
        params: params
      }, options_cloudMusic)).then(function (response) {
        var data = JSON.stringify(response.data).songs;
        setToCache(songListCache, cacheKey, data);
        resolve(data);
      })["catch"](function (error) {
        if (error.response) {
          console.error('Server responded with an error:', error.response.status, error.response.data);
        } else if (error.request) {
          console.error('Request was made but no response was received:', error.request);
        } else {
          console.error('Error setting up the request:', error.message);
        }
        reject(error);
      });
    } catch (error) {
      reject(error);
    }
  });
}
function fetchSongData(params) {
  return new Promise(function (resolve, reject) {
    try {
      params.id = params.id;
      params.type = params.type || 'json';
      params.level = params.level || 'standard';
      validateParams_CENGGUIGUI(params);
      var cacheKey = "music_id_".concat(params.id, "_type_").concat(params.type, "_level_").concat(params.level);
      var cachedData = getFromCache(musicCache, cacheKey);
      if (cachedData) {
        resolve(cachedData);
        return;
      }
      axios__WEBPACK_IMPORTED_MODULE_0__["default"].get(ENDPOINT_CENGUIGUI, _objectSpread({
        params: params
      }, options_CENGGUIGUI)).then(function (response) {
        var data = response.data;
        if (data.name !== null) {
          setToCache(musicCache, cacheKey, data);
          resolve(data);
        } else {
          reject(new Error('Invalid song data,' + data.url));
        }
      })["catch"](function (error) {
        if (error.response) {
          console.error('Server responded with an error:', error.response.status, error.response.data);
        } else if (error.request) {
          console.error('Request was made but no response was received:', error.request);
        } else {
          console.error('Error setting up the request:', error.message);
        }
        reject(error);
      });
    } catch (error) {
      reject(error);
    }
  });
}


/*

*/

/***/ }),

/***/ "./node_modules/fast-unique-numbers/build/es5/bundle.js":
/*!**************************************************************!*\
  !*** ./node_modules/fast-unique-numbers/build/es5/bundle.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports) {

(function (global, factory) {
     true ? factory(exports) :
    0;
})(this, (function (exports) { 'use strict';

    var createAddUniqueNumber = function createAddUniqueNumber(generateUniqueNumber) {
      return function (set) {
        var number = generateUniqueNumber(set);
        set.add(number);
        return number;
      };
    };

    var createCache = function createCache(lastNumberWeakMap) {
      return function (collection, nextNumber) {
        lastNumberWeakMap.set(collection, nextNumber);
        return nextNumber;
      };
    };

    /*
     * The value of the constant Number.MAX_SAFE_INTEGER equals (2 ** 53 - 1) but it
     * is fairly new.
     */
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER === undefined ? 9007199254740991 : Number.MAX_SAFE_INTEGER;
    var TWO_TO_THE_POWER_OF_TWENTY_NINE = 536870912;
    var TWO_TO_THE_POWER_OF_THIRTY = TWO_TO_THE_POWER_OF_TWENTY_NINE * 2;
    var createGenerateUniqueNumber = function createGenerateUniqueNumber(cache, lastNumberWeakMap) {
      return function (collection) {
        var lastNumber = lastNumberWeakMap.get(collection);
        /*
         * Let's try the cheapest algorithm first. It might fail to produce a new
         * number, but it is so cheap that it is okay to take the risk. Just
         * increase the last number by one or reset it to 0 if we reached the upper
         * bound of SMIs (which stands for small integers). When the last number is
         * unknown it is assumed that the collection contains zero based consecutive
         * numbers.
         */
        var nextNumber = lastNumber === undefined ? collection.size : lastNumber < TWO_TO_THE_POWER_OF_THIRTY ? lastNumber + 1 : 0;
        if (!collection.has(nextNumber)) {
          return cache(collection, nextNumber);
        }
        /*
         * If there are less than half of 2 ** 30 numbers stored in the collection,
         * the chance to generate a new random number in the range from 0 to 2 ** 30
         * is at least 50%. It's benifitial to use only SMIs because they perform
         * much better in any environment based on V8.
         */
        if (collection.size < TWO_TO_THE_POWER_OF_TWENTY_NINE) {
          while (collection.has(nextNumber)) {
            nextNumber = Math.floor(Math.random() * TWO_TO_THE_POWER_OF_THIRTY);
          }
          return cache(collection, nextNumber);
        }
        // Quickly check if there is a theoretical chance to generate a new number.
        if (collection.size > MAX_SAFE_INTEGER) {
          throw new Error('Congratulations, you created a collection of unique numbers which uses all available integers!');
        }
        // Otherwise use the full scale of safely usable integers.
        while (collection.has(nextNumber)) {
          nextNumber = Math.floor(Math.random() * MAX_SAFE_INTEGER);
        }
        return cache(collection, nextNumber);
      };
    };

    var LAST_NUMBER_WEAK_MAP = new WeakMap();
    var cache = createCache(LAST_NUMBER_WEAK_MAP);
    var generateUniqueNumber = createGenerateUniqueNumber(cache, LAST_NUMBER_WEAK_MAP);
    var addUniqueNumber = createAddUniqueNumber(generateUniqueNumber);

    exports.addUniqueNumber = addUniqueNumber;
    exports.generateUniqueNumber = generateUniqueNumber;

}));


/***/ }),

/***/ "./node_modules/is-retry-allowed/index.js":
/*!************************************************!*\
  !*** ./node_modules/is-retry-allowed/index.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";


const denyList = new Set([
	'ENOTFOUND',
	'ENETUNREACH',

	// SSL errors from https://github.com/nodejs/node/blob/fc8e3e2cdc521978351de257030db0076d79e0ab/src/crypto/crypto_common.cc#L301-L328
	'UNABLE_TO_GET_ISSUER_CERT',
	'UNABLE_TO_GET_CRL',
	'UNABLE_TO_DECRYPT_CERT_SIGNATURE',
	'UNABLE_TO_DECRYPT_CRL_SIGNATURE',
	'UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY',
	'CERT_SIGNATURE_FAILURE',
	'CRL_SIGNATURE_FAILURE',
	'CERT_NOT_YET_VALID',
	'CERT_HAS_EXPIRED',
	'CRL_NOT_YET_VALID',
	'CRL_HAS_EXPIRED',
	'ERROR_IN_CERT_NOT_BEFORE_FIELD',
	'ERROR_IN_CERT_NOT_AFTER_FIELD',
	'ERROR_IN_CRL_LAST_UPDATE_FIELD',
	'ERROR_IN_CRL_NEXT_UPDATE_FIELD',
	'OUT_OF_MEM',
	'DEPTH_ZERO_SELF_SIGNED_CERT',
	'SELF_SIGNED_CERT_IN_CHAIN',
	'UNABLE_TO_GET_ISSUER_CERT_LOCALLY',
	'UNABLE_TO_VERIFY_LEAF_SIGNATURE',
	'CERT_CHAIN_TOO_LONG',
	'CERT_REVOKED',
	'INVALID_CA',
	'PATH_LENGTH_EXCEEDED',
	'INVALID_PURPOSE',
	'CERT_UNTRUSTED',
	'CERT_REJECTED',
	'HOSTNAME_MISMATCH'
]);

// TODO: Use `error?.code` when targeting Node.js 14
module.exports = error => !denyList.has(error && error.code);


/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/constants.js":
/*!***************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/constants.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MOST_NEGATIVE_SINGLE_FLOAT: () => (/* binding */ MOST_NEGATIVE_SINGLE_FLOAT),
/* harmony export */   MOST_POSITIVE_SINGLE_FLOAT: () => (/* binding */ MOST_POSITIVE_SINGLE_FLOAT)
/* harmony export */ });
const MOST_NEGATIVE_SINGLE_FLOAT = -3.4028234663852886e38;
const MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT;
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/abort-error.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/abort-error.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAbortError: () => (/* binding */ createAbortError)
/* harmony export */ });
const createAbortError = () => new DOMException('', 'AbortError');
//# sourceMappingURL=abort-error.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/add-active-input-connection-to-audio-node.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/add-active-input-connection-to-audio-node.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAddActiveInputConnectionToAudioNode: () => (/* binding */ createAddActiveInputConnectionToAudioNode)
/* harmony export */ });
const createAddActiveInputConnectionToAudioNode = (insertElementInSet) => {
    return (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {
        insertElementInSet(activeInputs[input], [source, output, eventListener], (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);
    };
};
//# sourceMappingURL=add-active-input-connection-to-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/add-audio-node-connections.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/add-audio-node-connections.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAddAudioNodeConnections: () => (/* binding */ createAddAudioNodeConnections)
/* harmony export */ });
const createAddAudioNodeConnections = (audioNodeConnectionsStore) => {
    return (audioNode, audioNodeRenderer, nativeAudioNode) => {
        const activeInputs = [];
        for (let i = 0; i < nativeAudioNode.numberOfInputs; i += 1) {
            activeInputs.push(new Set());
        }
        audioNodeConnectionsStore.set(audioNode, {
            activeInputs,
            outputs: new Set(),
            passiveInputs: new WeakMap(),
            renderer: audioNodeRenderer
        });
    };
};
//# sourceMappingURL=add-audio-node-connections.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/add-audio-param-connections.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/add-audio-param-connections.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAddAudioParamConnections: () => (/* binding */ createAddAudioParamConnections)
/* harmony export */ });
const createAddAudioParamConnections = (audioParamConnectionsStore) => {
    return (audioParam, audioParamRenderer) => {
        audioParamConnectionsStore.set(audioParam, { activeInputs: new Set(), passiveInputs: new WeakMap(), renderer: audioParamRenderer });
    };
};
//# sourceMappingURL=add-audio-param-connections.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/add-audio-worklet-module.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/add-audio-worklet-module.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAddAudioWorkletModule: () => (/* binding */ createAddAudioWorkletModule)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");
/* harmony import */ var _helpers_is_constructible__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/is-constructible */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-constructible.js");
/* harmony import */ var _helpers_split_import_statements__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/split-import-statements */ "./node_modules/standardized-audio-context/build/es2019/helpers/split-import-statements.js");



const verifyParameterDescriptors = (parameterDescriptors) => {
    if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {
        throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');
    }
};
const verifyProcessorCtor = (processorCtor) => {
    if (!(0,_helpers_is_constructible__WEBPACK_IMPORTED_MODULE_1__.isConstructible)(processorCtor)) {
        throw new TypeError('The given value for processorCtor should be a constructor.');
    }
    if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {
        throw new TypeError('The given value for processorCtor should have a prototype.');
    }
};
const createAddAudioWorkletModule = (cacheTestResult, createNotSupportedError, evaluateSource, exposeCurrentFrameAndCurrentTime, fetchSource, getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, ongoingRequests, resolvedRequests, testAudioWorkletProcessorPostMessageSupport, window) => {
    let index = 0;
    return (context, moduleURL, options = { credentials: 'omit' }) => {
        const resolvedRequestsOfContext = resolvedRequests.get(context);
        if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {
            return Promise.resolve();
        }
        const ongoingRequestsOfContext = ongoingRequests.get(context);
        if (ongoingRequestsOfContext !== undefined) {
            const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);
            if (promiseOfOngoingRequest !== undefined) {
                return promiseOfOngoingRequest;
            }
        }
        const nativeContext = getNativeContext(context);
        // Bug #59: Safari does not implement the audioWorklet property.
        const promise = nativeContext.audioWorklet === undefined
            ? fetchSource(moduleURL)
                .then(([source, absoluteUrl]) => {
                const [importStatements, sourceWithoutImportStatements] = (0,_helpers_split_import_statements__WEBPACK_IMPORTED_MODULE_2__.splitImportStatements)(source, absoluteUrl);
                /*
                 * This is the unminified version of the code used below:
                 *
                 * ```js
                 * ${ importStatements };
                 * ((a, b) => {
                 *     (a[b] = a[b] || [ ]).push(
                 *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {
                 *             ${ sourceWithoutImportStatements }
                 *         }
                 *     );
                 * })(window, '_AWGS');
                 * ```
                 */
                // tslint:disable-next-line:max-line-length
                const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}
})})(window,'_AWGS')`;
                // @todo Evaluating the given source code is a possible security problem.
                return evaluateSource(wrappedSource);
            })
                .then(() => {
                const evaluateAudioWorkletGlobalScope = window._AWGS.pop();
                if (evaluateAudioWorkletGlobalScope === undefined) {
                    // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.
                    throw new SyntaxError();
                }
                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {
                }, undefined, (name, processorCtor) => {
                    if (name.trim() === '') {
                        throw createNotSupportedError();
                    }
                    const nodeNameToProcessorConstructorMap = _globals__WEBPACK_IMPORTED_MODULE_0__.NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);
                    if (nodeNameToProcessorConstructorMap !== undefined) {
                        if (nodeNameToProcessorConstructorMap.has(name)) {
                            throw createNotSupportedError();
                        }
                        verifyProcessorCtor(processorCtor);
                        verifyParameterDescriptors(processorCtor.parameterDescriptors);
                        nodeNameToProcessorConstructorMap.set(name, processorCtor);
                    }
                    else {
                        verifyProcessorCtor(processorCtor);
                        verifyParameterDescriptors(processorCtor.parameterDescriptors);
                        _globals__WEBPACK_IMPORTED_MODULE_0__.NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));
                    }
                }, nativeContext.sampleRate, undefined, undefined));
            })
            : Promise.all([
                fetchSource(moduleURL),
                Promise.resolve(cacheTestResult(testAudioWorkletProcessorPostMessageSupport, testAudioWorkletProcessorPostMessageSupport))
            ]).then(([[source, absoluteUrl], isSupportingPostMessage]) => {
                const currentIndex = index + 1;
                index = currentIndex;
                const [importStatements, sourceWithoutImportStatements] = (0,_helpers_split_import_statements__WEBPACK_IMPORTED_MODULE_2__.splitImportStatements)(source, absoluteUrl);
                /*
                 * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.
                 *
                 * This is the unminified version of the code used below.
                 *
                 * ```js
                 * class extends AudioWorkletProcessor {
                 *
                 *     __buffers = new WeakSet();
                 *
                 *     constructor () {
                 *         super();
                 *
                 *         this.port.postMessage = ((postMessage) => {
                 *             return (message, transferables) => {
                 *                 const filteredTransferables = (transferables)
                 *                     ? transferables.filter((transferable) => !this.__buffers.has(transferable))
                 *                     : transferables;
                 *
                 *                 return postMessage.call(this.port, message, filteredTransferables);
                 *              };
                 *         })(this.port.postMessage);
                 *     }
                 * }
                 * ```
                 */
                const patchedAudioWorkletProcessor = isSupportingPostMessage
                    ? 'AudioWorkletProcessor'
                    : 'class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}';
                /*
                 * Bug #170: Chrome and Edge do call process() with an array with empty channelData for each input if no input is connected.
                 *
                 * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.
                 *
                 * Bug #190: Safari doesn't throw an error when loading an unparsable module.
                 *
                 * This is the unminified version of the code used below:
                 *
                 * ```js
                 * `${ importStatements };
                 * ((AudioWorkletProcessor, registerProcessor) => {${ sourceWithoutImportStatements }
                 * })(
                 *     ${ patchedAudioWorkletProcessor },
                 *     (name, processorCtor) => registerProcessor(name, class extends processorCtor {
                 *
                 *         __collectBuffers = (array) => {
                 *             array.forEach((element) => this.__buffers.add(element.buffer));
                 *         };
                 *
                 *         process (inputs, outputs, parameters) {
                 *             inputs.forEach(this.__collectBuffers);
                 *             outputs.forEach(this.__collectBuffers);
                 *             this.__collectBuffers(Object.values(parameters));
                 *
                 *             return super.process(
                 *                 (inputs.map((input) => input.some((channelData) => channelData.length === 0)) ? [ ] : input),
                 *                 outputs,
                 *                 parameters
                 *             );
                 *         }
                 *
                 *     })
                 * );
                 *
                 * registerProcessor(`__sac${currentIndex}`, class extends AudioWorkletProcessor{
                 *
                 *     process () {
                 *         return false;
                 *     }
                 *
                 * })`
                 * ```
                 */
                const memberDefinition = isSupportingPostMessage ? '' : '__c = (a) => a.forEach(e=>this.__b.add(e.buffer));';
                const bufferRegistration = isSupportingPostMessage
                    ? ''
                    : 'i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));';
                const wrappedSource = `${importStatements};((AudioWorkletProcessor,registerProcessor)=>{${sourceWithoutImportStatements}
})(${patchedAudioWorkletProcessor},(n,p)=>registerProcessor(n,class extends p{${memberDefinition}process(i,o,p){${bufferRegistration}return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}));registerProcessor('__sac${currentIndex}',class extends AudioWorkletProcessor{process(){return !1}})`;
                const blob = new Blob([wrappedSource], { type: 'application/javascript; charset=utf-8' });
                const url = URL.createObjectURL(blob);
                return nativeContext.audioWorklet
                    .addModule(url, options)
                    .then(() => {
                    if (isNativeOfflineAudioContext(nativeContext)) {
                        return nativeContext;
                    }
                    // Bug #186: Chrome and Edge do not allow to create an AudioWorkletNode on a closed AudioContext.
                    const backupOfflineAudioContext = getOrCreateBackupOfflineAudioContext(nativeContext);
                    return backupOfflineAudioContext.audioWorklet.addModule(url, options).then(() => backupOfflineAudioContext);
                })
                    .then((nativeContextOrBackupOfflineAudioContext) => {
                    if (nativeAudioWorkletNodeConstructor === null) {
                        throw new SyntaxError();
                    }
                    try {
                        // Bug #190: Safari doesn't throw an error when loading an unparsable module.
                        new nativeAudioWorkletNodeConstructor(nativeContextOrBackupOfflineAudioContext, `__sac${currentIndex}`); // tslint:disable-line:no-unused-expression
                    }
                    catch {
                        throw new SyntaxError();
                    }
                })
                    .finally(() => URL.revokeObjectURL(url));
            });
        if (ongoingRequestsOfContext === undefined) {
            ongoingRequests.set(context, new Map([[moduleURL, promise]]));
        }
        else {
            ongoingRequestsOfContext.set(moduleURL, promise);
        }
        promise
            .then(() => {
            const updatedResolvedRequestsOfContext = resolvedRequests.get(context);
            if (updatedResolvedRequestsOfContext === undefined) {
                resolvedRequests.set(context, new Set([moduleURL]));
            }
            else {
                updatedResolvedRequestsOfContext.add(moduleURL);
            }
        })
            .finally(() => {
            const updatedOngoingRequestsOfContext = ongoingRequests.get(context);
            if (updatedOngoingRequestsOfContext !== undefined) {
                updatedOngoingRequestsOfContext.delete(moduleURL);
            }
        });
        return promise;
    };
};
//# sourceMappingURL=add-audio-worklet-module.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/add-connection-to-audio-node.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/add-connection-to-audio-node.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAddConnectionToAudioNode: () => (/* binding */ createAddConnectionToAudioNode)
/* harmony export */ });
/* harmony import */ var _helpers_delete_passive_input_connection_to_audio_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/delete-passive-input-connection-to-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-node.js");
/* harmony import */ var _helpers_set_internal_state_to_active__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/set-internal-state-to-active */ "./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js");
/* harmony import */ var _helpers_set_internal_state_to_passive_when_necessary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/set-internal-state-to-passive-when-necessary */ "./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js");



const createAddConnectionToAudioNode = (addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode) => {
    const tailTimeTimeoutIds = new WeakMap();
    return (source, destination, output, input, isOffline) => {
        const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);
        const { outputs } = getAudioNodeConnections(source);
        const eventListeners = getEventListenersOfAudioNode(source);
        const eventListener = (isActive) => {
            const nativeDestinationAudioNode = getNativeAudioNode(destination);
            const nativeSourceAudioNode = getNativeAudioNode(source);
            if (isActive) {
                const partialConnection = (0,_helpers_delete_passive_input_connection_to_audio_node__WEBPACK_IMPORTED_MODULE_0__.deletePassiveInputConnectionToAudioNode)(passiveInputs, source, output, input);
                addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);
                if (!isOffline && !isPartOfACycle(source)) {
                    connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);
                }
                if (isPassiveAudioNode(destination)) {
                    (0,_helpers_set_internal_state_to_active__WEBPACK_IMPORTED_MODULE_1__.setInternalStateToActive)(destination);
                }
            }
            else {
                const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);
                addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);
                if (!isOffline && !isPartOfACycle(source)) {
                    disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);
                }
                const tailTime = getAudioNodeTailTime(destination);
                if (tailTime === 0) {
                    if (isActiveAudioNode(destination)) {
                        (0,_helpers_set_internal_state_to_passive_when_necessary__WEBPACK_IMPORTED_MODULE_2__.setInternalStateToPassiveWhenNecessary)(destination, activeInputs);
                    }
                }
                else {
                    const tailTimeTimeoutId = tailTimeTimeoutIds.get(destination);
                    if (tailTimeTimeoutId !== undefined) {
                        clearTimeout(tailTimeTimeoutId);
                    }
                    tailTimeTimeoutIds.set(destination, setTimeout(() => {
                        if (isActiveAudioNode(destination)) {
                            (0,_helpers_set_internal_state_to_passive_when_necessary__WEBPACK_IMPORTED_MODULE_2__.setInternalStateToPassiveWhenNecessary)(destination, activeInputs);
                        }
                    }, tailTime * 1000));
                }
            }
        };
        if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {
            eventListeners.add(eventListener);
            if (isActiveAudioNode(source)) {
                addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);
            }
            else {
                addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);
            }
            return true;
        }
        return false;
    };
};
//# sourceMappingURL=add-connection-to-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/add-passive-input-connection-to-audio-node.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/add-passive-input-connection-to-audio-node.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAddPassiveInputConnectionToAudioNode: () => (/* binding */ createAddPassiveInputConnectionToAudioNode)
/* harmony export */ });
const createAddPassiveInputConnectionToAudioNode = (insertElementInSet) => {
    return (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {
        const passiveInputConnections = passiveInputs.get(source);
        if (passiveInputConnections === undefined) {
            passiveInputs.set(source, new Set([[output, input, eventListener]]));
        }
        else {
            insertElementInSet(passiveInputConnections, [output, input, eventListener], (passiveInputConnection) => passiveInputConnection[0] === output && passiveInputConnection[1] === input, ignoreDuplicates);
        }
    };
};
//# sourceMappingURL=add-passive-input-connection-to-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/add-silent-connection.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/add-silent-connection.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAddSilentConnection: () => (/* binding */ createAddSilentConnection)
/* harmony export */ });
const createAddSilentConnection = (createNativeGainNode) => {
    return (nativeContext, nativeAudioScheduledSourceNode) => {
        const nativeGainNode = createNativeGainNode(nativeContext, {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'discrete',
            gain: 0
        });
        nativeAudioScheduledSourceNode.connect(nativeGainNode).connect(nativeContext.destination);
        const disconnect = () => {
            nativeAudioScheduledSourceNode.removeEventListener('ended', disconnect);
            nativeAudioScheduledSourceNode.disconnect(nativeGainNode);
            nativeGainNode.disconnect();
        };
        nativeAudioScheduledSourceNode.addEventListener('ended', disconnect);
    };
};
//# sourceMappingURL=add-silent-connection.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/add-unrendered-audio-worklet-node.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/add-unrendered-audio-worklet-node.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAddUnrenderedAudioWorkletNode: () => (/* binding */ createAddUnrenderedAudioWorkletNode)
/* harmony export */ });
const createAddUnrenderedAudioWorkletNode = (getUnrenderedAudioWorkletNodes) => {
    return (nativeContext, audioWorkletNode) => {
        getUnrenderedAudioWorkletNodes(nativeContext).add(audioWorkletNode);
    };
};
//# sourceMappingURL=add-unrendered-audio-worklet-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/analyser-node-constructor.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/analyser-node-constructor.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAnalyserNodeConstructor: () => (/* binding */ createAnalyserNodeConstructor)
/* harmony export */ });
const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    fftSize: 2048,
    maxDecibels: -30,
    minDecibels: -100,
    smoothingTimeConstant: 0.8
};
const createAnalyserNodeConstructor = (audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) => {
    return class AnalyserNode extends audionNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
            const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);
            const analyserNodeRenderer = ((isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null));
            super(context, false, nativeAnalyserNode, analyserNodeRenderer);
            this._nativeAnalyserNode = nativeAnalyserNode;
        }
        get fftSize() {
            return this._nativeAnalyserNode.fftSize;
        }
        set fftSize(value) {
            this._nativeAnalyserNode.fftSize = value;
        }
        get frequencyBinCount() {
            return this._nativeAnalyserNode.frequencyBinCount;
        }
        get maxDecibels() {
            return this._nativeAnalyserNode.maxDecibels;
        }
        set maxDecibels(value) {
            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.
            const maxDecibels = this._nativeAnalyserNode.maxDecibels;
            this._nativeAnalyserNode.maxDecibels = value;
            if (!(value > this._nativeAnalyserNode.minDecibels)) {
                this._nativeAnalyserNode.maxDecibels = maxDecibels;
                throw createIndexSizeError();
            }
        }
        get minDecibels() {
            return this._nativeAnalyserNode.minDecibels;
        }
        set minDecibels(value) {
            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.
            const minDecibels = this._nativeAnalyserNode.minDecibels;
            this._nativeAnalyserNode.minDecibels = value;
            if (!(this._nativeAnalyserNode.maxDecibels > value)) {
                this._nativeAnalyserNode.minDecibels = minDecibels;
                throw createIndexSizeError();
            }
        }
        get smoothingTimeConstant() {
            return this._nativeAnalyserNode.smoothingTimeConstant;
        }
        set smoothingTimeConstant(value) {
            this._nativeAnalyserNode.smoothingTimeConstant = value;
        }
        getByteFrequencyData(array) {
            this._nativeAnalyserNode.getByteFrequencyData(array);
        }
        getByteTimeDomainData(array) {
            this._nativeAnalyserNode.getByteTimeDomainData(array);
        }
        getFloatFrequencyData(array) {
            this._nativeAnalyserNode.getFloatFrequencyData(array);
        }
        getFloatTimeDomainData(array) {
            this._nativeAnalyserNode.getFloatTimeDomainData(array);
        }
    };
};
//# sourceMappingURL=analyser-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAnalyserNodeRendererFactory: () => (/* binding */ createAnalyserNodeRendererFactory)
/* harmony export */ });
/* harmony import */ var _helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/is-owned-by-context */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js");

const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {
    return () => {
        const renderedNativeAnalyserNodes = new WeakMap();
        const createAnalyserNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeAnalyserNode = getNativeAudioNode(proxy);
            // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeAnalyserNodeIsOwnedByContext = (0,_helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__.isOwnedByContext)(nativeAnalyserNode, nativeOfflineAudioContext);
            if (!nativeAnalyserNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeAnalyserNode.channelCount,
                    channelCountMode: nativeAnalyserNode.channelCountMode,
                    channelInterpretation: nativeAnalyserNode.channelInterpretation,
                    fftSize: nativeAnalyserNode.fftSize,
                    maxDecibels: nativeAnalyserNode.maxDecibels,
                    minDecibels: nativeAnalyserNode.minDecibels,
                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant
                };
                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);
            }
            renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);
            return nativeAnalyserNode;
        };
        return {
            render(proxy, nativeOfflineAudioContext) {
                const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);
                if (renderedNativeAnalyserNode !== undefined) {
                    return Promise.resolve(renderedNativeAnalyserNode);
                }
                return createAnalyserNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
};
//# sourceMappingURL=analyser-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-constructor.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-constructor.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAudioBufferConstructor: () => (/* binding */ createAudioBufferConstructor)
/* harmony export */ });
/* harmony import */ var _helpers_test_audio_buffer_copy_channel_methods_out_of_bounds_support__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js");
/* harmony import */ var _helpers_wrap_audio_buffer_get_channel_data_method__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/wrap-audio-buffer-get-channel-data-method */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js");


const DEFAULT_OPTIONS = {
    numberOfChannels: 1
};
const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {
    let nativeOfflineAudioContext = null;
    return class AudioBuffer {
        constructor(options) {
            if (nativeOfflineAudioContextConstructor === null) {
                throw new Error('Missing the native OfflineAudioContext constructor.');
            }
            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };
            if (nativeOfflineAudioContext === null) {
                nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
            }
            /*
             * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the
             * factory function. But since Firefox also supports the constructor everything should be fine.
             */
            const audioBuffer = nativeAudioBufferConstructor !== null &&
                cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport)
                ? new nativeAudioBufferConstructor({ length, numberOfChannels, sampleRate })
                : nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);
            // Bug #99: Safari does not throw an error when the numberOfChannels is zero.
            if (audioBuffer.numberOfChannels === 0) {
                throw createNotSupportedError();
            }
            // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
            // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.
            if (typeof audioBuffer.copyFromChannel !== 'function') {
                wrapAudioBufferCopyChannelMethods(audioBuffer);
                (0,_helpers_wrap_audio_buffer_get_channel_data_method__WEBPACK_IMPORTED_MODULE_1__.wrapAudioBufferGetChannelDataMethod)(audioBuffer);
                // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.
            }
            else if (!cacheTestResult(_helpers_test_audio_buffer_copy_channel_methods_out_of_bounds_support__WEBPACK_IMPORTED_MODULE_0__.testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => (0,_helpers_test_audio_buffer_copy_channel_methods_out_of_bounds_support__WEBPACK_IMPORTED_MODULE_0__.testAudioBufferCopyChannelMethodsOutOfBoundsSupport)(audioBuffer))) {
                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);
            }
            audioBufferStore.add(audioBuffer);
            /*
             * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native
             * (Offline)AudioContexts.
             */
            return audioBuffer;
        }
        static [Symbol.hasInstance](instance) {
            return ((instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype) ||
                audioBufferStore.has(instance));
        }
    };
};
//# sourceMappingURL=audio-buffer-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-constructor.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-constructor.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAudioBufferSourceNodeConstructor: () => (/* binding */ createAudioBufferSourceNodeConstructor)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./node_modules/standardized-audio-context/build/es2019/constants.js");
/* harmony import */ var _helpers_is_active_audio_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/is-active-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js");
/* harmony import */ var _helpers_set_internal_state_to_active__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/set-internal-state-to-active */ "./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js");
/* harmony import */ var _helpers_set_internal_state_to_passive__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/set-internal-state-to-passive */ "./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js");




const DEFAULT_OPTIONS = {
    buffer: null,
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    // Bug #149: Safari does not yet support the detune AudioParam.
    loop: false,
    loopEnd: 0,
    loopStart: 0,
    playbackRate: 1
};
const createAudioBufferSourceNodeConstructor = (audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {
    return class AudioBufferSourceNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
            const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const audioBufferSourceNodeRenderer = ((isOffline ? createAudioBufferSourceNodeRenderer() : null));
            super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);
            this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;
            this._isBufferNullified = false;
            this._isBufferSet = mergedOptions.buffer !== null;
            this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;
            this._onended = null;
            // Bug #73: Safari does not export the correct values for maxValue and minValue.
            this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_POSITIVE_SINGLE_FLOAT, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_NEGATIVE_SINGLE_FLOAT);
        }
        get buffer() {
            if (this._isBufferNullified) {
                return null;
            }
            return this._nativeAudioBufferSourceNode.buffer;
        }
        set buffer(value) {
            this._nativeAudioBufferSourceNode.buffer = value;
            // Bug #72: Only Chrome & Edge do not allow to reassign the buffer yet.
            if (value !== null) {
                if (this._isBufferSet) {
                    throw createInvalidStateError();
                }
                this._isBufferSet = true;
            }
        }
        get loop() {
            return this._nativeAudioBufferSourceNode.loop;
        }
        set loop(value) {
            this._nativeAudioBufferSourceNode.loop = value;
        }
        get loopEnd() {
            return this._nativeAudioBufferSourceNode.loopEnd;
        }
        set loopEnd(value) {
            this._nativeAudioBufferSourceNode.loopEnd = value;
        }
        get loopStart() {
            return this._nativeAudioBufferSourceNode.loopStart;
        }
        set loopStart(value) {
            this._nativeAudioBufferSourceNode.loopStart = value;
        }
        get onended() {
            return this._onended;
        }
        set onended(value) {
            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
            this._nativeAudioBufferSourceNode.onended = wrappedListener;
            const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;
            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;
        }
        get playbackRate() {
            return this._playbackRate;
        }
        start(when = 0, offset = 0, duration) {
            this._nativeAudioBufferSourceNode.start(when, offset, duration);
            if (this._audioBufferSourceNodeRenderer !== null) {
                this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];
            }
            if (this.context.state !== 'closed') {
                (0,_helpers_set_internal_state_to_active__WEBPACK_IMPORTED_MODULE_2__.setInternalStateToActive)(this);
                const resetInternalStateToPassive = () => {
                    this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive);
                    if ((0,_helpers_is_active_audio_node__WEBPACK_IMPORTED_MODULE_1__.isActiveAudioNode)(this)) {
                        (0,_helpers_set_internal_state_to_passive__WEBPACK_IMPORTED_MODULE_3__.setInternalStateToPassive)(this);
                    }
                };
                this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);
            }
        }
        stop(when = 0) {
            this._nativeAudioBufferSourceNode.stop(when);
            if (this._audioBufferSourceNodeRenderer !== null) {
                this._audioBufferSourceNodeRenderer.stop = when;
            }
        }
    };
};
//# sourceMappingURL=audio-buffer-source-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAudioBufferSourceNodeRendererFactory: () => (/* binding */ createAudioBufferSourceNodeRendererFactory)
/* harmony export */ });
/* harmony import */ var _helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/is-owned-by-context */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js");

const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
    return () => {
        const renderedNativeAudioBufferSourceNodes = new WeakMap();
        let start = null;
        let stop = null;
        const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);
            /*
             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created
             * again.
             */
            const nativeAudioBufferSourceNodeIsOwnedByContext = (0,_helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__.isOwnedByContext)(nativeAudioBufferSourceNode, nativeOfflineAudioContext);
            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {
                const options = {
                    buffer: nativeAudioBufferSourceNode.buffer,
                    channelCount: nativeAudioBufferSourceNode.channelCount,
                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,
                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,
                    // Bug #149: Safari does not yet support the detune AudioParam.
                    loop: nativeAudioBufferSourceNode.loop,
                    loopEnd: nativeAudioBufferSourceNode.loopEnd,
                    loopStart: nativeAudioBufferSourceNode.loopStart,
                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value
                };
                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);
                if (start !== null) {
                    nativeAudioBufferSourceNode.start(...start);
                }
                if (stop !== null) {
                    nativeAudioBufferSourceNode.stop(stop);
                }
            }
            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);
            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {
                // Bug #149: Safari does not yet support the detune AudioParam.
                await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);
            }
            else {
                // Bug #149: Safari does not yet support the detune AudioParam.
                await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);
            return nativeAudioBufferSourceNode;
        };
        return {
            set start(value) {
                start = value;
            },
            set stop(value) {
                stop = value;
            },
            render(proxy, nativeOfflineAudioContext) {
                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);
                if (renderedNativeAudioBufferSourceNode !== undefined) {
                    return Promise.resolve(renderedNativeAudioBufferSourceNode);
                }
                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
};
//# sourceMappingURL=audio-buffer-source-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/audio-context-constructor.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/audio-context-constructor.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAudioContextConstructor: () => (/* binding */ createAudioContextConstructor)
/* harmony export */ });
/* harmony import */ var _helpers_deactivate_audio_graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/deactivate-audio-graph */ "./node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js");
/* harmony import */ var _helpers_is_valid_latency_hint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/is-valid-latency-hint */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js");


const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {
    return class AudioContext extends baseAudioContextConstructor {
        constructor(options = {}) {
            if (nativeAudioContextConstructor === null) {
                throw new Error('Missing the native AudioContext constructor.');
            }
            let nativeAudioContext;
            try {
                nativeAudioContext = new nativeAudioContextConstructor(options);
            }
            catch (err) {
                // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.
                if (err.code === 12 && err.message === 'sampleRate is not in range') {
                    throw createNotSupportedError();
                }
                throw err;
            }
            // Bug #131 Safari returns null when there are four other AudioContexts running already.
            if (nativeAudioContext === null) {
                throw createUnknownError();
            }
            // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.
            if (!(0,_helpers_is_valid_latency_hint__WEBPACK_IMPORTED_MODULE_1__.isValidLatencyHint)(options.latencyHint)) {
                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);
            }
            // Bug #150 Safari does not support setting the sampleRate.
            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {
                throw createNotSupportedError();
            }
            super(nativeAudioContext, 2);
            const { latencyHint } = options;
            const { sampleRate } = nativeAudioContext;
            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.
            this._baseLatency =
                typeof nativeAudioContext.baseLatency === 'number'
                    ? nativeAudioContext.baseLatency
                    : latencyHint === 'balanced'
                        ? 512 / sampleRate
                        : latencyHint === 'interactive' || latencyHint === undefined
                            ? 256 / sampleRate
                            : latencyHint === 'playback'
                                ? 1024 / sampleRate
                                : /*
                                   * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a
                                   * ScriptProcessorNode.
                                   */
                                    (Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate;
            this._nativeAudioContext = nativeAudioContext;
            // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.
            if (nativeAudioContextConstructor.name === 'webkitAudioContext') {
                this._nativeGainNode = nativeAudioContext.createGain();
                this._nativeOscillatorNode = nativeAudioContext.createOscillator();
                this._nativeGainNode.gain.value = 1e-37;
                this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);
                this._nativeOscillatorNode.start();
            }
            else {
                this._nativeGainNode = null;
                this._nativeOscillatorNode = null;
            }
            this._state = null;
            /*
             * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes
             * to 'running'.
             */
            if (nativeAudioContext.state === 'running') {
                this._state = 'suspended';
                const revokeState = () => {
                    if (this._state === 'suspended') {
                        this._state = null;
                    }
                    nativeAudioContext.removeEventListener('statechange', revokeState);
                };
                nativeAudioContext.addEventListener('statechange', revokeState);
            }
        }
        get baseLatency() {
            return this._baseLatency;
        }
        get state() {
            return this._state !== null ? this._state : this._nativeAudioContext.state;
        }
        close() {
            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.
            if (this.state === 'closed') {
                return this._nativeAudioContext.close().then(() => {
                    throw createInvalidStateError();
                });
            }
            // Bug #34: If the state was set to suspended before it should be revoked now.
            if (this._state === 'suspended') {
                this._state = null;
            }
            return this._nativeAudioContext.close().then(() => {
                if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {
                    this._nativeOscillatorNode.stop();
                    this._nativeGainNode.disconnect();
                    this._nativeOscillatorNode.disconnect();
                }
                (0,_helpers_deactivate_audio_graph__WEBPACK_IMPORTED_MODULE_0__.deactivateAudioGraph)(this);
            });
        }
        createMediaElementSource(mediaElement) {
            return new mediaElementAudioSourceNodeConstructor(this, { mediaElement });
        }
        createMediaStreamDestination() {
            return new mediaStreamAudioDestinationNodeConstructor(this);
        }
        createMediaStreamSource(mediaStream) {
            return new mediaStreamAudioSourceNodeConstructor(this, { mediaStream });
        }
        createMediaStreamTrackSource(mediaStreamTrack) {
            return new mediaStreamTrackAudioSourceNodeConstructor(this, { mediaStreamTrack });
        }
        resume() {
            if (this._state === 'suspended') {
                return new Promise((resolve, reject) => {
                    const resolvePromise = () => {
                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);
                        if (this._nativeAudioContext.state === 'running') {
                            resolve();
                        }
                        else {
                            this.resume().then(resolve, reject);
                        }
                    };
                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);
                });
            }
            return this._nativeAudioContext.resume().catch((err) => {
                // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.
                // Bug #56: Safari invokes the catch handler but without an error.
                if (err === undefined || err.code === 15) {
                    throw createInvalidStateError();
                }
                throw err;
            });
        }
        suspend() {
            return this._nativeAudioContext.suspend().catch((err) => {
                // Bug #56: Safari invokes the catch handler but without an error.
                if (err === undefined) {
                    throw createInvalidStateError();
                }
                throw err;
            });
        }
    };
};
//# sourceMappingURL=audio-context-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-constructor.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-constructor.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAudioDestinationNodeConstructor: () => (/* binding */ createAudioDestinationNodeConstructor)
/* harmony export */ });
const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) => {
    return class AudioDestinationNode extends audioNodeConstructor {
        constructor(context, channelCount) {
            const nativeContext = getNativeContext(context);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);
            const audioDestinationNodeRenderer = ((isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null));
            super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);
            this._isNodeOfNativeOfflineAudioContext = isOffline;
            this._nativeAudioDestinationNode = nativeAudioDestinationNode;
        }
        get channelCount() {
            return this._nativeAudioDestinationNode.channelCount;
        }
        set channelCount(value) {
            // Bug #52: Chrome, Edge & Safari do not throw an exception at all.
            // Bug #54: Firefox does throw an IndexSizeError.
            if (this._isNodeOfNativeOfflineAudioContext) {
                throw createInvalidStateError();
            }
            // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.
            if (value > this._nativeAudioDestinationNode.maxChannelCount) {
                throw createIndexSizeError();
            }
            this._nativeAudioDestinationNode.channelCount = value;
        }
        get channelCountMode() {
            return this._nativeAudioDestinationNode.channelCountMode;
        }
        set channelCountMode(value) {
            // Bug #53: No browser does throw an exception yet.
            if (this._isNodeOfNativeOfflineAudioContext) {
                throw createInvalidStateError();
            }
            this._nativeAudioDestinationNode.channelCountMode = value;
        }
        get maxChannelCount() {
            return this._nativeAudioDestinationNode.maxChannelCount;
        }
    };
};
//# sourceMappingURL=audio-destination-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-renderer-factory.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-renderer-factory.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAudioDestinationNodeRenderer: () => (/* binding */ createAudioDestinationNodeRenderer)
/* harmony export */ });
const createAudioDestinationNodeRenderer = (renderInputsOfAudioNode) => {
    const renderedNativeAudioDestinationNodes = new WeakMap();
    const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext) => {
        const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;
        renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);
        return nativeAudioDestinationNode;
    };
    return {
        render(proxy, nativeOfflineAudioContext) {
            const renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);
            if (renderedNativeAudioDestinationNode !== undefined) {
                return Promise.resolve(renderedNativeAudioDestinationNode);
            }
            return createAudioDestinationNode(proxy, nativeOfflineAudioContext);
        }
    };
};
//# sourceMappingURL=audio-destination-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/audio-listener-factory.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/audio-listener-factory.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAudioListenerFactory: () => (/* binding */ createAudioListenerFactory)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./node_modules/standardized-audio-context/build/es2019/constants.js");

const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors) => {
    return (context, nativeContext) => {
        const nativeListener = nativeContext.listener;
        // Bug #117: Only Chrome & Edge support the new interface already.
        const createFakeAudioParams = () => {
            const buffer = new Float32Array(1);
            const channelMergerNode = createNativeChannelMergerNode(nativeContext, {
                channelCount: 1,
                channelCountMode: 'explicit',
                channelInterpretation: 'speakers',
                numberOfInputs: 9
            });
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            let isScriptProcessorNodeCreated = false;
            let lastOrientation = [0, 0, -1, 0, 1, 0];
            let lastPosition = [0, 0, 0];
            const createScriptProcessorNode = () => {
                if (isScriptProcessorNodeCreated) {
                    return;
                }
                isScriptProcessorNodeCreated = true;
                const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);
                // tslint:disable-next-line:deprecation
                scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {
                    const orientation = [
                        getFirstSample(inputBuffer, buffer, 0),
                        getFirstSample(inputBuffer, buffer, 1),
                        getFirstSample(inputBuffer, buffer, 2),
                        getFirstSample(inputBuffer, buffer, 3),
                        getFirstSample(inputBuffer, buffer, 4),
                        getFirstSample(inputBuffer, buffer, 5)
                    ];
                    if (orientation.some((value, index) => value !== lastOrientation[index])) {
                        nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation
                        lastOrientation = orientation;
                    }
                    const positon = [
                        getFirstSample(inputBuffer, buffer, 6),
                        getFirstSample(inputBuffer, buffer, 7),
                        getFirstSample(inputBuffer, buffer, 8)
                    ];
                    if (positon.some((value, index) => value !== lastPosition[index])) {
                        nativeListener.setPosition(...positon); // tslint:disable-line:deprecation
                        lastPosition = positon;
                    }
                };
                channelMergerNode.connect(scriptProcessorNode);
            };
            const createSetOrientation = (index) => (value) => {
                if (value !== lastOrientation[index]) {
                    lastOrientation[index] = value;
                    nativeListener.setOrientation(...lastOrientation); // tslint:disable-line:deprecation
                }
            };
            const createSetPosition = (index) => (value) => {
                if (value !== lastPosition[index]) {
                    lastPosition[index] = value;
                    nativeListener.setPosition(...lastPosition); // tslint:disable-line:deprecation
                }
            };
            const createFakeAudioParam = (input, initialValue, setValue) => {
                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {
                    channelCount: 1,
                    channelCountMode: 'explicit',
                    channelInterpretation: 'discrete',
                    offset: initialValue
                });
                constantSourceNode.connect(channelMergerNode, 0, input);
                // @todo This should be stopped when the context is closed.
                constantSourceNode.start();
                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {
                    get() {
                        return initialValue;
                    }
                });
                /*
                 * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and
                 * minValue for GainNodes.
                 */
                const audioParam = createAudioParam({ context }, isOffline, constantSourceNode.offset, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_POSITIVE_SINGLE_FLOAT, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_NEGATIVE_SINGLE_FLOAT);
                overwriteAccessors(audioParam, 'value', (get) => () => get.call(audioParam), (set) => (value) => {
                    try {
                        set.call(audioParam, value);
                    }
                    catch (err) {
                        if (err.code !== 9) {
                            throw err;
                        }
                    }
                    createScriptProcessorNode();
                    if (isOffline) {
                        // Bug #117: Using setOrientation() and setPosition() doesn't work with an OfflineAudioContext.
                        setValue(value);
                    }
                });
                audioParam.cancelAndHoldAtTime = ((cancelAndHoldAtTime) => {
                    if (isOffline) {
                        return () => {
                            throw createNotSupportedError();
                        };
                    }
                    return (...args) => {
                        const value = cancelAndHoldAtTime.apply(audioParam, args);
                        createScriptProcessorNode();
                        return value;
                    };
                })(audioParam.cancelAndHoldAtTime);
                audioParam.cancelScheduledValues = ((cancelScheduledValues) => {
                    if (isOffline) {
                        return () => {
                            throw createNotSupportedError();
                        };
                    }
                    return (...args) => {
                        const value = cancelScheduledValues.apply(audioParam, args);
                        createScriptProcessorNode();
                        return value;
                    };
                })(audioParam.cancelScheduledValues);
                audioParam.exponentialRampToValueAtTime = ((exponentialRampToValueAtTime) => {
                    if (isOffline) {
                        return () => {
                            throw createNotSupportedError();
                        };
                    }
                    return (...args) => {
                        const value = exponentialRampToValueAtTime.apply(audioParam, args);
                        createScriptProcessorNode();
                        return value;
                    };
                })(audioParam.exponentialRampToValueAtTime);
                audioParam.linearRampToValueAtTime = ((linearRampToValueAtTime) => {
                    if (isOffline) {
                        return () => {
                            throw createNotSupportedError();
                        };
                    }
                    return (...args) => {
                        const value = linearRampToValueAtTime.apply(audioParam, args);
                        createScriptProcessorNode();
                        return value;
                    };
                })(audioParam.linearRampToValueAtTime);
                audioParam.setTargetAtTime = ((setTargetAtTime) => {
                    if (isOffline) {
                        return () => {
                            throw createNotSupportedError();
                        };
                    }
                    return (...args) => {
                        const value = setTargetAtTime.apply(audioParam, args);
                        createScriptProcessorNode();
                        return value;
                    };
                })(audioParam.setTargetAtTime);
                audioParam.setValueAtTime = ((setValueAtTime) => {
                    if (isOffline) {
                        return () => {
                            throw createNotSupportedError();
                        };
                    }
                    return (...args) => {
                        const value = setValueAtTime.apply(audioParam, args);
                        createScriptProcessorNode();
                        return value;
                    };
                })(audioParam.setValueAtTime);
                audioParam.setValueCurveAtTime = ((setValueCurveAtTime) => {
                    if (isOffline) {
                        return () => {
                            throw createNotSupportedError();
                        };
                    }
                    return (...args) => {
                        const value = setValueCurveAtTime.apply(audioParam, args);
                        createScriptProcessorNode();
                        return value;
                    };
                })(audioParam.setValueCurveAtTime);
                return audioParam;
            };
            return {
                forwardX: createFakeAudioParam(0, 0, createSetOrientation(0)),
                forwardY: createFakeAudioParam(1, 0, createSetOrientation(1)),
                forwardZ: createFakeAudioParam(2, -1, createSetOrientation(2)),
                positionX: createFakeAudioParam(6, 0, createSetPosition(0)),
                positionY: createFakeAudioParam(7, 0, createSetPosition(1)),
                positionZ: createFakeAudioParam(8, 0, createSetPosition(2)),
                upX: createFakeAudioParam(3, 0, createSetOrientation(3)),
                upY: createFakeAudioParam(4, 1, createSetOrientation(4)),
                upZ: createFakeAudioParam(5, 0, createSetOrientation(5))
            };
        };
        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;
        return {
            get forwardX() {
                return forwardX;
            },
            get forwardY() {
                return forwardY;
            },
            get forwardZ() {
                return forwardZ;
            },
            get positionX() {
                return positionX;
            },
            get positionY() {
                return positionY;
            },
            get positionZ() {
                return positionZ;
            },
            get upX() {
                return upX;
            },
            get upY() {
                return upY;
            },
            get upZ() {
                return upZ;
            }
        };
    };
};
//# sourceMappingURL=audio-listener-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/audio-node-constructor.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/audio-node-constructor.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAudioNodeConstructor: () => (/* binding */ createAudioNodeConstructor)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");
/* harmony import */ var _guards_audio_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../guards/audio-node */ "./node_modules/standardized-audio-context/build/es2019/guards/audio-node.js");
/* harmony import */ var _guards_audio_node_output_connection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../guards/audio-node-output-connection */ "./node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js");
/* harmony import */ var _helpers_add_active_input_connection_to_audio_param__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/add-active-input-connection-to-audio-param */ "./node_modules/standardized-audio-context/build/es2019/helpers/add-active-input-connection-to-audio-param.js");
/* harmony import */ var _helpers_add_passive_input_connection_to_audio_param__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/add-passive-input-connection-to-audio-param */ "./node_modules/standardized-audio-context/build/es2019/helpers/add-passive-input-connection-to-audio-param.js");
/* harmony import */ var _helpers_connect_native_audio_node_to_native_audio_node__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/connect-native-audio-node-to-native-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js");
/* harmony import */ var _helpers_delete_active_input_connection__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/delete-active-input-connection */ "./node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection.js");
/* harmony import */ var _helpers_delete_active_input_connection_to_audio_param__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/delete-active-input-connection-to-audio-param */ "./node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection-to-audio-param.js");
/* harmony import */ var _helpers_delete_event_listeners_of_audio_node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/delete-event-listeners-of-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/delete-event-listeners-of-audio-node.js");
/* harmony import */ var _helpers_delete_passive_input_connection_to_audio_node__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../helpers/delete-passive-input-connection-to-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-node.js");
/* harmony import */ var _helpers_delete_passive_input_connection_to_audio_param__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../helpers/delete-passive-input-connection-to-audio-param */ "./node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-param.js");
/* harmony import */ var _helpers_disconnect_native_audio_node_from_native_audio_node__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../helpers/disconnect-native-audio-node-from-native-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js");
/* harmony import */ var _helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../helpers/get-audio-node-connections */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js");
/* harmony import */ var _helpers_get_audio_param_connections__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../helpers/get-audio-param-connections */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js");
/* harmony import */ var _helpers_get_event_listeners_of_audio_node__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../helpers/get-event-listeners-of-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js");
/* harmony import */ var _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../helpers/get-native-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js");
/* harmony import */ var _helpers_get_native_audio_param__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../helpers/get-native-audio-param */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js");
/* harmony import */ var _helpers_insert_element_in_set__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../helpers/insert-element-in-set */ "./node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js");
/* harmony import */ var _helpers_is_active_audio_node__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../helpers/is-active-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js");
/* harmony import */ var _helpers_is_part_of_a_cycle__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../helpers/is-part-of-a-cycle */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js");
/* harmony import */ var _helpers_is_passive_audio_node__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../helpers/is-passive-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js");
/* harmony import */ var _helpers_set_internal_state_to_active__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../helpers/set-internal-state-to-active */ "./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js");
/* harmony import */ var _helpers_set_internal_state_to_passive_when_necessary__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../helpers/set-internal-state-to-passive-when-necessary */ "./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js");
/* harmony import */ var _helpers_test_audio_node_disconnect_method_support__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../helpers/test-audio-node-disconnect-method-support */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-node-disconnect-method-support.js");
/* harmony import */ var _helpers_visit_each_audio_node_once__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../helpers/visit-each-audio-node-once */ "./node_modules/standardized-audio-context/build/es2019/helpers/visit-each-audio-node-once.js");
/* harmony import */ var _helpers_wrap_audio_node_disconnect_method__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../helpers/wrap-audio-node-disconnect-method */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-node-disconnect-method.js");


























const addConnectionToAudioParamOfAudioContext = (source, destination, output, isOffline) => {
    const { activeInputs, passiveInputs } = (0,_helpers_get_audio_param_connections__WEBPACK_IMPORTED_MODULE_13__.getAudioParamConnections)(destination);
    const { outputs } = (0,_helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_12__.getAudioNodeConnections)(source);
    const eventListeners = (0,_helpers_get_event_listeners_of_audio_node__WEBPACK_IMPORTED_MODULE_14__.getEventListenersOfAudioNode)(source);
    const eventListener = (isActive) => {
        const nativeAudioNode = (0,_helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_15__.getNativeAudioNode)(source);
        const nativeAudioParam = (0,_helpers_get_native_audio_param__WEBPACK_IMPORTED_MODULE_16__.getNativeAudioParam)(destination);
        if (isActive) {
            const partialConnection = (0,_helpers_delete_passive_input_connection_to_audio_param__WEBPACK_IMPORTED_MODULE_10__.deletePassiveInputConnectionToAudioParam)(passiveInputs, source, output);
            (0,_helpers_add_active_input_connection_to_audio_param__WEBPACK_IMPORTED_MODULE_3__.addActiveInputConnectionToAudioParam)(activeInputs, source, partialConnection, false);
            if (!isOffline && !(0,_helpers_is_part_of_a_cycle__WEBPACK_IMPORTED_MODULE_19__.isPartOfACycle)(source)) {
                nativeAudioNode.connect(nativeAudioParam, output);
            }
        }
        else {
            const partialConnection = (0,_helpers_delete_active_input_connection_to_audio_param__WEBPACK_IMPORTED_MODULE_7__.deleteActiveInputConnectionToAudioParam)(activeInputs, source, output);
            (0,_helpers_add_passive_input_connection_to_audio_param__WEBPACK_IMPORTED_MODULE_4__.addPassiveInputConnectionToAudioParam)(passiveInputs, partialConnection, false);
            if (!isOffline && !(0,_helpers_is_part_of_a_cycle__WEBPACK_IMPORTED_MODULE_19__.isPartOfACycle)(source)) {
                nativeAudioNode.disconnect(nativeAudioParam, output);
            }
        }
    };
    if ((0,_helpers_insert_element_in_set__WEBPACK_IMPORTED_MODULE_17__.insertElementInSet)(outputs, [destination, output], (outputConnection) => outputConnection[0] === destination && outputConnection[1] === output, true)) {
        eventListeners.add(eventListener);
        if ((0,_helpers_is_active_audio_node__WEBPACK_IMPORTED_MODULE_18__.isActiveAudioNode)(source)) {
            (0,_helpers_add_active_input_connection_to_audio_param__WEBPACK_IMPORTED_MODULE_3__.addActiveInputConnectionToAudioParam)(activeInputs, source, [output, eventListener], true);
        }
        else {
            (0,_helpers_add_passive_input_connection_to_audio_param__WEBPACK_IMPORTED_MODULE_4__.addPassiveInputConnectionToAudioParam)(passiveInputs, [source, output, eventListener], true);
        }
        return true;
    }
    return false;
};
const deleteInputConnectionOfAudioNode = (source, destination, output, input) => {
    const { activeInputs, passiveInputs } = (0,_helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_12__.getAudioNodeConnections)(destination);
    const activeInputConnection = (0,_helpers_delete_active_input_connection__WEBPACK_IMPORTED_MODULE_6__.deleteActiveInputConnection)(activeInputs[input], source, output);
    if (activeInputConnection === null) {
        const passiveInputConnection = (0,_helpers_delete_passive_input_connection_to_audio_node__WEBPACK_IMPORTED_MODULE_9__.deletePassiveInputConnectionToAudioNode)(passiveInputs, source, output, input);
        return [passiveInputConnection[2], false];
    }
    return [activeInputConnection[2], true];
};
const deleteInputConnectionOfAudioParam = (source, destination, output) => {
    const { activeInputs, passiveInputs } = (0,_helpers_get_audio_param_connections__WEBPACK_IMPORTED_MODULE_13__.getAudioParamConnections)(destination);
    const activeInputConnection = (0,_helpers_delete_active_input_connection__WEBPACK_IMPORTED_MODULE_6__.deleteActiveInputConnection)(activeInputs, source, output);
    if (activeInputConnection === null) {
        const passiveInputConnection = (0,_helpers_delete_passive_input_connection_to_audio_param__WEBPACK_IMPORTED_MODULE_10__.deletePassiveInputConnectionToAudioParam)(passiveInputs, source, output);
        return [passiveInputConnection[1], false];
    }
    return [activeInputConnection[2], true];
};
const deleteInputsOfAudioNode = (source, isOffline, destination, output, input) => {
    const [listener, isActive] = deleteInputConnectionOfAudioNode(source, destination, output, input);
    if (listener !== null) {
        (0,_helpers_delete_event_listeners_of_audio_node__WEBPACK_IMPORTED_MODULE_8__.deleteEventListenerOfAudioNode)(source, listener);
        if (isActive && !isOffline && !(0,_helpers_is_part_of_a_cycle__WEBPACK_IMPORTED_MODULE_19__.isPartOfACycle)(source)) {
            (0,_helpers_disconnect_native_audio_node_from_native_audio_node__WEBPACK_IMPORTED_MODULE_11__.disconnectNativeAudioNodeFromNativeAudioNode)((0,_helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_15__.getNativeAudioNode)(source), (0,_helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_15__.getNativeAudioNode)(destination), output, input);
        }
    }
    if ((0,_helpers_is_active_audio_node__WEBPACK_IMPORTED_MODULE_18__.isActiveAudioNode)(destination)) {
        const { activeInputs } = (0,_helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_12__.getAudioNodeConnections)(destination);
        (0,_helpers_set_internal_state_to_passive_when_necessary__WEBPACK_IMPORTED_MODULE_22__.setInternalStateToPassiveWhenNecessary)(destination, activeInputs);
    }
};
const deleteInputsOfAudioParam = (source, isOffline, destination, output) => {
    const [listener, isActive] = deleteInputConnectionOfAudioParam(source, destination, output);
    if (listener !== null) {
        (0,_helpers_delete_event_listeners_of_audio_node__WEBPACK_IMPORTED_MODULE_8__.deleteEventListenerOfAudioNode)(source, listener);
        if (isActive && !isOffline && !(0,_helpers_is_part_of_a_cycle__WEBPACK_IMPORTED_MODULE_19__.isPartOfACycle)(source)) {
            (0,_helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_15__.getNativeAudioNode)(source).disconnect((0,_helpers_get_native_audio_param__WEBPACK_IMPORTED_MODULE_16__.getNativeAudioParam)(destination), output);
        }
    }
};
const deleteAnyConnection = (source, isOffline) => {
    const audioNodeConnectionsOfSource = (0,_helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_12__.getAudioNodeConnections)(source);
    const destinations = [];
    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {
        if ((0,_guards_audio_node_output_connection__WEBPACK_IMPORTED_MODULE_2__.isAudioNodeOutputConnection)(outputConnection)) {
            deleteInputsOfAudioNode(source, isOffline, ...outputConnection);
        }
        else {
            deleteInputsOfAudioParam(source, isOffline, ...outputConnection);
        }
        destinations.push(outputConnection[0]);
    }
    audioNodeConnectionsOfSource.outputs.clear();
    return destinations;
};
const deleteConnectionAtOutput = (source, isOffline, output) => {
    const audioNodeConnectionsOfSource = (0,_helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_12__.getAudioNodeConnections)(source);
    const destinations = [];
    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {
        if (outputConnection[1] === output) {
            if ((0,_guards_audio_node_output_connection__WEBPACK_IMPORTED_MODULE_2__.isAudioNodeOutputConnection)(outputConnection)) {
                deleteInputsOfAudioNode(source, isOffline, ...outputConnection);
            }
            else {
                deleteInputsOfAudioParam(source, isOffline, ...outputConnection);
            }
            destinations.push(outputConnection[0]);
            audioNodeConnectionsOfSource.outputs.delete(outputConnection);
        }
    }
    return destinations;
};
const deleteConnectionToDestination = (source, isOffline, destination, output, input) => {
    const audioNodeConnectionsOfSource = (0,_helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_12__.getAudioNodeConnections)(source);
    return Array.from(audioNodeConnectionsOfSource.outputs)
        .filter((outputConnection) => outputConnection[0] === destination &&
        (output === undefined || outputConnection[1] === output) &&
        (input === undefined || outputConnection[2] === input))
        .map((outputConnection) => {
        if ((0,_guards_audio_node_output_connection__WEBPACK_IMPORTED_MODULE_2__.isAudioNodeOutputConnection)(outputConnection)) {
            deleteInputsOfAudioNode(source, isOffline, ...outputConnection);
        }
        else {
            deleteInputsOfAudioParam(source, isOffline, ...outputConnection);
        }
        audioNodeConnectionsOfSource.outputs.delete(outputConnection);
        return outputConnection[0];
    });
};
const createAudioNodeConstructor = (addAudioNodeConnections, addConnectionToAudioNode, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor) => {
    return class AudioNode extends eventTargetConstructor {
        constructor(context, isActive, nativeAudioNode, audioNodeRenderer) {
            super(nativeAudioNode);
            this._context = context;
            this._nativeAudioNode = nativeAudioNode;
            const nativeContext = getNativeContext(context);
            // Bug #12: Safari does not support to disconnect a specific destination.
            if (isNativeAudioContext(nativeContext) &&
                true !==
                    cacheTestResult(_helpers_test_audio_node_disconnect_method_support__WEBPACK_IMPORTED_MODULE_23__.testAudioNodeDisconnectMethodSupport, () => {
                        return (0,_helpers_test_audio_node_disconnect_method_support__WEBPACK_IMPORTED_MODULE_23__.testAudioNodeDisconnectMethodSupport)(nativeContext, nativeAudioWorkletNodeConstructor);
                    })) {
                (0,_helpers_wrap_audio_node_disconnect_method__WEBPACK_IMPORTED_MODULE_25__.wrapAudioNodeDisconnectMethod)(nativeAudioNode);
            }
            _globals__WEBPACK_IMPORTED_MODULE_0__.AUDIO_NODE_STORE.set(this, nativeAudioNode);
            _globals__WEBPACK_IMPORTED_MODULE_0__.EVENT_LISTENERS.set(this, new Set());
            if (context.state !== 'closed' && isActive) {
                (0,_helpers_set_internal_state_to_active__WEBPACK_IMPORTED_MODULE_21__.setInternalStateToActive)(this);
            }
            addAudioNodeConnections(this, audioNodeRenderer, nativeAudioNode);
        }
        get channelCount() {
            return this._nativeAudioNode.channelCount;
        }
        set channelCount(value) {
            this._nativeAudioNode.channelCount = value;
        }
        get channelCountMode() {
            return this._nativeAudioNode.channelCountMode;
        }
        set channelCountMode(value) {
            this._nativeAudioNode.channelCountMode = value;
        }
        get channelInterpretation() {
            return this._nativeAudioNode.channelInterpretation;
        }
        set channelInterpretation(value) {
            this._nativeAudioNode.channelInterpretation = value;
        }
        get context() {
            return this._context;
        }
        get numberOfInputs() {
            return this._nativeAudioNode.numberOfInputs;
        }
        get numberOfOutputs() {
            return this._nativeAudioNode.numberOfOutputs;
        }
        // tslint:disable-next-line:invalid-void
        connect(destination, output = 0, input = 0) {
            // Bug #174: Safari does expose a wrong numberOfOutputs for MediaStreamAudioDestinationNodes.
            if (output < 0 || output >= this._nativeAudioNode.numberOfOutputs) {
                throw createIndexSizeError();
            }
            const nativeContext = getNativeContext(this._context);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {
                throw createInvalidAccessError();
            }
            if ((0,_guards_audio_node__WEBPACK_IMPORTED_MODULE_1__.isAudioNode)(destination)) {
                const nativeDestinationAudioNode = (0,_helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_15__.getNativeAudioNode)(destination);
                try {
                    const connection = (0,_helpers_connect_native_audio_node_to_native_audio_node__WEBPACK_IMPORTED_MODULE_5__.connectNativeAudioNodeToNativeAudioNode)(this._nativeAudioNode, nativeDestinationAudioNode, output, input);
                    const isPassive = (0,_helpers_is_passive_audio_node__WEBPACK_IMPORTED_MODULE_20__.isPassiveAudioNode)(this);
                    if (isOffline || isPassive) {
                        this._nativeAudioNode.disconnect(...connection);
                    }
                    if (this.context.state !== 'closed' && !isPassive && (0,_helpers_is_passive_audio_node__WEBPACK_IMPORTED_MODULE_20__.isPassiveAudioNode)(destination)) {
                        (0,_helpers_set_internal_state_to_active__WEBPACK_IMPORTED_MODULE_21__.setInternalStateToActive)(destination);
                    }
                }
                catch (err) {
                    // Bug #41: Safari does not throw the correct exception so far.
                    if (err.code === 12) {
                        throw createInvalidAccessError();
                    }
                    throw err;
                }
                const isNewConnectionToAudioNode = addConnectionToAudioNode(this, destination, output, input, isOffline);
                // Bug #164: Only Firefox detects cycles so far.
                if (isNewConnectionToAudioNode) {
                    const cycles = detectCycles([this], destination);
                    (0,_helpers_visit_each_audio_node_once__WEBPACK_IMPORTED_MODULE_24__.visitEachAudioNodeOnce)(cycles, createIncrementCycleCounter(isOffline));
                }
                return destination;
            }
            const nativeAudioParam = (0,_helpers_get_native_audio_param__WEBPACK_IMPORTED_MODULE_16__.getNativeAudioParam)(destination);
            /*
             * Bug #73, #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an
             * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify
             * Safari. In addition to that the maxValue property is used to only detect the affected versions below v14.0.2.
             */
            if (nativeAudioParam.name === 'playbackRate' && nativeAudioParam.maxValue === 1024) {
                throw createNotSupportedError();
            }
            try {
                this._nativeAudioNode.connect(nativeAudioParam, output);
                if (isOffline || (0,_helpers_is_passive_audio_node__WEBPACK_IMPORTED_MODULE_20__.isPassiveAudioNode)(this)) {
                    this._nativeAudioNode.disconnect(nativeAudioParam, output);
                }
            }
            catch (err) {
                // Bug #58: Safari doesn't throw an InvalidAccessError yet.
                if (err.code === 12) {
                    throw createInvalidAccessError();
                }
                throw err;
            }
            const isNewConnectionToAudioParam = addConnectionToAudioParamOfAudioContext(this, destination, output, isOffline);
            // Bug #164: Only Firefox detects cycles so far.
            if (isNewConnectionToAudioParam) {
                const cycles = detectCycles([this], destination);
                (0,_helpers_visit_each_audio_node_once__WEBPACK_IMPORTED_MODULE_24__.visitEachAudioNodeOnce)(cycles, createIncrementCycleCounter(isOffline));
            }
        }
        disconnect(destinationOrOutput, output, input) {
            let destinations;
            const nativeContext = getNativeContext(this._context);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            if (destinationOrOutput === undefined) {
                destinations = deleteAnyConnection(this, isOffline);
            }
            else if (typeof destinationOrOutput === 'number') {
                if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {
                    throw createIndexSizeError();
                }
                destinations = deleteConnectionAtOutput(this, isOffline, destinationOrOutput);
            }
            else {
                if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {
                    throw createIndexSizeError();
                }
                if ((0,_guards_audio_node__WEBPACK_IMPORTED_MODULE_1__.isAudioNode)(destinationOrOutput) && input !== undefined && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {
                    throw createIndexSizeError();
                }
                destinations = deleteConnectionToDestination(this, isOffline, destinationOrOutput, output, input);
                if (destinations.length === 0) {
                    throw createInvalidAccessError();
                }
            }
            // Bug #164: Only Firefox detects cycles so far.
            for (const destination of destinations) {
                const cycles = detectCycles([this], destination);
                (0,_helpers_visit_each_audio_node_once__WEBPACK_IMPORTED_MODULE_24__.visitEachAudioNodeOnce)(cycles, decrementCycleCounter);
            }
        }
    };
};
//# sourceMappingURL=audio-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/audio-param-factory.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/audio-param-factory.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAudioParamFactory: () => (/* binding */ createAudioParamFactory)
/* harmony export */ });
/* harmony import */ var automation_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! automation-events */ "./node_modules/automation-events/build/es5/bundle.js");
/* harmony import */ var automation_events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(automation_events__WEBPACK_IMPORTED_MODULE_0__);

const createAudioParamFactory = (addAudioParamConnections, audioParamAudioNodeStore, audioParamStore, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible) => {
    return (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null) => {
        // Bug #196 Only Safari sets the defaultValue to the initial value.
        const defaultValue = nativeAudioParam.value;
        const automationEventList = new automation_events__WEBPACK_IMPORTED_MODULE_0__.AutomationEventList(defaultValue);
        const audioParamRenderer = isAudioParamOfOfflineAudioContext ? createAudioParamRenderer(automationEventList) : null;
        const audioParam = {
            get defaultValue() {
                return defaultValue;
            },
            get maxValue() {
                return maxValue === null ? nativeAudioParam.maxValue : maxValue;
            },
            get minValue() {
                return minValue === null ? nativeAudioParam.minValue : minValue;
            },
            get value() {
                return nativeAudioParam.value;
            },
            set value(value) {
                nativeAudioParam.value = value;
                // Bug #98: Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().
                audioParam.setValueAtTime(value, audioNode.context.currentTime);
            },
            cancelAndHoldAtTime(cancelTime) {
                // Bug #28: Firefox & Safari do not yet implement cancelAndHoldAtTime().
                if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {
                    if (audioParamRenderer === null) {
                        automationEventList.flush(audioNode.context.currentTime);
                    }
                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));
                    nativeAudioParam.cancelAndHoldAtTime(cancelTime);
                }
                else {
                    const previousLastEvent = Array.from(automationEventList).pop();
                    if (audioParamRenderer === null) {
                        automationEventList.flush(audioNode.context.currentTime);
                    }
                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));
                    const currentLastEvent = Array.from(automationEventList).pop();
                    nativeAudioParam.cancelScheduledValues(cancelTime);
                    if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {
                        if (currentLastEvent.type === 'exponentialRampToValue') {
                            nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);
                        }
                        else if (currentLastEvent.type === 'linearRampToValue') {
                            nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);
                        }
                        else if (currentLastEvent.type === 'setValue') {
                            nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);
                        }
                        else if (currentLastEvent.type === 'setValueCurve') {
                            nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);
                        }
                    }
                }
                return audioParam;
            },
            cancelScheduledValues(cancelTime) {
                if (audioParamRenderer === null) {
                    automationEventList.flush(audioNode.context.currentTime);
                }
                automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));
                nativeAudioParam.cancelScheduledValues(cancelTime);
                return audioParam;
            },
            exponentialRampToValueAtTime(value, endTime) {
                // Bug #45: Safari does not throw an error yet.
                if (value === 0) {
                    throw new RangeError();
                }
                // Bug #187: Safari does not throw an error yet.
                if (!Number.isFinite(endTime) || endTime < 0) {
                    throw new RangeError();
                }
                const currentTime = audioNode.context.currentTime;
                if (audioParamRenderer === null) {
                    automationEventList.flush(currentTime);
                }
                // Bug #194: Firefox does not implicitly call setValueAtTime() if there is no previous event.
                if (Array.from(automationEventList).length === 0) {
                    automationEventList.add(createSetValueAutomationEvent(defaultValue, currentTime));
                    nativeAudioParam.setValueAtTime(defaultValue, currentTime);
                }
                automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));
                nativeAudioParam.exponentialRampToValueAtTime(value, endTime);
                return audioParam;
            },
            linearRampToValueAtTime(value, endTime) {
                const currentTime = audioNode.context.currentTime;
                if (audioParamRenderer === null) {
                    automationEventList.flush(currentTime);
                }
                // Bug #195: Firefox does not implicitly call setValueAtTime() if there is no previous event.
                if (Array.from(automationEventList).length === 0) {
                    automationEventList.add(createSetValueAutomationEvent(defaultValue, currentTime));
                    nativeAudioParam.setValueAtTime(defaultValue, currentTime);
                }
                automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));
                nativeAudioParam.linearRampToValueAtTime(value, endTime);
                return audioParam;
            },
            setTargetAtTime(target, startTime, timeConstant) {
                if (audioParamRenderer === null) {
                    automationEventList.flush(audioNode.context.currentTime);
                }
                automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));
                nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);
                return audioParam;
            },
            setValueAtTime(value, startTime) {
                if (audioParamRenderer === null) {
                    automationEventList.flush(audioNode.context.currentTime);
                }
                automationEventList.add(createSetValueAutomationEvent(value, startTime));
                nativeAudioParam.setValueAtTime(value, startTime);
                return audioParam;
            },
            setValueCurveAtTime(values, startTime, duration) {
                // Bug 183: Safari only accepts a Float32Array.
                const convertedValues = values instanceof Float32Array ? values : new Float32Array(values);
                /*
                 * Bug #152: Safari does not correctly interpolate the values of the curve.
                 * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the
                 * existence of the webkitAudioContext is used as a workaround here.
                 */
                if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {
                    const endTime = startTime + duration;
                    const sampleRate = audioNode.context.sampleRate;
                    const firstSample = Math.ceil(startTime * sampleRate);
                    const lastSample = Math.floor(endTime * sampleRate);
                    const numberOfInterpolatedValues = lastSample - firstSample;
                    const interpolatedValues = new Float32Array(numberOfInterpolatedValues);
                    for (let i = 0; i < numberOfInterpolatedValues; i += 1) {
                        const theoreticIndex = ((convertedValues.length - 1) / duration) * ((firstSample + i) / sampleRate - startTime);
                        const lowerIndex = Math.floor(theoreticIndex);
                        const upperIndex = Math.ceil(theoreticIndex);
                        interpolatedValues[i] =
                            lowerIndex === upperIndex
                                ? convertedValues[lowerIndex]
                                : (1 - (theoreticIndex - lowerIndex)) * convertedValues[lowerIndex] +
                                    (1 - (upperIndex - theoreticIndex)) * convertedValues[upperIndex];
                    }
                    if (audioParamRenderer === null) {
                        automationEventList.flush(audioNode.context.currentTime);
                    }
                    automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));
                    nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);
                    const timeOfLastSample = lastSample / sampleRate;
                    if (timeOfLastSample < endTime) {
                        setValueAtTimeUntilPossible(audioParam, interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);
                    }
                    setValueAtTimeUntilPossible(audioParam, convertedValues[convertedValues.length - 1], endTime);
                }
                else {
                    if (audioParamRenderer === null) {
                        automationEventList.flush(audioNode.context.currentTime);
                    }
                    automationEventList.add(createSetValueCurveAutomationEvent(convertedValues, startTime, duration));
                    nativeAudioParam.setValueCurveAtTime(convertedValues, startTime, duration);
                }
                return audioParam;
            }
        };
        audioParamStore.set(audioParam, nativeAudioParam);
        audioParamAudioNodeStore.set(audioParam, audioNode);
        addAudioParamConnections(audioParam, audioParamRenderer);
        return audioParam;
    };
};
//# sourceMappingURL=audio-param-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/audio-param-renderer.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/audio-param-renderer.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAudioParamRenderer: () => (/* binding */ createAudioParamRenderer)
/* harmony export */ });
const createAudioParamRenderer = (automationEventList) => {
    return {
        replay(audioParam) {
            for (const automationEvent of automationEventList) {
                if (automationEvent.type === 'exponentialRampToValue') {
                    const { endTime, value } = automationEvent;
                    audioParam.exponentialRampToValueAtTime(value, endTime);
                }
                else if (automationEvent.type === 'linearRampToValue') {
                    const { endTime, value } = automationEvent;
                    audioParam.linearRampToValueAtTime(value, endTime);
                }
                else if (automationEvent.type === 'setTarget') {
                    const { startTime, target, timeConstant } = automationEvent;
                    audioParam.setTargetAtTime(target, startTime, timeConstant);
                }
                else if (automationEvent.type === 'setValue') {
                    const { startTime, value } = automationEvent;
                    audioParam.setValueAtTime(value, startTime);
                }
                else if (automationEvent.type === 'setValueCurve') {
                    const { duration, startTime, values } = automationEvent;
                    audioParam.setValueCurveAtTime(values, startTime, duration);
                }
                else {
                    throw new Error("Can't apply an unknown automation.");
                }
            }
        }
    };
};
//# sourceMappingURL=audio-param-renderer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAudioWorkletNodeConstructor: () => (/* binding */ createAudioWorkletNodeConstructor)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");
/* harmony import */ var _read_only_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../read-only-map */ "./node_modules/standardized-audio-context/build/es2019/read-only-map.js");


const DEFAULT_OPTIONS = {
    channelCount: 2,
    // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.
    channelCountMode: 'explicit',
    channelInterpretation: 'speakers',
    numberOfInputs: 1,
    numberOfOutputs: 1,
    parameterData: {},
    processorOptions: {}
};
const createAudioWorkletNodeConstructor = (addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener) => {
    return class AudioWorkletNode extends audioNodeConstructor {
        constructor(context, name, options) {
            var _a;
            const nativeContext = getNativeContext(context);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const mergedOptions = sanitizeAudioWorkletNodeOptions({ ...DEFAULT_OPTIONS, ...options });
            // Bug #191: Safari doesn't throw an error if the options aren't clonable.
            testAudioWorkletNodeOptionsClonability(mergedOptions);
            const nodeNameToProcessorConstructorMap = _globals__WEBPACK_IMPORTED_MODULE_0__.NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);
            const processorConstructor = nodeNameToProcessorConstructorMap === null || nodeNameToProcessorConstructorMap === void 0 ? void 0 : nodeNameToProcessorConstructorMap.get(name);
            // Bug #186: Chrome and Edge do not allow to create an AudioWorkletNode on a closed AudioContext.
            const nativeContextOrBackupOfflineAudioContext = isOffline || nativeContext.state !== 'closed'
                ? nativeContext
                : (_a = getBackupOfflineAudioContext(nativeContext)) !== null && _a !== void 0 ? _a : nativeContext;
            const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContextOrBackupOfflineAudioContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);
            const audioWorkletNodeRenderer = ((isOffline ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor) : null));
            /*
             * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor
             * returns false.
             */
            super(context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);
            const parameters = [];
            nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {
                const audioParam = createAudioParam(this, isOffline, nativeAudioParam);
                parameters.push([nm, audioParam]);
            });
            this._nativeAudioWorkletNode = nativeAudioWorkletNode;
            this._onprocessorerror = null;
            this._parameters = new _read_only_map__WEBPACK_IMPORTED_MODULE_1__.ReadOnlyMap(parameters);
            /*
             * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to
             * the destination.
             */
            if (isOffline) {
                addUnrenderedAudioWorkletNode(nativeContext, this);
            }
            const { activeInputs } = getAudioNodeConnections(this);
            setActiveAudioWorkletNodeInputs(nativeAudioWorkletNode, activeInputs);
        }
        get onprocessorerror() {
            return this._onprocessorerror;
        }
        set onprocessorerror(value) {
            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
            this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;
            const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;
            this._onprocessorerror =
                nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener
                    ? value
                    : nativeOnProcessorError;
        }
        get parameters() {
            if (this._parameters === null) {
                // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.
                return this._nativeAudioWorkletNode.parameters;
            }
            return this._parameters;
        }
        get port() {
            return this._nativeAudioWorkletNode.port;
        }
    };
};
//# sourceMappingURL=audio-worklet-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-renderer-factory.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-renderer-factory.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAudioWorkletNodeRendererFactory: () => (/* binding */ createAudioWorkletNodeRendererFactory)
/* harmony export */ });
/* harmony import */ var _helpers_copy_from_channel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/copy-from-channel */ "./node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js");
/* harmony import */ var _helpers_copy_to_channel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/copy-to-channel */ "./node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js");
/* harmony import */ var _helpers_create_nested_arrays__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/create-nested-arrays */ "./node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js");
/* harmony import */ var _helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/get-audio-node-connections */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js");
/* harmony import */ var _helpers_get_audio_worklet_processor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/get-audio-worklet-processor */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-worklet-processor.js");
/* harmony import */ var _helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/is-owned-by-context */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js");






const processBuffer = async (proxy, renderedBuffer, nativeOfflineAudioContext, options, outputChannelCount, processorConstructor, exposeCurrentFrameAndCurrentTime) => {
    // Ceil the length to the next full render quantum.
    // Bug #17: Safari does not yet expose the length.
    const length = renderedBuffer === null ? Math.ceil(proxy.context.length / 128) * 128 : renderedBuffer.length;
    const numberOfInputChannels = options.channelCount * options.numberOfInputs;
    const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);
    const processedBuffer = numberOfOutputChannels === 0
        ? null
        : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);
    if (processorConstructor === undefined) {
        throw new Error('Missing the processor constructor.');
    }
    const audioNodeConnections = (0,_helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_3__.getAudioNodeConnections)(proxy);
    const audioWorkletProcessor = await (0,_helpers_get_audio_worklet_processor__WEBPACK_IMPORTED_MODULE_4__.getAudioWorkletProcessor)(nativeOfflineAudioContext, proxy);
    const inputs = (0,_helpers_create_nested_arrays__WEBPACK_IMPORTED_MODULE_2__.createNestedArrays)(options.numberOfInputs, options.channelCount);
    const outputs = (0,_helpers_create_nested_arrays__WEBPACK_IMPORTED_MODULE_2__.createNestedArrays)(options.numberOfOutputs, outputChannelCount);
    const parameters = Array.from(proxy.parameters.keys()).reduce((prmtrs, name) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});
    for (let i = 0; i < length; i += 128) {
        if (options.numberOfInputs > 0 && renderedBuffer !== null) {
            for (let j = 0; j < options.numberOfInputs; j += 1) {
                for (let k = 0; k < options.channelCount; k += 1) {
                    (0,_helpers_copy_from_channel__WEBPACK_IMPORTED_MODULE_0__.copyFromChannel)(renderedBuffer, inputs[j], k, k, i);
                }
            }
        }
        if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {
            processorConstructor.parameterDescriptors.forEach(({ name }, index) => {
                (0,_helpers_copy_from_channel__WEBPACK_IMPORTED_MODULE_0__.copyFromChannel)(renderedBuffer, parameters, name, numberOfInputChannels + index, i);
            });
        }
        for (let j = 0; j < options.numberOfInputs; j += 1) {
            for (let k = 0; k < outputChannelCount[j]; k += 1) {
                // The byteLength will be 0 when the ArrayBuffer was transferred.
                if (outputs[j][k].byteLength === 0) {
                    outputs[j][k] = new Float32Array(128);
                }
            }
        }
        try {
            const potentiallyEmptyInputs = inputs.map((input, index) => {
                if (audioNodeConnections.activeInputs[index].size === 0) {
                    return [];
                }
                return input;
            });
            const activeSourceFlag = exposeCurrentFrameAndCurrentTime(i / nativeOfflineAudioContext.sampleRate, nativeOfflineAudioContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));
            if (processedBuffer !== null) {
                for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {
                    for (let k = 0; k < outputChannelCount[j]; k += 1) {
                        (0,_helpers_copy_to_channel__WEBPACK_IMPORTED_MODULE_1__.copyToChannel)(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);
                    }
                    outputChannelSplitterNodeOutput += outputChannelCount[j];
                }
            }
            if (!activeSourceFlag) {
                break;
            }
        }
        catch (error) {
            proxy.dispatchEvent(new ErrorEvent('processorerror', {
                colno: error.colno,
                filename: error.filename,
                lineno: error.lineno,
                message: error.message
            }));
            break;
        }
    }
    return processedBuffer;
};
const createAudioWorkletNodeRendererFactory = (connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {
    return (name, options, processorConstructor) => {
        const renderedNativeAudioNodes = new WeakMap();
        let processedBufferPromise = null;
        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeAudioWorkletNode = getNativeAudioNode(proxy);
            let nativeOutputNodes = null;
            const nativeAudioWorkletNodeIsOwnedByContext = (0,_helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_5__.isOwnedByContext)(nativeAudioWorkletNode, nativeOfflineAudioContext);
            const outputChannelCount = Array.isArray(options.outputChannelCount)
                ? options.outputChannelCount
                : Array.from(options.outputChannelCount);
            // Bug #61: Only Chrome, Edge & Firefox have an implementation of the AudioWorkletNode yet.
            if (nativeAudioWorkletNodeConstructor === null) {
                const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);
                const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {
                    channelCount: Math.max(1, numberOfOutputChannels),
                    channelCountMode: 'explicit',
                    channelInterpretation: 'discrete',
                    numberOfOutputs: Math.max(1, numberOfOutputChannels)
                });
                const outputChannelMergerNodes = [];
                for (let i = 0; i < proxy.numberOfOutputs; i += 1) {
                    outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {
                        channelCount: 1,
                        channelCountMode: 'explicit',
                        channelInterpretation: 'speakers',
                        numberOfInputs: outputChannelCount[i]
                    }));
                }
                const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {
                    channelCount: options.channelCount,
                    channelCountMode: options.channelCountMode,
                    channelInterpretation: options.channelInterpretation,
                    gain: 1
                });
                outputGainNode.connect = connectMultipleOutputs.bind(null, outputChannelMergerNodes);
                outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputChannelMergerNodes);
                nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];
            }
            else if (!nativeAudioWorkletNodeIsOwnedByContext) {
                nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);
            }
            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeOutputNodes === null ? nativeAudioWorkletNode : nativeOutputNodes[2]);
            if (nativeOutputNodes !== null) {
                if (processedBufferPromise === null) {
                    if (processorConstructor === undefined) {
                        throw new Error('Missing the processor constructor.');
                    }
                    if (nativeOfflineAudioContextConstructor === null) {
                        throw new Error('Missing the native OfflineAudioContext constructor.');
                    }
                    // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.
                    const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;
                    const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;
                    const numberOfChannels = numberOfInputChannels + numberOfParameters;
                    const renderBuffer = async () => {
                        const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfChannels, 
                        // Ceil the length to the next full render quantum.
                        // Bug #17: Safari does not yet expose the length.
                        Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);
                        const gainNodes = [];
                        const inputChannelSplitterNodes = [];
                        for (let i = 0; i < options.numberOfInputs; i += 1) {
                            gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {
                                channelCount: options.channelCount,
                                channelCountMode: options.channelCountMode,
                                channelInterpretation: options.channelInterpretation,
                                gain: 1
                            }));
                            inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {
                                channelCount: options.channelCount,
                                channelCountMode: 'explicit',
                                channelInterpretation: 'discrete',
                                numberOfOutputs: options.channelCount
                            }));
                        }
                        const constantSourceNodes = await Promise.all(Array.from(proxy.parameters.values()).map(async (audioParam) => {
                            const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {
                                channelCount: 1,
                                channelCountMode: 'explicit',
                                channelInterpretation: 'discrete',
                                offset: audioParam.value
                            });
                            await renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset);
                            return constantSourceNode;
                        }));
                        const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {
                            channelCount: 1,
                            channelCountMode: 'explicit',
                            channelInterpretation: 'speakers',
                            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)
                        });
                        for (let i = 0; i < options.numberOfInputs; i += 1) {
                            gainNodes[i].connect(inputChannelSplitterNodes[i]);
                            for (let j = 0; j < options.channelCount; j += 1) {
                                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);
                            }
                        }
                        for (const [index, constantSourceNode] of constantSourceNodes.entries()) {
                            constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);
                            constantSourceNode.start(0);
                        }
                        inputChannelMergerNode.connect(partialOfflineAudioContext.destination);
                        await Promise.all(gainNodes.map((gainNode) => renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode)));
                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);
                    };
                    processedBufferPromise = processBuffer(proxy, numberOfChannels === 0 ? null : await renderBuffer(), nativeOfflineAudioContext, options, outputChannelCount, processorConstructor, exposeCurrentFrameAndCurrentTime);
                }
                const processedBuffer = await processedBufferPromise;
                const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {
                    buffer: null,
                    channelCount: 2,
                    channelCountMode: 'max',
                    channelInterpretation: 'speakers',
                    loop: false,
                    loopEnd: 0,
                    loopStart: 0,
                    playbackRate: 1
                });
                const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;
                if (processedBuffer !== null) {
                    audioBufferSourceNode.buffer = processedBuffer;
                    audioBufferSourceNode.start(0);
                }
                audioBufferSourceNode.connect(outputChannelSplitterNode);
                for (let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1) {
                    const outputChannelMergerNode = outputChannelMergerNodes[i];
                    for (let j = 0; j < outputChannelCount[i]; j += 1) {
                        outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);
                    }
                    outputChannelSplitterNodeOutput += outputChannelCount[i];
                }
                return outputGainNode;
            }
            if (!nativeAudioWorkletNodeIsOwnedByContext) {
                for (const [nm, audioParam] of proxy.parameters.entries()) {
                    await renderAutomation(nativeOfflineAudioContext, audioParam, 
                    // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.
                    nativeAudioWorkletNode.parameters.get(nm));
                }
            }
            else {
                for (const [nm, audioParam] of proxy.parameters.entries()) {
                    await connectAudioParam(nativeOfflineAudioContext, audioParam, 
                    // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.
                    nativeAudioWorkletNode.parameters.get(nm));
                }
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode);
            return nativeAudioWorkletNode;
        };
        return {
            render(proxy, nativeOfflineAudioContext) {
                deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext, proxy);
                const renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);
                if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {
                    return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);
                }
                return createAudioNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
};
//# sourceMappingURL=audio-worklet-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/base-audio-context-constructor.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/base-audio-context-constructor.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createBaseAudioContextConstructor: () => (/* binding */ createBaseAudioContextConstructor)
/* harmony export */ });
const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {
    return class BaseAudioContext extends minimalBaseAudioContextConstructor {
        constructor(_nativeContext, numberOfChannels) {
            super(_nativeContext, numberOfChannels);
            this._nativeContext = _nativeContext;
            this._audioWorklet =
                addAudioWorkletModule === undefined
                    ? undefined
                    : {
                        addModule: (moduleURL, options) => {
                            return addAudioWorkletModule(this, moduleURL, options);
                        }
                    };
        }
        get audioWorklet() {
            return this._audioWorklet;
        }
        createAnalyser() {
            return new analyserNodeConstructor(this);
        }
        createBiquadFilter() {
            return new biquadFilterNodeConstructor(this);
        }
        createBuffer(numberOfChannels, length, sampleRate) {
            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });
        }
        createBufferSource() {
            return new audioBufferSourceNodeConstructor(this);
        }
        createChannelMerger(numberOfInputs = 6) {
            return new channelMergerNodeConstructor(this, { numberOfInputs });
        }
        createChannelSplitter(numberOfOutputs = 6) {
            return new channelSplitterNodeConstructor(this, { numberOfOutputs });
        }
        createConstantSource() {
            return new constantSourceNodeConstructor(this);
        }
        createConvolver() {
            return new convolverNodeConstructor(this);
        }
        createDelay(maxDelayTime = 1) {
            return new delayNodeConstructor(this, { maxDelayTime });
        }
        createDynamicsCompressor() {
            return new dynamicsCompressorNodeConstructor(this);
        }
        createGain() {
            return new gainNodeConstructor(this);
        }
        createIIRFilter(feedforward, feedback) {
            return new iIRFilterNodeConstructor(this, { feedback, feedforward });
        }
        createOscillator() {
            return new oscillatorNodeConstructor(this);
        }
        createPanner() {
            return new pannerNodeConstructor(this);
        }
        createPeriodicWave(real, imag, constraints = { disableNormalization: false }) {
            return new periodicWaveConstructor(this, { ...constraints, imag, real });
        }
        createStereoPanner() {
            return new stereoPannerNodeConstructor(this);
        }
        createWaveShaper() {
            return new waveShaperNodeConstructor(this);
        }
        decodeAudioData(audioData, successCallback, errorCallback) {
            return decodeAudioData(this._nativeContext, audioData).then((audioBuffer) => {
                if (typeof successCallback === 'function') {
                    successCallback(audioBuffer);
                }
                return audioBuffer;
            }, (err) => {
                if (typeof errorCallback === 'function') {
                    errorCallback(err);
                }
                throw err;
            });
        }
    };
};
//# sourceMappingURL=base-audio-context-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-constructor.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-constructor.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createBiquadFilterNodeConstructor: () => (/* binding */ createBiquadFilterNodeConstructor)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./node_modules/standardized-audio-context/build/es2019/constants.js");

const DEFAULT_OPTIONS = {
    Q: 1,
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    detune: 0,
    frequency: 350,
    gain: 0,
    type: 'lowpass'
};
const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {
    return class BiquadFilterNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
            const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const biquadFilterNodeRenderer = (isOffline ? createBiquadFilterNodeRenderer() : null);
            super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer);
            // Bug #80: Safari does not export the correct values for maxValue and minValue.
            this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_POSITIVE_SINGLE_FLOAT, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_NEGATIVE_SINGLE_FLOAT);
            // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.
            this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(_constants__WEBPACK_IMPORTED_MODULE_0__.MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(_constants__WEBPACK_IMPORTED_MODULE_0__.MOST_POSITIVE_SINGLE_FLOAT));
            // Bug #77: Firefox & Safari do not export the correct value for minValue.
            this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);
            // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.
            this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(_constants__WEBPACK_IMPORTED_MODULE_0__.MOST_POSITIVE_SINGLE_FLOAT), _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_NEGATIVE_SINGLE_FLOAT);
            this._nativeBiquadFilterNode = nativeBiquadFilterNode;
            // @todo Determine a meaningful tail-time instead of just using one second.
            setAudioNodeTailTime(this, 1);
        }
        get detune() {
            return this._detune;
        }
        get frequency() {
            return this._frequency;
        }
        get gain() {
            return this._gain;
        }
        get Q() {
            return this._Q;
        }
        get type() {
            return this._nativeBiquadFilterNode.type;
        }
        set type(value) {
            this._nativeBiquadFilterNode.type = value;
        }
        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
            // Bug #189: Safari does throw an InvalidStateError.
            try {
                this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);
            }
            catch (err) {
                if (err.code === 11) {
                    throw createInvalidAccessError();
                }
                throw err;
            }
            // Bug #68: Safari does not throw an error if the parameters differ in their length.
            if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {
                throw createInvalidAccessError();
            }
        }
    };
};
//# sourceMappingURL=biquad-filter-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createBiquadFilterNodeRendererFactory: () => (/* binding */ createBiquadFilterNodeRendererFactory)
/* harmony export */ });
/* harmony import */ var _helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/is-owned-by-context */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js");

const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
    return () => {
        const renderedNativeBiquadFilterNodes = new WeakMap();
        const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeBiquadFilterNode = getNativeAudioNode(proxy);
            /*
             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created
             * again.
             */
            const nativeBiquadFilterNodeIsOwnedByContext = (0,_helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__.isOwnedByContext)(nativeBiquadFilterNode, nativeOfflineAudioContext);
            if (!nativeBiquadFilterNodeIsOwnedByContext) {
                const options = {
                    Q: nativeBiquadFilterNode.Q.value,
                    channelCount: nativeBiquadFilterNode.channelCount,
                    channelCountMode: nativeBiquadFilterNode.channelCountMode,
                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,
                    detune: nativeBiquadFilterNode.detune.value,
                    frequency: nativeBiquadFilterNode.frequency.value,
                    gain: nativeBiquadFilterNode.gain.value,
                    type: nativeBiquadFilterNode.type
                };
                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);
            }
            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);
            if (!nativeBiquadFilterNodeIsOwnedByContext) {
                await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);
                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);
                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);
                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);
            }
            else {
                await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);
                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);
                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);
                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);
            return nativeBiquadFilterNode;
        };
        return {
            render(proxy, nativeOfflineAudioContext) {
                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);
                if (renderedNativeBiquadFilterNode !== undefined) {
                    return Promise.resolve(renderedNativeBiquadFilterNode);
                }
                return createBiquadFilterNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
};
//# sourceMappingURL=biquad-filter-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/cache-test-result.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/cache-test-result.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createCacheTestResult: () => (/* binding */ createCacheTestResult)
/* harmony export */ });
const createCacheTestResult = (ongoingTests, testResults) => {
    return (tester, test) => {
        const cachedTestResult = testResults.get(tester);
        if (cachedTestResult !== undefined) {
            return cachedTestResult;
        }
        const ongoingTest = ongoingTests.get(tester);
        if (ongoingTest !== undefined) {
            return ongoingTest;
        }
        try {
            const synchronousTestResult = test();
            if (synchronousTestResult instanceof Promise) {
                ongoingTests.set(tester, synchronousTestResult);
                return synchronousTestResult
                    .catch(() => false)
                    .then((finalTestResult) => {
                    ongoingTests.delete(tester);
                    testResults.set(tester, finalTestResult);
                    return finalTestResult;
                });
            }
            testResults.set(tester, synchronousTestResult);
            return synchronousTestResult;
        }
        catch {
            testResults.set(tester, false);
            return false;
        }
    };
};
//# sourceMappingURL=cache-test-result.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-constructor.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-constructor.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createChannelMergerNodeConstructor: () => (/* binding */ createChannelMergerNodeConstructor)
/* harmony export */ });
const DEFAULT_OPTIONS = {
    channelCount: 1,
    channelCountMode: 'explicit',
    channelInterpretation: 'speakers',
    numberOfInputs: 6
};
const createChannelMergerNodeConstructor = (audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext) => {
    return class ChannelMergerNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
            const nativeChannelMergerNode = createNativeChannelMergerNode(nativeContext, mergedOptions);
            const channelMergerNodeRenderer = ((isNativeOfflineAudioContext(nativeContext) ? createChannelMergerNodeRenderer() : null));
            super(context, false, nativeChannelMergerNode, channelMergerNodeRenderer);
        }
    };
};
//# sourceMappingURL=channel-merger-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createChannelMergerNodeRendererFactory: () => (/* binding */ createChannelMergerNodeRendererFactory)
/* harmony export */ });
/* harmony import */ var _helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/is-owned-by-context */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js");

const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) => {
    return () => {
        const renderedNativeAudioNodes = new WeakMap();
        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeAudioNode = getNativeAudioNode(proxy);
            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeAudioNodeIsOwnedByContext = (0,_helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__.isOwnedByContext)(nativeAudioNode, nativeOfflineAudioContext);
            if (!nativeAudioNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeAudioNode.channelCount,
                    channelCountMode: nativeAudioNode.channelCountMode,
                    channelInterpretation: nativeAudioNode.channelInterpretation,
                    numberOfInputs: nativeAudioNode.numberOfInputs
                };
                nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);
            }
            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);
            return nativeAudioNode;
        };
        return {
            render(proxy, nativeOfflineAudioContext) {
                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);
                if (renderedNativeAudioNode !== undefined) {
                    return Promise.resolve(renderedNativeAudioNode);
                }
                return createAudioNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
};
//# sourceMappingURL=channel-merger-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createChannelSplitterNodeConstructor: () => (/* binding */ createChannelSplitterNodeConstructor)
/* harmony export */ });
const DEFAULT_OPTIONS = {
    channelCount: 6,
    channelCountMode: 'explicit',
    channelInterpretation: 'discrete',
    numberOfOutputs: 6
};
const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions) => {
    return class ChannelSplitterNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = sanitizeChannelSplitterOptions({ ...DEFAULT_OPTIONS, ...options });
            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);
            const channelSplitterNodeRenderer = ((isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null));
            super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);
        }
    };
};
//# sourceMappingURL=channel-splitter-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createChannelSplitterNodeRendererFactory: () => (/* binding */ createChannelSplitterNodeRendererFactory)
/* harmony export */ });
/* harmony import */ var _helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/is-owned-by-context */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js");

const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {
    return () => {
        const renderedNativeAudioNodes = new WeakMap();
        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeAudioNode = getNativeAudioNode(proxy);
            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeAudioNodeIsOwnedByContext = (0,_helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__.isOwnedByContext)(nativeAudioNode, nativeOfflineAudioContext);
            if (!nativeAudioNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeAudioNode.channelCount,
                    channelCountMode: nativeAudioNode.channelCountMode,
                    channelInterpretation: nativeAudioNode.channelInterpretation,
                    numberOfOutputs: nativeAudioNode.numberOfOutputs
                };
                nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);
            }
            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);
            return nativeAudioNode;
        };
        return {
            render(proxy, nativeOfflineAudioContext) {
                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);
                if (renderedNativeAudioNode !== undefined) {
                    return Promise.resolve(renderedNativeAudioNode);
                }
                return createAudioNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
};
//# sourceMappingURL=channel-splitter-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/connect-audio-param.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/connect-audio-param.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createConnectAudioParam: () => (/* binding */ createConnectAudioParam)
/* harmony export */ });
const createConnectAudioParam = (renderInputsOfAudioParam) => {
    return (nativeOfflineAudioContext, audioParam, nativeAudioParam) => {
        return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam);
    };
};
//# sourceMappingURL=connect-audio-param.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/connect-multiple-outputs.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/connect-multiple-outputs.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createConnectMultipleOutputs: () => (/* binding */ createConnectMultipleOutputs)
/* harmony export */ });
/* harmony import */ var _guards_native_audio_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../guards/native-audio-node */ "./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js");

const createConnectMultipleOutputs = (createIndexSizeError) => {
    return (outputAudioNodes, destination, output = 0, input = 0) => {
        const outputAudioNode = outputAudioNodes[output];
        if (outputAudioNode === undefined) {
            throw createIndexSizeError();
        }
        if ((0,_guards_native_audio_node__WEBPACK_IMPORTED_MODULE_0__.isNativeAudioNode)(destination)) {
            return outputAudioNode.connect(destination, 0, input);
        }
        return outputAudioNode.connect(destination, 0);
    };
};
//# sourceMappingURL=connect-multiple-outputs.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/connected-native-audio-buffer-source-node-factory.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/connected-native-audio-buffer-source-node-factory.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createConnectedNativeAudioBufferSourceNodeFactory: () => (/* binding */ createConnectedNativeAudioBufferSourceNodeFactory)
/* harmony export */ });
const createConnectedNativeAudioBufferSourceNodeFactory = (createNativeAudioBufferSourceNode) => {
    return (nativeContext, nativeAudioNode) => {
        const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {
            buffer: null,
            channelCount: 2,
            channelCountMode: 'max',
            channelInterpretation: 'speakers',
            loop: false,
            loopEnd: 0,
            loopStart: 0,
            playbackRate: 1
        });
        const nativeAudioBuffer = nativeContext.createBuffer(1, 2, 44100);
        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;
        nativeAudioBufferSourceNode.loop = true;
        nativeAudioBufferSourceNode.connect(nativeAudioNode);
        nativeAudioBufferSourceNode.start();
        return () => {
            nativeAudioBufferSourceNode.stop();
            nativeAudioBufferSourceNode.disconnect(nativeAudioNode);
        };
    };
};
//# sourceMappingURL=connected-native-audio-buffer-source-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-constructor.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-constructor.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createConstantSourceNodeConstructor: () => (/* binding */ createConstantSourceNodeConstructor)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./node_modules/standardized-audio-context/build/es2019/constants.js");
/* harmony import */ var _helpers_is_active_audio_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/is-active-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js");
/* harmony import */ var _helpers_set_internal_state_to_active__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/set-internal-state-to-active */ "./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js");
/* harmony import */ var _helpers_set_internal_state_to_passive__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/set-internal-state-to-passive */ "./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js");




const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    offset: 1
};
const createConstantSourceNodeConstructor = (audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {
    return class ConstantSourceNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
            const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const constantSourceNodeRenderer = ((isOffline ? createConstantSourceNodeRendererFactory() : null));
            super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);
            this._constantSourceNodeRenderer = constantSourceNodeRenderer;
            this._nativeConstantSourceNode = nativeConstantSourceNode;
            /*
             * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue
             * for GainNodes.
             */
            this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_POSITIVE_SINGLE_FLOAT, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_NEGATIVE_SINGLE_FLOAT);
            this._onended = null;
        }
        get offset() {
            return this._offset;
        }
        get onended() {
            return this._onended;
        }
        set onended(value) {
            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
            this._nativeConstantSourceNode.onended = wrappedListener;
            const nativeOnEnded = this._nativeConstantSourceNode.onended;
            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;
        }
        start(when = 0) {
            this._nativeConstantSourceNode.start(when);
            if (this._constantSourceNodeRenderer !== null) {
                this._constantSourceNodeRenderer.start = when;
            }
            if (this.context.state !== 'closed') {
                (0,_helpers_set_internal_state_to_active__WEBPACK_IMPORTED_MODULE_2__.setInternalStateToActive)(this);
                const resetInternalStateToPassive = () => {
                    this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);
                    if ((0,_helpers_is_active_audio_node__WEBPACK_IMPORTED_MODULE_1__.isActiveAudioNode)(this)) {
                        (0,_helpers_set_internal_state_to_passive__WEBPACK_IMPORTED_MODULE_3__.setInternalStateToPassive)(this);
                    }
                };
                this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);
            }
        }
        stop(when = 0) {
            this._nativeConstantSourceNode.stop(when);
            if (this._constantSourceNodeRenderer !== null) {
                this._constantSourceNodeRenderer.stop = when;
            }
        }
    };
};
//# sourceMappingURL=constant-source-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createConstantSourceNodeRendererFactory: () => (/* binding */ createConstantSourceNodeRendererFactory)
/* harmony export */ });
/* harmony import */ var _helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/is-owned-by-context */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js");

const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
    return () => {
        const renderedNativeConstantSourceNodes = new WeakMap();
        let start = null;
        let stop = null;
        const createConstantSourceNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeConstantSourceNode = getNativeAudioNode(proxy);
            /*
             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created
             * again.
             */
            const nativeConstantSourceNodeIsOwnedByContext = (0,_helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__.isOwnedByContext)(nativeConstantSourceNode, nativeOfflineAudioContext);
            if (!nativeConstantSourceNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeConstantSourceNode.channelCount,
                    channelCountMode: nativeConstantSourceNode.channelCountMode,
                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,
                    offset: nativeConstantSourceNode.offset.value
                };
                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);
                if (start !== null) {
                    nativeConstantSourceNode.start(start);
                }
                if (stop !== null) {
                    nativeConstantSourceNode.stop(stop);
                }
            }
            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);
            if (!nativeConstantSourceNodeIsOwnedByContext) {
                await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);
            }
            else {
                await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);
            return nativeConstantSourceNode;
        };
        return {
            set start(value) {
                start = value;
            },
            set stop(value) {
                stop = value;
            },
            render(proxy, nativeOfflineAudioContext) {
                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);
                if (renderedNativeConstantSourceNode !== undefined) {
                    return Promise.resolve(renderedNativeConstantSourceNode);
                }
                return createConstantSourceNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
};
//# sourceMappingURL=constant-source-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/convert-number-to-unsigned-long.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/convert-number-to-unsigned-long.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createConvertNumberToUnsignedLong: () => (/* binding */ createConvertNumberToUnsignedLong)
/* harmony export */ });
const createConvertNumberToUnsignedLong = (unit32Array) => {
    return (value) => {
        unit32Array[0] = value;
        return unit32Array[0];
    };
};
//# sourceMappingURL=convert-number-to-unsigned-long.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/convolver-node-constructor.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/convolver-node-constructor.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createConvolverNodeConstructor: () => (/* binding */ createConvolverNodeConstructor)
/* harmony export */ });
const DEFAULT_OPTIONS = {
    buffer: null,
    channelCount: 2,
    channelCountMode: 'clamped-max',
    channelInterpretation: 'speakers',
    disableNormalization: false
};
const createConvolverNodeConstructor = (audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {
    return class ConvolverNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
            const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const convolverNodeRenderer = (isOffline ? createConvolverNodeRenderer() : null);
            super(context, false, nativeConvolverNode, convolverNodeRenderer);
            this._isBufferNullified = false;
            this._nativeConvolverNode = nativeConvolverNode;
            if (mergedOptions.buffer !== null) {
                setAudioNodeTailTime(this, mergedOptions.buffer.duration);
            }
        }
        get buffer() {
            if (this._isBufferNullified) {
                return null;
            }
            return this._nativeConvolverNode.buffer;
        }
        set buffer(value) {
            this._nativeConvolverNode.buffer = value;
            // Bug #115: Safari does not allow to set the buffer to null.
            if (value === null && this._nativeConvolverNode.buffer !== null) {
                const nativeContext = this._nativeConvolverNode.context;
                this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);
                this._isBufferNullified = true;
                setAudioNodeTailTime(this, 0);
            }
            else {
                this._isBufferNullified = false;
                setAudioNodeTailTime(this, this._nativeConvolverNode.buffer === null ? 0 : this._nativeConvolverNode.buffer.duration);
            }
        }
        get normalize() {
            return this._nativeConvolverNode.normalize;
        }
        set normalize(value) {
            this._nativeConvolverNode.normalize = value;
        }
    };
};
//# sourceMappingURL=convolver-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createConvolverNodeRendererFactory: () => (/* binding */ createConvolverNodeRendererFactory)
/* harmony export */ });
/* harmony import */ var _guards_native_audio_node_faker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../guards/native-audio-node-faker */ "./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js");
/* harmony import */ var _helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/is-owned-by-context */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js");


const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {
    return () => {
        const renderedNativeConvolverNodes = new WeakMap();
        const createConvolverNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeConvolverNode = getNativeAudioNode(proxy);
            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeConvolverNodeIsOwnedByContext = (0,_helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_1__.isOwnedByContext)(nativeConvolverNode, nativeOfflineAudioContext);
            if (!nativeConvolverNodeIsOwnedByContext) {
                const options = {
                    buffer: nativeConvolverNode.buffer,
                    channelCount: nativeConvolverNode.channelCount,
                    channelCountMode: nativeConvolverNode.channelCountMode,
                    channelInterpretation: nativeConvolverNode.channelInterpretation,
                    disableNormalization: !nativeConvolverNode.normalize
                };
                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);
            }
            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);
            if ((0,_guards_native_audio_node_faker__WEBPACK_IMPORTED_MODULE_0__.isNativeAudioNodeFaker)(nativeConvolverNode)) {
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);
            }
            else {
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);
            }
            return nativeConvolverNode;
        };
        return {
            render(proxy, nativeOfflineAudioContext) {
                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);
                if (renderedNativeConvolverNode !== undefined) {
                    return Promise.resolve(renderedNativeConvolverNode);
                }
                return createConvolverNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
};
//# sourceMappingURL=convolver-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/create-native-offline-audio-context.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/create-native-offline-audio-context.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createCreateNativeOfflineAudioContext: () => (/* binding */ createCreateNativeOfflineAudioContext)
/* harmony export */ });
const createCreateNativeOfflineAudioContext = (createNotSupportedError, nativeOfflineAudioContextConstructor) => {
    return (numberOfChannels, length, sampleRate) => {
        if (nativeOfflineAudioContextConstructor === null) {
            throw new Error('Missing the native OfflineAudioContext constructor.');
        }
        try {
            return new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);
        }
        catch (err) {
            // Bug #143, #144 & #146: Safari throws a SyntaxError when numberOfChannels, length or sampleRate are invalid.
            if (err.name === 'SyntaxError') {
                throw createNotSupportedError();
            }
            throw err;
        }
    };
};
//# sourceMappingURL=create-native-offline-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/data-clone-error.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/data-clone-error.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDataCloneError: () => (/* binding */ createDataCloneError)
/* harmony export */ });
const createDataCloneError = () => new DOMException('', 'DataCloneError');
//# sourceMappingURL=data-clone-error.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDecodeAudioData: () => (/* binding */ createDecodeAudioData)
/* harmony export */ });
/* harmony import */ var _helpers_detach_array_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/detach-array-buffer */ "./node_modules/standardized-audio-context/build/es2019/helpers/detach-array-buffer.js");
/* harmony import */ var _helpers_wrap_audio_buffer_get_channel_data_method__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/wrap-audio-buffer-get-channel-data-method */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js");


const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {
    return (anyContext, audioData) => {
        const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);
        // Bug #43: Only Chrome and Edge do throw a DataCloneError.
        if (detachedArrayBuffers.has(audioData)) {
            const err = createDataCloneError();
            return Promise.reject(err);
        }
        // The audioData parameter maybe of a type which can't be added to a WeakSet.
        try {
            detachedArrayBuffers.add(audioData);
        }
        catch {
            // Ignore errors.
        }
        // Bug #21: Safari does not support promises yet.
        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {
            return nativeContext.decodeAudioData(audioData).then((audioBuffer) => {
                // Bug #133: Safari does neuter the ArrayBuffer.
                (0,_helpers_detach_array_buffer__WEBPACK_IMPORTED_MODULE_0__.detachArrayBuffer)(audioData).catch(() => {
                    // Ignore errors.
                });
                // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.
                if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {
                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);
                }
                audioBufferStore.add(audioBuffer);
                return audioBuffer;
            });
        }
        // Bug #21: Safari does not return a Promise yet.
        return new Promise((resolve, reject) => {
            const complete = async () => {
                // Bug #133: Safari does neuter the ArrayBuffer.
                try {
                    await (0,_helpers_detach_array_buffer__WEBPACK_IMPORTED_MODULE_0__.detachArrayBuffer)(audioData);
                }
                catch {
                    // Ignore errors.
                }
            };
            const fail = (err) => {
                reject(err);
                complete();
            };
            // Bug #26: Safari throws a synchronous error.
            try {
                // Bug #1: Safari requires a successCallback.
                nativeContext.decodeAudioData(audioData, (audioBuffer) => {
                    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
                    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.
                    if (typeof audioBuffer.copyFromChannel !== 'function') {
                        wrapAudioBufferCopyChannelMethods(audioBuffer);
                        (0,_helpers_wrap_audio_buffer_get_channel_data_method__WEBPACK_IMPORTED_MODULE_1__.wrapAudioBufferGetChannelDataMethod)(audioBuffer);
                    }
                    audioBufferStore.add(audioBuffer);
                    complete().then(() => resolve(audioBuffer));
                }, (err) => {
                    // Bug #4: Safari returns null instead of an error.
                    if (err === null) {
                        fail(createEncodingError());
                    }
                    else {
                        fail(err);
                    }
                });
            }
            catch (err) {
                fail(err);
            }
        });
    };
};
//# sourceMappingURL=decode-audio-data.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/decrement-cycle-counter.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/decrement-cycle-counter.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDecrementCycleCounter: () => (/* binding */ createDecrementCycleCounter)
/* harmony export */ });
/* harmony import */ var _guards_audio_node_output_connection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../guards/audio-node-output-connection */ "./node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js");

const createDecrementCycleCounter = (connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) => {
    return (audioNode, count) => {
        const cycleCounter = cycleCounters.get(audioNode);
        if (cycleCounter === undefined) {
            throw new Error('Missing the expected cycle count.');
        }
        const nativeContext = getNativeContext(audioNode.context);
        const isOffline = isNativeOfflineAudioContext(nativeContext);
        if (cycleCounter === count) {
            cycleCounters.delete(audioNode);
            if (!isOffline && isActiveAudioNode(audioNode)) {
                const nativeSourceAudioNode = getNativeAudioNode(audioNode);
                const { outputs } = getAudioNodeConnections(audioNode);
                for (const output of outputs) {
                    if ((0,_guards_audio_node_output_connection__WEBPACK_IMPORTED_MODULE_0__.isAudioNodeOutputConnection)(output)) {
                        const nativeDestinationAudioNode = getNativeAudioNode(output[0]);
                        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);
                    }
                    else {
                        const nativeDestinationAudioParam = getNativeAudioParam(output[0]);
                        nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);
                    }
                }
            }
        }
        else {
            cycleCounters.set(audioNode, cycleCounter - count);
        }
    };
};
//# sourceMappingURL=decrement-cycle-counter.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/delay-node-constructor.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/delay-node-constructor.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDelayNodeConstructor: () => (/* binding */ createDelayNodeConstructor)
/* harmony export */ });
const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    delayTime: 0,
    maxDelayTime: 1
};
const createDelayNodeConstructor = (audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {
    return class DelayNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
            const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const delayNodeRenderer = (isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null);
            super(context, false, nativeDelayNode, delayNodeRenderer);
            this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime);
            setAudioNodeTailTime(this, mergedOptions.maxDelayTime);
        }
        get delayTime() {
            return this._delayTime;
        }
    };
};
//# sourceMappingURL=delay-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDelayNodeRendererFactory: () => (/* binding */ createDelayNodeRendererFactory)
/* harmony export */ });
/* harmony import */ var _helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/is-owned-by-context */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js");

const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
    return (maxDelayTime) => {
        const renderedNativeDelayNodes = new WeakMap();
        const createDelayNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeDelayNode = getNativeAudioNode(proxy);
            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeDelayNodeIsOwnedByContext = (0,_helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__.isOwnedByContext)(nativeDelayNode, nativeOfflineAudioContext);
            if (!nativeDelayNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeDelayNode.channelCount,
                    channelCountMode: nativeDelayNode.channelCountMode,
                    channelInterpretation: nativeDelayNode.channelInterpretation,
                    delayTime: nativeDelayNode.delayTime.value,
                    maxDelayTime
                };
                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);
            }
            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);
            if (!nativeDelayNodeIsOwnedByContext) {
                await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);
            }
            else {
                await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);
            return nativeDelayNode;
        };
        return {
            render(proxy, nativeOfflineAudioContext) {
                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);
                if (renderedNativeDelayNode !== undefined) {
                    return Promise.resolve(renderedNativeDelayNode);
                }
                return createDelayNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
};
//# sourceMappingURL=delay-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/delete-active-input-connection-to-audio-node.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/delete-active-input-connection-to-audio-node.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDeleteActiveInputConnectionToAudioNode: () => (/* binding */ createDeleteActiveInputConnectionToAudioNode)
/* harmony export */ });
const createDeleteActiveInputConnectionToAudioNode = (pickElementFromSet) => {
    return (activeInputs, source, output, input) => {
        return pickElementFromSet(activeInputs[input], (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output);
    };
};
//# sourceMappingURL=delete-active-input-connection-to-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/delete-unrendered-audio-worklet-node.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/delete-unrendered-audio-worklet-node.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDeleteUnrenderedAudioWorkletNode: () => (/* binding */ createDeleteUnrenderedAudioWorkletNode)
/* harmony export */ });
const createDeleteUnrenderedAudioWorkletNode = (getUnrenderedAudioWorkletNodes) => {
    return (nativeContext, audioWorkletNode) => {
        getUnrenderedAudioWorkletNodes(nativeContext).delete(audioWorkletNode);
    };
};
//# sourceMappingURL=delete-unrendered-audio-worklet-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/detect-cycles.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/detect-cycles.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDetectCycles: () => (/* binding */ createDetectCycles)
/* harmony export */ });
/* harmony import */ var _guards_audio_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../guards/audio-node */ "./node_modules/standardized-audio-context/build/es2019/guards/audio-node.js");
/* harmony import */ var _guards_delay_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../guards/delay-node */ "./node_modules/standardized-audio-context/build/es2019/guards/delay-node.js");


const createDetectCycles = (audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) => {
    return function detectCycles(chain, nextLink) {
        const audioNode = (0,_guards_audio_node__WEBPACK_IMPORTED_MODULE_0__.isAudioNode)(nextLink) ? nextLink : getValueForKey(audioParamAudioNodeStore, nextLink);
        if ((0,_guards_delay_node__WEBPACK_IMPORTED_MODULE_1__.isDelayNode)(audioNode)) {
            return [];
        }
        if (chain[0] === audioNode) {
            return [chain];
        }
        if (chain.includes(audioNode)) {
            return [];
        }
        const { outputs } = getAudioNodeConnections(audioNode);
        return Array.from(outputs)
            .map((outputConnection) => detectCycles([...chain, audioNode], outputConnection[0]))
            .reduce((mergedCycles, nestedCycles) => mergedCycles.concat(nestedCycles), []);
    };
};
//# sourceMappingURL=detect-cycles.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/disconnect-multiple-outputs.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/disconnect-multiple-outputs.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDisconnectMultipleOutputs: () => (/* binding */ createDisconnectMultipleOutputs)
/* harmony export */ });
/* harmony import */ var _guards_native_audio_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../guards/native-audio-node */ "./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js");

const getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {
    const outputAudioNode = outputAudioNodes[output];
    if (outputAudioNode === undefined) {
        throw createIndexSizeError();
    }
    return outputAudioNode;
};
const createDisconnectMultipleOutputs = (createIndexSizeError) => {
    return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {
        if (destinationOrOutput === undefined) {
            return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect());
        }
        if (typeof destinationOrOutput === 'number') {
            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput).disconnect();
        }
        if ((0,_guards_native_audio_node__WEBPACK_IMPORTED_MODULE_0__.isNativeAudioNode)(destinationOrOutput)) {
            if (output === undefined) {
                return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));
            }
            if (input === undefined) {
                return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);
            }
            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);
        }
        if (output === undefined) {
            return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));
        }
        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);
    };
};
//# sourceMappingURL=disconnect-multiple-outputs.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDynamicsCompressorNodeConstructor: () => (/* binding */ createDynamicsCompressorNodeConstructor)
/* harmony export */ });
const DEFAULT_OPTIONS = {
    attack: 0.003,
    channelCount: 2,
    channelCountMode: 'clamped-max',
    channelInterpretation: 'speakers',
    knee: 30,
    ratio: 12,
    release: 0.25,
    threshold: -24
};
const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {
    return class DynamicsCompressorNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
            const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const dynamicsCompressorNodeRenderer = (isOffline ? createDynamicsCompressorNodeRenderer() : null);
            super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);
            this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack);
            this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee);
            this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;
            this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio);
            this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release);
            this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold);
            setAudioNodeTailTime(this, 0.006);
        }
        get attack() {
            return this._attack;
        }
        // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.
        get channelCount() {
            return this._nativeDynamicsCompressorNode.channelCount;
        }
        set channelCount(value) {
            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;
            this._nativeDynamicsCompressorNode.channelCount = value;
            if (value > 2) {
                this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;
                throw createNotSupportedError();
            }
        }
        /*
         * Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be
         * overwritten here.
         */
        get channelCountMode() {
            return this._nativeDynamicsCompressorNode.channelCountMode;
        }
        set channelCountMode(value) {
            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;
            this._nativeDynamicsCompressorNode.channelCountMode = value;
            if (value === 'max') {
                this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;
                throw createNotSupportedError();
            }
        }
        get knee() {
            return this._knee;
        }
        get ratio() {
            return this._ratio;
        }
        get reduction() {
            // Bug #111: Safari returns an AudioParam instead of a number.
            if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {
                return this._nativeDynamicsCompressorNode.reduction.value;
            }
            return this._nativeDynamicsCompressorNode.reduction;
        }
        get release() {
            return this._release;
        }
        get threshold() {
            return this._threshold;
        }
    };
};
//# sourceMappingURL=dynamics-compressor-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDynamicsCompressorNodeRendererFactory: () => (/* binding */ createDynamicsCompressorNodeRendererFactory)
/* harmony export */ });
/* harmony import */ var _helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/is-owned-by-context */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js");

const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
    return () => {
        const renderedNativeDynamicsCompressorNodes = new WeakMap();
        const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);
            /*
             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be
             * created again.
             */
            const nativeDynamicsCompressorNodeIsOwnedByContext = (0,_helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__.isOwnedByContext)(nativeDynamicsCompressorNode, nativeOfflineAudioContext);
            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {
                const options = {
                    attack: nativeDynamicsCompressorNode.attack.value,
                    channelCount: nativeDynamicsCompressorNode.channelCount,
                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,
                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,
                    knee: nativeDynamicsCompressorNode.knee.value,
                    ratio: nativeDynamicsCompressorNode.ratio.value,
                    release: nativeDynamicsCompressorNode.release.value,
                    threshold: nativeDynamicsCompressorNode.threshold.value
                };
                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);
            }
            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);
            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {
                await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);
                await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);
                await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);
                await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);
                await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);
            }
            else {
                await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);
                await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);
                await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);
                await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);
                await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);
            return nativeDynamicsCompressorNode;
        };
        return {
            render(proxy, nativeOfflineAudioContext) {
                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);
                if (renderedNativeDynamicsCompressorNode !== undefined) {
                    return Promise.resolve(renderedNativeDynamicsCompressorNode);
                }
                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
};
//# sourceMappingURL=dynamics-compressor-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/encoding-error.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/encoding-error.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createEncodingError: () => (/* binding */ createEncodingError)
/* harmony export */ });
const createEncodingError = () => new DOMException('', 'EncodingError');
//# sourceMappingURL=encoding-error.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/evaluate-source.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/evaluate-source.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createEvaluateSource: () => (/* binding */ createEvaluateSource)
/* harmony export */ });
const createEvaluateSource = (window) => {
    return (source) => new Promise((resolve, reject) => {
        if (window === null) {
            // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.
            reject(new SyntaxError());
            return;
        }
        const head = window.document.head;
        if (head === null) {
            // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.
            reject(new SyntaxError());
        }
        else {
            const script = window.document.createElement('script');
            // @todo Safari doesn't like URLs with a type of 'application/javascript; charset=utf-8'.
            const blob = new Blob([source], { type: 'application/javascript' });
            const url = URL.createObjectURL(blob);
            const originalOnErrorHandler = window.onerror;
            const removeErrorEventListenerAndRevokeUrl = () => {
                window.onerror = originalOnErrorHandler;
                URL.revokeObjectURL(url);
            };
            window.onerror = (message, src, lineno, colno, error) => {
                // @todo Edge thinks the source is the one of the html document.
                if (src === url || (src === window.location.href && lineno === 1 && colno === 1)) {
                    removeErrorEventListenerAndRevokeUrl();
                    reject(error);
                    return false;
                }
                if (originalOnErrorHandler !== null) {
                    return originalOnErrorHandler(message, src, lineno, colno, error);
                }
            };
            script.onerror = () => {
                removeErrorEventListenerAndRevokeUrl();
                // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.
                reject(new SyntaxError());
            };
            script.onload = () => {
                removeErrorEventListenerAndRevokeUrl();
                resolve();
            };
            script.src = url;
            script.type = 'module';
            head.appendChild(script);
        }
    });
};
//# sourceMappingURL=evaluate-source.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/event-target-constructor.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/event-target-constructor.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createEventTargetConstructor: () => (/* binding */ createEventTargetConstructor)
/* harmony export */ });
const createEventTargetConstructor = (wrapEventListener) => {
    return class EventTarget {
        constructor(_nativeEventTarget) {
            this._nativeEventTarget = _nativeEventTarget;
            this._listeners = new WeakMap();
        }
        addEventListener(type, listener, options) {
            if (listener !== null) {
                let wrappedEventListener = this._listeners.get(listener);
                if (wrappedEventListener === undefined) {
                    wrappedEventListener = wrapEventListener(this, listener);
                    if (typeof listener === 'function') {
                        this._listeners.set(listener, wrappedEventListener);
                    }
                }
                this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);
            }
        }
        dispatchEvent(event) {
            return this._nativeEventTarget.dispatchEvent(event);
        }
        removeEventListener(type, listener, options) {
            const wrappedEventListener = listener === null ? undefined : this._listeners.get(listener);
            this._nativeEventTarget.removeEventListener(type, wrappedEventListener === undefined ? null : wrappedEventListener, options);
        }
    };
};
//# sourceMappingURL=event-target-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/expose-current-frame-and-current-time.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/expose-current-frame-and-current-time.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createExposeCurrentFrameAndCurrentTime: () => (/* binding */ createExposeCurrentFrameAndCurrentTime)
/* harmony export */ });
const createExposeCurrentFrameAndCurrentTime = (window) => {
    return (currentTime, sampleRate, fn) => {
        Object.defineProperties(window, {
            currentFrame: {
                configurable: true,
                get() {
                    return Math.round(currentTime * sampleRate);
                }
            },
            currentTime: {
                configurable: true,
                get() {
                    return currentTime;
                }
            }
        });
        try {
            return fn();
        }
        finally {
            if (window !== null) {
                delete window.currentFrame;
                delete window.currentTime;
            }
        }
    };
};
//# sourceMappingURL=expose-current-frame-and-current-time.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/fetch-source.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/fetch-source.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createFetchSource: () => (/* binding */ createFetchSource)
/* harmony export */ });
const createFetchSource = (createAbortError) => {
    return async (url) => {
        try {
            const response = await fetch(url);
            if (response.ok) {
                return [await response.text(), response.url];
            }
        }
        catch {
            // Ignore errors.
        } // tslint:disable-line:no-empty
        throw createAbortError();
    };
};
//# sourceMappingURL=fetch-source.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/gain-node-constructor.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/gain-node-constructor.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createGainNodeConstructor: () => (/* binding */ createGainNodeConstructor)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./node_modules/standardized-audio-context/build/es2019/constants.js");

const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    gain: 1
};
const createGainNodeConstructor = (audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext) => {
    return class GainNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
            const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const gainNodeRenderer = (isOffline ? createGainNodeRenderer() : null);
            super(context, false, nativeGainNode, gainNodeRenderer);
            // Bug #74: Safari does not export the correct values for maxValue and minValue.
            this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_POSITIVE_SINGLE_FLOAT, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_NEGATIVE_SINGLE_FLOAT);
        }
        get gain() {
            return this._gain;
        }
    };
};
//# sourceMappingURL=gain-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createGainNodeRendererFactory: () => (/* binding */ createGainNodeRendererFactory)
/* harmony export */ });
/* harmony import */ var _helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/is-owned-by-context */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js");

const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
    return () => {
        const renderedNativeGainNodes = new WeakMap();
        const createGainNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeGainNode = getNativeAudioNode(proxy);
            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeGainNodeIsOwnedByContext = (0,_helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__.isOwnedByContext)(nativeGainNode, nativeOfflineAudioContext);
            if (!nativeGainNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeGainNode.channelCount,
                    channelCountMode: nativeGainNode.channelCountMode,
                    channelInterpretation: nativeGainNode.channelInterpretation,
                    gain: nativeGainNode.gain.value
                };
                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);
            }
            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);
            if (!nativeGainNodeIsOwnedByContext) {
                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);
            }
            else {
                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);
            return nativeGainNode;
        };
        return {
            render(proxy, nativeOfflineAudioContext) {
                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);
                if (renderedNativeGainNode !== undefined) {
                    return Promise.resolve(renderedNativeGainNode);
                }
                return createGainNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
};
//# sourceMappingURL=gain-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/get-active-audio-worklet-node-inputs.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/get-active-audio-worklet-node-inputs.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createGetActiveAudioWorkletNodeInputs: () => (/* binding */ createGetActiveAudioWorkletNodeInputs)
/* harmony export */ });
const createGetActiveAudioWorkletNodeInputs = (activeAudioWorkletNodeInputsStore, getValueForKey) => {
    return (nativeAudioWorkletNode) => getValueForKey(activeAudioWorkletNodeInputsStore, nativeAudioWorkletNode);
};
//# sourceMappingURL=get-active-audio-worklet-node-inputs.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-renderer.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-renderer.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createGetAudioNodeRenderer: () => (/* binding */ createGetAudioNodeRenderer)
/* harmony export */ });
const createGetAudioNodeRenderer = (getAudioNodeConnections) => {
    return (audioNode) => {
        const audioNodeConnections = getAudioNodeConnections(audioNode);
        if (audioNodeConnections.renderer === null) {
            throw new Error('Missing the renderer of the given AudioNode in the audio graph.');
        }
        return audioNodeConnections.renderer;
    };
};
//# sourceMappingURL=get-audio-node-renderer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-tail-time.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-tail-time.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createGetAudioNodeTailTime: () => (/* binding */ createGetAudioNodeTailTime)
/* harmony export */ });
const createGetAudioNodeTailTime = (audioNodeTailTimeStore) => {
    return (audioNode) => { var _a; return (_a = audioNodeTailTimeStore.get(audioNode)) !== null && _a !== void 0 ? _a : 0; };
};
//# sourceMappingURL=get-audio-node-tail-time.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/get-audio-param-renderer.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/get-audio-param-renderer.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createGetAudioParamRenderer: () => (/* binding */ createGetAudioParamRenderer)
/* harmony export */ });
const createGetAudioParamRenderer = (getAudioParamConnections) => {
    return (audioParam) => {
        const audioParamConnections = getAudioParamConnections(audioParam);
        if (audioParamConnections.renderer === null) {
            throw new Error('Missing the renderer of the given AudioParam in the audio graph.');
        }
        return audioParamConnections.renderer;
    };
};
//# sourceMappingURL=get-audio-param-renderer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/get-backup-offline-audio-context.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/get-backup-offline-audio-context.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createGetBackupOfflineAudioContext: () => (/* binding */ createGetBackupOfflineAudioContext)
/* harmony export */ });
const createGetBackupOfflineAudioContext = (backupOfflineAudioContextStore) => {
    return (nativeContext) => {
        return backupOfflineAudioContextStore.get(nativeContext);
    };
};
//# sourceMappingURL=get-backup-offline-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/get-native-context.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/get-native-context.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createGetNativeContext: () => (/* binding */ createGetNativeContext)
/* harmony export */ });
/* harmony import */ var _invalid_state_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invalid-state-error */ "./node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js");

const createGetNativeContext = (contextStore) => {
    return (context) => {
        const nativeContext = contextStore.get(context);
        if (nativeContext === undefined) {
            throw (0,_invalid_state_error__WEBPACK_IMPORTED_MODULE_0__.createInvalidStateError)();
        }
        return (nativeContext);
    };
};
//# sourceMappingURL=get-native-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/get-or-create-backup-offline-audio-context.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/get-or-create-backup-offline-audio-context.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createGetOrCreateBackupOfflineAudioContext: () => (/* binding */ createGetOrCreateBackupOfflineAudioContext)
/* harmony export */ });
const createGetOrCreateBackupOfflineAudioContext = (backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor) => {
    return (nativeContext) => {
        let backupOfflineAudioContext = backupOfflineAudioContextStore.get(nativeContext);
        if (backupOfflineAudioContext !== undefined) {
            return backupOfflineAudioContext;
        }
        if (nativeOfflineAudioContextConstructor === null) {
            throw new Error('Missing the native OfflineAudioContext constructor.');
        }
        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.
        backupOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        backupOfflineAudioContextStore.set(nativeContext, backupOfflineAudioContext);
        return backupOfflineAudioContext;
    };
};
//# sourceMappingURL=get-or-create-backup-offline-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/get-unrendered-audio-worklet-nodes.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/get-unrendered-audio-worklet-nodes.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createGetUnrenderedAudioWorkletNodes: () => (/* binding */ createGetUnrenderedAudioWorkletNodes)
/* harmony export */ });
const createGetUnrenderedAudioWorkletNodes = (unrenderedAudioWorkletNodeStore) => {
    return (nativeContext) => {
        const unrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore.get(nativeContext);
        if (unrenderedAudioWorkletNodes === undefined) {
            throw new Error('The context has no set of AudioWorkletNodes.');
        }
        return unrenderedAudioWorkletNodes;
    };
};
//# sourceMappingURL=get-unrendered-audio-worklet-nodes.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-constructor.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-constructor.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIIRFilterNodeConstructor: () => (/* binding */ createIIRFilterNodeConstructor)
/* harmony export */ });
/* harmony import */ var _helpers_wrap_iir_filter_node_get_frequency_response_method__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/wrap-iir-filter-node-get-frequency-response-method */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-iir-filter-node-get-frequency-response-method.js");

const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers'
};
const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {
    return class IIRFilterNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
            const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);
            const iirFilterNodeRenderer = ((isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null));
            super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer);
            // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.
            // @todo Write a test which allows other browsers to remain unpatched.
            (0,_helpers_wrap_iir_filter_node_get_frequency_response_method__WEBPACK_IMPORTED_MODULE_0__.wrapIIRFilterNodeGetFrequencyResponseMethod)(nativeIIRFilterNode);
            this._nativeIIRFilterNode = nativeIIRFilterNode;
            // @todo Determine a meaningful tail-time instead of just using one second.
            setAudioNodeTailTime(this, 1);
        }
        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
            return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);
        }
    };
};
//# sourceMappingURL=iir-filter-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIIRFilterNodeRendererFactory: () => (/* binding */ createIIRFilterNodeRendererFactory)
/* harmony export */ });
/* harmony import */ var _helpers_filter_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/filter-buffer */ "./node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js");
/* harmony import */ var _helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/is-owned-by-context */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js");


const filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {
    const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);
    const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);
    const feedbackLength = convertedFeedback.length;
    const feedforwardLength = convertedFeedforward.length;
    const minLength = Math.min(feedbackLength, feedforwardLength);
    if (convertedFeedback[0] !== 1) {
        for (let i = 0; i < feedbackLength; i += 1) {
            convertedFeedforward[i] /= convertedFeedback[0];
        }
        for (let i = 1; i < feedforwardLength; i += 1) {
            convertedFeedback[i] /= convertedFeedback[0];
        }
    }
    const bufferLength = 32;
    const xBuffer = new Float32Array(bufferLength);
    const yBuffer = new Float32Array(bufferLength);
    const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);
    const numberOfChannels = renderedBuffer.numberOfChannels;
    for (let i = 0; i < numberOfChannels; i += 1) {
        const input = renderedBuffer.getChannelData(i);
        const output = filteredBuffer.getChannelData(i);
        xBuffer.fill(0);
        yBuffer.fill(0);
        (0,_helpers_filter_buffer__WEBPACK_IMPORTED_MODULE_0__.filterBuffer)(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);
    }
    return filteredBuffer;
};
const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {
    return (feedback, feedforward) => {
        const renderedNativeAudioNodes = new WeakMap();
        let filteredBufferPromise = null;
        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeAudioBufferSourceNode = null;
            let nativeIIRFilterNode = getNativeAudioNode(proxy);
            // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeIIRFilterNodeIsOwnedByContext = (0,_helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_1__.isOwnedByContext)(nativeIIRFilterNode, nativeOfflineAudioContext);
            // Bug #9: Safari does not support IIRFilterNodes.
            if (nativeOfflineAudioContext.createIIRFilter === undefined) {
                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {
                    buffer: null,
                    channelCount: 2,
                    channelCountMode: 'max',
                    channelInterpretation: 'speakers',
                    loop: false,
                    loopEnd: 0,
                    loopStart: 0,
                    playbackRate: 1
                });
            }
            else if (!nativeIIRFilterNodeIsOwnedByContext) {
                // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.
                nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(feedforward, feedback);
            }
            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);
            if (nativeAudioBufferSourceNode !== null) {
                if (filteredBufferPromise === null) {
                    if (nativeOfflineAudioContextConstructor === null) {
                        throw new Error('Missing the native OfflineAudioContext constructor.');
                    }
                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(
                    // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.
                    proxy.context.destination.channelCount, 
                    // Bug #17: Safari does not yet expose the length.
                    proxy.context.length, nativeOfflineAudioContext.sampleRate);
                    filteredBufferPromise = (async () => {
                        await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);
                        const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);
                        return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);
                    })();
                }
                const filteredBuffer = await filteredBufferPromise;
                nativeAudioBufferSourceNode.buffer = filteredBuffer;
                nativeAudioBufferSourceNode.start(0);
                return nativeAudioBufferSourceNode;
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);
            return nativeIIRFilterNode;
        };
        return {
            render(proxy, nativeOfflineAudioContext) {
                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);
                if (renderedNativeAudioNode !== undefined) {
                    return Promise.resolve(renderedNativeAudioNode);
                }
                return createAudioNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
};
//# sourceMappingURL=iir-filter-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/increment-cycle-counter-factory.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/increment-cycle-counter-factory.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIncrementCycleCounterFactory: () => (/* binding */ createIncrementCycleCounterFactory)
/* harmony export */ });
/* harmony import */ var _guards_audio_node_output_connection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../guards/audio-node-output-connection */ "./node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js");

const createIncrementCycleCounterFactory = (cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode) => {
    return (isOffline) => {
        return (audioNode, count) => {
            const cycleCounter = cycleCounters.get(audioNode);
            if (cycleCounter === undefined) {
                if (!isOffline && isActiveAudioNode(audioNode)) {
                    const nativeSourceAudioNode = getNativeAudioNode(audioNode);
                    const { outputs } = getAudioNodeConnections(audioNode);
                    for (const output of outputs) {
                        if ((0,_guards_audio_node_output_connection__WEBPACK_IMPORTED_MODULE_0__.isAudioNodeOutputConnection)(output)) {
                            const nativeDestinationAudioNode = getNativeAudioNode(output[0]);
                            disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);
                        }
                        else {
                            const nativeDestinationAudioParam = getNativeAudioParam(output[0]);
                            nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);
                        }
                    }
                }
                cycleCounters.set(audioNode, count);
            }
            else {
                cycleCounters.set(audioNode, cycleCounter + count);
            }
        };
    };
};
//# sourceMappingURL=increment-cycle-counter-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIndexSizeError: () => (/* binding */ createIndexSizeError)
/* harmony export */ });
const createIndexSizeError = () => new DOMException('', 'IndexSizeError');
//# sourceMappingURL=index-size-error.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createInvalidAccessError: () => (/* binding */ createInvalidAccessError)
/* harmony export */ });
const createInvalidAccessError = () => new DOMException('', 'InvalidAccessError');
//# sourceMappingURL=invalid-access-error.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createInvalidStateError: () => (/* binding */ createInvalidStateError)
/* harmony export */ });
const createInvalidStateError = () => new DOMException('', 'InvalidStateError');
//# sourceMappingURL=invalid-state-error.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-context.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-context.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIsAnyAudioContext: () => (/* binding */ createIsAnyAudioContext)
/* harmony export */ });
const createIsAnyAudioContext = (contextStore, isNativeAudioContext) => {
    return (anything) => {
        const nativeContext = contextStore.get(anything);
        return isNativeAudioContext(nativeContext) || isNativeAudioContext(anything);
    };
};
//# sourceMappingURL=is-any-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-node.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-node.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIsAnyAudioNode: () => (/* binding */ createIsAnyAudioNode)
/* harmony export */ });
const createIsAnyAudioNode = (audioNodeStore, isNativeAudioNode) => {
    return (anything) => audioNodeStore.has(anything) || isNativeAudioNode(anything);
};
//# sourceMappingURL=is-any-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-param.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-param.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIsAnyAudioParam: () => (/* binding */ createIsAnyAudioParam)
/* harmony export */ });
const createIsAnyAudioParam = (audioParamStore, isNativeAudioParam) => {
    return (anything) => audioParamStore.has(anything) || isNativeAudioParam(anything);
};
//# sourceMappingURL=is-any-audio-param.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/is-any-offline-audio-context.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/is-any-offline-audio-context.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIsAnyOfflineAudioContext: () => (/* binding */ createIsAnyOfflineAudioContext)
/* harmony export */ });
const createIsAnyOfflineAudioContext = (contextStore, isNativeOfflineAudioContext) => {
    return (anything) => {
        const nativeContext = contextStore.get(anything);
        return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);
    };
};
//# sourceMappingURL=is-any-offline-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-context.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-context.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIsNativeAudioContext: () => (/* binding */ createIsNativeAudioContext)
/* harmony export */ });
const createIsNativeAudioContext = (nativeAudioContextConstructor) => {
    return (anything) => {
        return nativeAudioContextConstructor !== null && anything instanceof nativeAudioContextConstructor;
    };
};
//# sourceMappingURL=is-native-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-node.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-node.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIsNativeAudioNode: () => (/* binding */ createIsNativeAudioNode)
/* harmony export */ });
const createIsNativeAudioNode = (window) => {
    return (anything) => {
        return window !== null && typeof window.AudioNode === 'function' && anything instanceof window.AudioNode;
    };
};
//# sourceMappingURL=is-native-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-param.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-param.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIsNativeAudioParam: () => (/* binding */ createIsNativeAudioParam)
/* harmony export */ });
const createIsNativeAudioParam = (window) => {
    return (anything) => {
        return window !== null && typeof window.AudioParam === 'function' && anything instanceof window.AudioParam;
    };
};
//# sourceMappingURL=is-native-audio-param.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/is-native-context.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/is-native-context.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIsNativeContext: () => (/* binding */ createIsNativeContext)
/* harmony export */ });
const createIsNativeContext = (isNativeAudioContext, isNativeOfflineAudioContext) => {
    return (anything) => {
        return isNativeAudioContext(anything) || isNativeOfflineAudioContext(anything);
    };
};
//# sourceMappingURL=is-native-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/is-native-offline-audio-context.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/is-native-offline-audio-context.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIsNativeOfflineAudioContext: () => (/* binding */ createIsNativeOfflineAudioContext)
/* harmony export */ });
const createIsNativeOfflineAudioContext = (nativeOfflineAudioContextConstructor) => {
    return (anything) => {
        return nativeOfflineAudioContextConstructor !== null && anything instanceof nativeOfflineAudioContextConstructor;
    };
};
//# sourceMappingURL=is-native-offline-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/is-secure-context.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/is-secure-context.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIsSecureContext: () => (/* binding */ createIsSecureContext)
/* harmony export */ });
const createIsSecureContext = (window) => window !== null && window.isSecureContext;
//# sourceMappingURL=is-secure-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/is-supported-promise.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/is-supported-promise.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIsSupportedPromise: () => (/* binding */ createIsSupportedPromise)
/* harmony export */ });
const createIsSupportedPromise = async (cacheTestResult, testAudioBufferCopyChannelMethodsSubarraySupport, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioNodeConnectMethodSupport, testAudioWorkletProcessorNoOutputsSupport, testChannelMergerNodeChannelCountSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testConvolverNodeChannelCountSupport, testDomExceptionContrucorSupport, testIsSecureContextSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport) => {
    if (cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport) &&
        cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport) &&
        cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport) &&
        cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport) &&
        cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport) &&
        cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport) &&
        cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport) &&
        cacheTestResult(testConvolverNodeChannelCountSupport, testConvolverNodeChannelCountSupport) &&
        cacheTestResult(testDomExceptionContrucorSupport, testDomExceptionContrucorSupport) &&
        cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport) &&
        cacheTestResult(testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)) {
        const results = await Promise.all([
            cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport),
            cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport),
            cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport),
            cacheTestResult(testTransferablesSupport, testTransferablesSupport)
        ]);
        return results.every((result) => result);
    }
    return false;
};
//# sourceMappingURL=is-supported-promise.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/media-element-audio-source-node-constructor.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/media-element-audio-source-node-constructor.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createMediaElementAudioSourceNodeConstructor: () => (/* binding */ createMediaElementAudioSourceNodeConstructor)
/* harmony export */ });
const createMediaElementAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) => {
    return class MediaElementAudioSourceNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options);
            // Bug #171: Safari allows to create a MediaElementAudioSourceNode with an OfflineAudioContext.
            if (isNativeOfflineAudioContext(nativeContext)) {
                throw TypeError();
            }
            super(context, true, nativeMediaElementAudioSourceNode, null);
            this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;
        }
        get mediaElement() {
            return this._nativeMediaElementAudioSourceNode.mediaElement;
        }
    };
};
//# sourceMappingURL=media-element-audio-source-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-destination-node-constructor.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-destination-node-constructor.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createMediaStreamAudioDestinationNodeConstructor: () => (/* binding */ createMediaStreamAudioDestinationNodeConstructor)
/* harmony export */ });
const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'explicit',
    channelInterpretation: 'speakers'
};
const createMediaStreamAudioDestinationNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext) => {
    return class MediaStreamAudioDestinationNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            // Bug #173: Safari allows to create a MediaStreamAudioDestinationNode with an OfflineAudioContext.
            if (isNativeOfflineAudioContext(nativeContext)) {
                throw new TypeError();
            }
            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
            const nativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNode(nativeContext, mergedOptions);
            super(context, false, nativeMediaStreamAudioDestinationNode, null);
            this._nativeMediaStreamAudioDestinationNode = nativeMediaStreamAudioDestinationNode;
        }
        get stream() {
            return this._nativeMediaStreamAudioDestinationNode.stream;
        }
    };
};
//# sourceMappingURL=media-stream-audio-destination-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-source-node-constructor.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-source-node-constructor.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createMediaStreamAudioSourceNodeConstructor: () => (/* binding */ createMediaStreamAudioSourceNodeConstructor)
/* harmony export */ });
const createMediaStreamAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) => {
    return class MediaStreamAudioSourceNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options);
            // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.
            if (isNativeOfflineAudioContext(nativeContext)) {
                throw new TypeError();
            }
            super(context, true, nativeMediaStreamAudioSourceNode, null);
            this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;
        }
        get mediaStream() {
            return this._nativeMediaStreamAudioSourceNode.mediaStream;
        }
    };
};
//# sourceMappingURL=media-stream-audio-source-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/media-stream-track-audio-source-node-constructor.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/media-stream-track-audio-source-node-constructor.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createMediaStreamTrackAudioSourceNodeConstructor: () => (/* binding */ createMediaStreamTrackAudioSourceNodeConstructor)
/* harmony export */ });
const createMediaStreamTrackAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext) => {
    return class MediaStreamTrackAudioSourceNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode(nativeContext, options);
            super(context, true, nativeMediaStreamTrackAudioSourceNode, null);
        }
    };
};
//# sourceMappingURL=media-stream-track-audio-source-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/minimal-audio-context-constructor.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/minimal-audio-context-constructor.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createMinimalAudioContextConstructor: () => (/* binding */ createMinimalAudioContextConstructor)
/* harmony export */ });
/* harmony import */ var _helpers_deactivate_audio_graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/deactivate-audio-graph */ "./node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js");
/* harmony import */ var _helpers_is_valid_latency_hint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/is-valid-latency-hint */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js");


const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) => {
    return class MinimalAudioContext extends minimalBaseAudioContextConstructor {
        constructor(options = {}) {
            if (nativeAudioContextConstructor === null) {
                throw new Error('Missing the native AudioContext constructor.');
            }
            let nativeAudioContext;
            try {
                nativeAudioContext = new nativeAudioContextConstructor(options);
            }
            catch (err) {
                // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.
                if (err.code === 12 && err.message === 'sampleRate is not in range') {
                    throw createNotSupportedError();
                }
                throw err;
            }
            // Bug #131 Safari returns null when there are four other AudioContexts running already.
            if (nativeAudioContext === null) {
                throw createUnknownError();
            }
            // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.
            if (!(0,_helpers_is_valid_latency_hint__WEBPACK_IMPORTED_MODULE_1__.isValidLatencyHint)(options.latencyHint)) {
                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);
            }
            // Bug #150 Safari does not support setting the sampleRate.
            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {
                throw createNotSupportedError();
            }
            super(nativeAudioContext, 2);
            const { latencyHint } = options;
            const { sampleRate } = nativeAudioContext;
            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.
            this._baseLatency =
                typeof nativeAudioContext.baseLatency === 'number'
                    ? nativeAudioContext.baseLatency
                    : latencyHint === 'balanced'
                        ? 512 / sampleRate
                        : latencyHint === 'interactive' || latencyHint === undefined
                            ? 256 / sampleRate
                            : latencyHint === 'playback'
                                ? 1024 / sampleRate
                                : /*
                                   * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a
                                   * ScriptProcessorNode.
                                   */
                                    (Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate;
            this._nativeAudioContext = nativeAudioContext;
            // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.
            if (nativeAudioContextConstructor.name === 'webkitAudioContext') {
                this._nativeGainNode = nativeAudioContext.createGain();
                this._nativeOscillatorNode = nativeAudioContext.createOscillator();
                this._nativeGainNode.gain.value = 1e-37;
                this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);
                this._nativeOscillatorNode.start();
            }
            else {
                this._nativeGainNode = null;
                this._nativeOscillatorNode = null;
            }
            this._state = null;
            /*
             * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes
             * to 'running'.
             */
            if (nativeAudioContext.state === 'running') {
                this._state = 'suspended';
                const revokeState = () => {
                    if (this._state === 'suspended') {
                        this._state = null;
                    }
                    nativeAudioContext.removeEventListener('statechange', revokeState);
                };
                nativeAudioContext.addEventListener('statechange', revokeState);
            }
        }
        get baseLatency() {
            return this._baseLatency;
        }
        get state() {
            return this._state !== null ? this._state : this._nativeAudioContext.state;
        }
        close() {
            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.
            if (this.state === 'closed') {
                return this._nativeAudioContext.close().then(() => {
                    throw createInvalidStateError();
                });
            }
            // Bug #34: If the state was set to suspended before it should be revoked now.
            if (this._state === 'suspended') {
                this._state = null;
            }
            return this._nativeAudioContext.close().then(() => {
                if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {
                    this._nativeOscillatorNode.stop();
                    this._nativeGainNode.disconnect();
                    this._nativeOscillatorNode.disconnect();
                }
                (0,_helpers_deactivate_audio_graph__WEBPACK_IMPORTED_MODULE_0__.deactivateAudioGraph)(this);
            });
        }
        resume() {
            if (this._state === 'suspended') {
                return new Promise((resolve, reject) => {
                    const resolvePromise = () => {
                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);
                        if (this._nativeAudioContext.state === 'running') {
                            resolve();
                        }
                        else {
                            this.resume().then(resolve, reject);
                        }
                    };
                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);
                });
            }
            return this._nativeAudioContext.resume().catch((err) => {
                // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.
                // Bug #56: Safari invokes the catch handler but without an error.
                if (err === undefined || err.code === 15) {
                    throw createInvalidStateError();
                }
                throw err;
            });
        }
        suspend() {
            return this._nativeAudioContext.suspend().catch((err) => {
                // Bug #56: Safari invokes the catch handler but without an error.
                if (err === undefined) {
                    throw createInvalidStateError();
                }
                throw err;
            });
        }
    };
};
//# sourceMappingURL=minimal-audio-context-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/minimal-base-audio-context-constructor.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/minimal-base-audio-context-constructor.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createMinimalBaseAudioContextConstructor: () => (/* binding */ createMinimalBaseAudioContextConstructor)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");

const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener) => {
    return class MinimalBaseAudioContext extends eventTargetConstructor {
        constructor(_nativeContext, numberOfChannels) {
            super(_nativeContext);
            this._nativeContext = _nativeContext;
            _globals__WEBPACK_IMPORTED_MODULE_0__.CONTEXT_STORE.set(this, _nativeContext);
            if (isNativeOfflineAudioContext(_nativeContext)) {
                unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());
            }
            this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);
            this._listener = createAudioListener(this, _nativeContext);
            this._onstatechange = null;
        }
        get currentTime() {
            return this._nativeContext.currentTime;
        }
        get destination() {
            return this._destination;
        }
        get listener() {
            return this._listener;
        }
        get onstatechange() {
            return this._onstatechange;
        }
        set onstatechange(value) {
            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
            this._nativeContext.onstatechange = wrappedListener;
            const nativeOnStateChange = this._nativeContext.onstatechange;
            this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;
        }
        get sampleRate() {
            return this._nativeContext.sampleRate;
        }
        get state() {
            return this._nativeContext.state;
        }
    };
};
//# sourceMappingURL=minimal-base-audio-context-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/minimal-offline-audio-context-constructor.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/minimal-offline-audio-context-constructor.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createMinimalOfflineAudioContextConstructor: () => (/* binding */ createMinimalOfflineAudioContextConstructor)
/* harmony export */ });
/* harmony import */ var _helpers_deactivate_audio_graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/deactivate-audio-graph */ "./node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js");
/* harmony import */ var _helpers_test_promise_support__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/test-promise-support */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js");


const DEFAULT_OPTIONS = {
    numberOfChannels: 1
};
const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering) => {
    return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {
        constructor(options) {
            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };
            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);
            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.
            if (!cacheTestResult(_helpers_test_promise_support__WEBPACK_IMPORTED_MODULE_1__.testPromiseSupport, () => (0,_helpers_test_promise_support__WEBPACK_IMPORTED_MODULE_1__.testPromiseSupport)(nativeOfflineAudioContext))) {
                nativeOfflineAudioContext.addEventListener('statechange', (() => {
                    let i = 0;
                    const delayStateChangeEvent = (event) => {
                        if (this._state === 'running') {
                            if (i > 0) {
                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);
                                event.stopImmediatePropagation();
                                this._waitForThePromiseToSettle(event);
                            }
                            else {
                                i += 1;
                            }
                        }
                    };
                    return delayStateChangeEvent;
                })());
            }
            super(nativeOfflineAudioContext, numberOfChannels);
            this._length = length;
            this._nativeOfflineAudioContext = nativeOfflineAudioContext;
            this._state = null;
        }
        get length() {
            // Bug #17: Safari does not yet expose the length.
            if (this._nativeOfflineAudioContext.length === undefined) {
                return this._length;
            }
            return this._nativeOfflineAudioContext.length;
        }
        get state() {
            return this._state === null ? this._nativeOfflineAudioContext.state : this._state;
        }
        startRendering() {
            /*
             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore
             * the state of the nativeOfflineAudioContext might no transition to running immediately.
             */
            if (this._state === 'running') {
                return Promise.reject(createInvalidStateError());
            }
            this._state = 'running';
            return startRendering(this.destination, this._nativeOfflineAudioContext).finally(() => {
                this._state = null;
                (0,_helpers_deactivate_audio_graph__WEBPACK_IMPORTED_MODULE_0__.deactivateAudioGraph)(this);
            });
        }
        _waitForThePromiseToSettle(event) {
            if (this._state === null) {
                this._nativeOfflineAudioContext.dispatchEvent(event);
            }
            else {
                setTimeout(() => this._waitForThePromiseToSettle(event));
            }
        }
    };
};
//# sourceMappingURL=minimal-offline-audio-context-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/monitor-connections.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/monitor-connections.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createMonitorConnections: () => (/* binding */ createMonitorConnections)
/* harmony export */ });
const createMonitorConnections = (insertElementInSet, isNativeAudioNode) => {
    return (nativeAudioNode, whenConnected, whenDisconnected) => {
        const connections = new Set();
        nativeAudioNode.connect = ((connect) => {
            // tslint:disable-next-line:invalid-void no-inferrable-types
            return (destination, output = 0, input = 0) => {
                const wasDisconnected = connections.size === 0;
                if (isNativeAudioNode(destination)) {
                    // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.
                    connect.call(nativeAudioNode, destination, output, input);
                    insertElementInSet(connections, [destination, output, input], (connection) => connection[0] === destination && connection[1] === output && connection[2] === input, true);
                    if (wasDisconnected) {
                        whenConnected();
                    }
                    return destination;
                }
                connect.call(nativeAudioNode, destination, output);
                insertElementInSet(connections, [destination, output], (connection) => connection[0] === destination && connection[1] === output, true);
                if (wasDisconnected) {
                    whenConnected();
                }
                return;
            };
        })(nativeAudioNode.connect);
        nativeAudioNode.disconnect = ((disconnect) => {
            return (destinationOrOutput, output, input) => {
                const wasConnected = connections.size > 0;
                if (destinationOrOutput === undefined) {
                    disconnect.apply(nativeAudioNode);
                    connections.clear();
                }
                else if (typeof destinationOrOutput === 'number') {
                    // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.
                    disconnect.call(nativeAudioNode, destinationOrOutput);
                    for (const connection of connections) {
                        if (connection[1] === destinationOrOutput) {
                            connections.delete(connection);
                        }
                    }
                }
                else {
                    if (isNativeAudioNode(destinationOrOutput)) {
                        // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.
                        disconnect.call(nativeAudioNode, destinationOrOutput, output, input);
                    }
                    else {
                        // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.
                        disconnect.call(nativeAudioNode, destinationOrOutput, output);
                    }
                    for (const connection of connections) {
                        if (connection[0] === destinationOrOutput &&
                            (output === undefined || connection[1] === output) &&
                            (input === undefined || connection[2] === input)) {
                            connections.delete(connection);
                        }
                    }
                }
                const isDisconnected = connections.size === 0;
                if (wasConnected && isDisconnected) {
                    whenDisconnected();
                }
            };
        })(nativeAudioNode.disconnect);
        return nativeAudioNode;
    };
};
//# sourceMappingURL=monitor-connections.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-analyser-node-factory.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-analyser-node-factory.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeAnalyserNodeFactory: () => (/* binding */ createNativeAnalyserNodeFactory)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-option */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js");
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");
/* harmony import */ var _helpers_test_analyser_node_get_float_time_domain_data_method_support__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/test-analyser-node-get-float-time-domain-data-method-support */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-analyser-node-get-float-time-domain-data-method-support.js");
/* harmony import */ var _helpers_wrap_analyser_node_get_float_time_domain_data_method__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/wrap-analyser-node-get-float-time-domain-data-method */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-analyser-node-get-float-time-domain-data-method.js");




const createNativeAnalyserNodeFactory = (cacheTestResult, createIndexSizeError) => {
    return (nativeContext, options) => {
        const nativeAnalyserNode = nativeContext.createAnalyser();
        // Bug #37: Firefox does not create an AnalyserNode with the default properties.
        (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOptions)(nativeAnalyserNode, options);
        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.
        if (!(options.maxDecibels > options.minDecibels)) {
            throw createIndexSizeError();
        }
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOption)(nativeAnalyserNode, options, 'fftSize');
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOption)(nativeAnalyserNode, options, 'maxDecibels');
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOption)(nativeAnalyserNode, options, 'minDecibels');
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOption)(nativeAnalyserNode, options, 'smoothingTimeConstant');
        // Bug #36: Safari does not support getFloatTimeDomainData() yet.
        if (!cacheTestResult(_helpers_test_analyser_node_get_float_time_domain_data_method_support__WEBPACK_IMPORTED_MODULE_2__.testAnalyserNodeGetFloatTimeDomainDataMethodSupport, () => (0,_helpers_test_analyser_node_get_float_time_domain_data_method_support__WEBPACK_IMPORTED_MODULE_2__.testAnalyserNodeGetFloatTimeDomainDataMethodSupport)(nativeAnalyserNode))) {
            (0,_helpers_wrap_analyser_node_get_float_time_domain_data_method__WEBPACK_IMPORTED_MODULE_3__.wrapAnalyserNodeGetFloatTimeDomainDataMethod)(nativeAnalyserNode);
        }
        return nativeAnalyserNode;
    };
};
//# sourceMappingURL=native-analyser-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-constructor.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-constructor.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeAudioBufferConstructor: () => (/* binding */ createNativeAudioBufferConstructor)
/* harmony export */ });
const createNativeAudioBufferConstructor = (window) => {
    if (window === null) {
        return null;
    }
    if (window.hasOwnProperty('AudioBuffer')) {
        return window.AudioBuffer;
    }
    return null;
};
//# sourceMappingURL=native-audio-buffer-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeAudioBufferSourceNodeFactory: () => (/* binding */ createNativeAudioBufferSourceNodeFactory)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-audio-param-value */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js");
/* harmony import */ var _helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-option */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js");
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");
/* harmony import */ var _helpers_wrap_audio_buffer_source_node_start_method_consecutive_calls__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js");
/* harmony import */ var _helpers_wrap_audio_scheduled_source_node_start_method_negative_parameters__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js");
/* harmony import */ var _helpers_wrap_audio_scheduled_source_node_stop_method_negative_parameters__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js");






const createNativeAudioBufferSourceNodeFactory = (addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {
    return (nativeContext, options) => {
        const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
        (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_2__.assignNativeAudioNodeOptions)(nativeAudioBufferSourceNode, options);
        (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativeAudioBufferSourceNode, options, 'playbackRate');
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOption)(nativeAudioBufferSourceNode, options, 'buffer');
        // Bug #149: Safari does not yet support the detune AudioParam.
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOption)(nativeAudioBufferSourceNode, options, 'loop');
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOption)(nativeAudioBufferSourceNode, options, 'loopEnd');
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOption)(nativeAudioBufferSourceNode, options, 'loopStart');
        // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.
        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {
            (0,_helpers_wrap_audio_buffer_source_node_start_method_consecutive_calls__WEBPACK_IMPORTED_MODULE_3__.wrapAudioBufferSourceNodeStartMethodConsecutiveCalls)(nativeAudioBufferSourceNode);
        }
        // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.
        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {
            wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);
        }
        // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.
        if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, () => testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext))) {
            wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);
        }
        // Bug #44: Safari does not throw a RangeError yet.
        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {
            (0,_helpers_wrap_audio_scheduled_source_node_start_method_negative_parameters__WEBPACK_IMPORTED_MODULE_4__.wrapAudioScheduledSourceNodeStartMethodNegativeParameters)(nativeAudioBufferSourceNode);
        }
        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.
        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {
            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);
        }
        // Bug #44: Only Firefox does not throw a RangeError yet.
        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {
            (0,_helpers_wrap_audio_scheduled_source_node_stop_method_negative_parameters__WEBPACK_IMPORTED_MODULE_5__.wrapAudioScheduledSourceNodeStopMethodNegativeParameters)(nativeAudioBufferSourceNode);
        }
        // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.
        addSilentConnection(nativeContext, nativeAudioBufferSourceNode);
        return nativeAudioBufferSourceNode;
    };
};
//# sourceMappingURL=native-audio-buffer-source-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-audio-context-constructor.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-audio-context-constructor.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeAudioContextConstructor: () => (/* binding */ createNativeAudioContextConstructor)
/* harmony export */ });
const createNativeAudioContextConstructor = (window) => {
    if (window === null) {
        return null;
    }
    if (window.hasOwnProperty('AudioContext')) {
        return window.AudioContext;
    }
    return window.hasOwnProperty('webkitAudioContext') ? window.webkitAudioContext : null;
};
//# sourceMappingURL=native-audio-context-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-audio-destination-node.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-audio-destination-node.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeAudioDestinationNodeFactory: () => (/* binding */ createNativeAudioDestinationNodeFactory)
/* harmony export */ });
const createNativeAudioDestinationNodeFactory = (createNativeGainNode, overwriteAccessors) => {
    return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {
        const nativeAudioDestinationNode = nativeContext.destination;
        // Bug #132: Safari does not have the correct channelCount.
        if (nativeAudioDestinationNode.channelCount !== channelCount) {
            try {
                nativeAudioDestinationNode.channelCount = channelCount;
            }
            catch {
                // Bug #169: Safari throws an error on each attempt to change the channelCount.
            }
        }
        // Bug #83: Safari does not have the correct channelCountMode.
        if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {
            nativeAudioDestinationNode.channelCountMode = 'explicit';
        }
        // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.
        if (nativeAudioDestinationNode.maxChannelCount === 0) {
            Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {
                value: channelCount
            });
        }
        // Bug #168: No browser does yet have an AudioDestinationNode with an output.
        const gainNode = createNativeGainNode(nativeContext, {
            channelCount,
            channelCountMode: nativeAudioDestinationNode.channelCountMode,
            channelInterpretation: nativeAudioDestinationNode.channelInterpretation,
            gain: 1
        });
        overwriteAccessors(gainNode, 'channelCount', (get) => () => get.call(gainNode), (set) => (value) => {
            set.call(gainNode, value);
            try {
                nativeAudioDestinationNode.channelCount = value;
            }
            catch (err) {
                // Bug #169: Safari throws an error on each attempt to change the channelCount.
                if (value > nativeAudioDestinationNode.maxChannelCount) {
                    throw err;
                }
            }
        });
        overwriteAccessors(gainNode, 'channelCountMode', (get) => () => get.call(gainNode), (set) => (value) => {
            set.call(gainNode, value);
            nativeAudioDestinationNode.channelCountMode = value;
        });
        overwriteAccessors(gainNode, 'channelInterpretation', (get) => () => get.call(gainNode), (set) => (value) => {
            set.call(gainNode, value);
            nativeAudioDestinationNode.channelInterpretation = value;
        });
        Object.defineProperty(gainNode, 'maxChannelCount', {
            get: () => nativeAudioDestinationNode.maxChannelCount
        });
        // @todo This should be disconnected when the context is closed.
        gainNode.connect(nativeAudioDestinationNode);
        return gainNode;
    };
};
//# sourceMappingURL=native-audio-destination-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-constructor.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-constructor.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeAudioWorkletNodeConstructor: () => (/* binding */ createNativeAudioWorkletNodeConstructor)
/* harmony export */ });
const createNativeAudioWorkletNodeConstructor = (window) => {
    if (window === null) {
        return null;
    }
    return window.hasOwnProperty('AudioWorkletNode') ? window.AudioWorkletNode : null;
};
//# sourceMappingURL=native-audio-worklet-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeAudioWorkletNodeFactory: () => (/* binding */ createNativeAudioWorkletNodeFactory)
/* harmony export */ });
/* harmony import */ var _helpers_test_clonability_of_audio_worklet_node_options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/test-clonability-of-audio-worklet-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-clonability-of-audio-worklet-node-options.js");

const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections) => {
    return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {
        if (nativeAudioWorkletNodeConstructor !== null) {
            try {
                const nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeContext, name, options);
                const patchedEventListeners = new Map();
                let onprocessorerror = null;
                Object.defineProperties(nativeAudioWorkletNode, {
                    /*
                     * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some
                     * browsers have no native implementation to achieve a consistent behavior.
                     */
                    channelCount: {
                        get: () => options.channelCount,
                        set: () => {
                            throw createInvalidStateError();
                        }
                    },
                    channelCountMode: {
                        get: () => 'explicit',
                        set: () => {
                            throw createInvalidStateError();
                        }
                    },
                    // Bug #156: Chrome and Edge do not yet fire an ErrorEvent.
                    onprocessorerror: {
                        get: () => onprocessorerror,
                        set: (value) => {
                            if (typeof onprocessorerror === 'function') {
                                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);
                            }
                            onprocessorerror = typeof value === 'function' ? value : null;
                            if (typeof onprocessorerror === 'function') {
                                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);
                            }
                        }
                    }
                });
                nativeAudioWorkletNode.addEventListener = ((addEventListener) => {
                    return (...args) => {
                        if (args[0] === 'processorerror') {
                            const unpatchedEventListener = typeof args[1] === 'function'
                                ? args[1]
                                : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function'
                                    ? args[1].handleEvent
                                    : null;
                            if (unpatchedEventListener !== null) {
                                const patchedEventListener = patchedEventListeners.get(args[1]);
                                if (patchedEventListener !== undefined) {
                                    args[1] = patchedEventListener;
                                }
                                else {
                                    args[1] = (event) => {
                                        // Bug #178: Chrome and Edge do fire an event of type error.
                                        if (event.type === 'error') {
                                            Object.defineProperties(event, {
                                                type: { value: 'processorerror' }
                                            });
                                            unpatchedEventListener(event);
                                        }
                                        else {
                                            unpatchedEventListener(new ErrorEvent(args[0], { ...event }));
                                        }
                                    };
                                    patchedEventListeners.set(unpatchedEventListener, args[1]);
                                }
                            }
                        }
                        // Bug #178: Chrome and Edge do fire an event of type error.
                        addEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);
                        return addEventListener.call(nativeAudioWorkletNode, ...args);
                    };
                })(nativeAudioWorkletNode.addEventListener);
                nativeAudioWorkletNode.removeEventListener = ((removeEventListener) => {
                    return (...args) => {
                        if (args[0] === 'processorerror') {
                            const patchedEventListener = patchedEventListeners.get(args[1]);
                            if (patchedEventListener !== undefined) {
                                patchedEventListeners.delete(args[1]);
                                args[1] = patchedEventListener;
                            }
                        }
                        // Bug #178: Chrome and Edge do fire an event of type error.
                        removeEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);
                        return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);
                    };
                })(nativeAudioWorkletNode.removeEventListener);
                /*
                 * Bug #86: Chrome and Edge do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but
                 * has an output.
                 */
                if (options.numberOfOutputs !== 0) {
                    const nativeGainNode = createNativeGainNode(nativeContext, {
                        channelCount: 1,
                        channelCountMode: 'explicit',
                        channelInterpretation: 'discrete',
                        gain: 0
                    });
                    nativeAudioWorkletNode.connect(nativeGainNode).connect(nativeContext.destination);
                    const whenConnected = () => nativeGainNode.disconnect();
                    const whenDisconnected = () => nativeGainNode.connect(nativeContext.destination);
                    // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.
                    return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);
                }
                return nativeAudioWorkletNode;
            }
            catch (err) {
                // Bug #60: Chrome & Edge throw an InvalidStateError instead of a NotSupportedError.
                if (err.code === 11) {
                    throw createNotSupportedError();
                }
                throw err;
            }
        }
        // Bug #61: Only Chrome & Edge have an implementation of the AudioWorkletNode yet.
        if (processorConstructor === undefined) {
            throw createNotSupportedError();
        }
        (0,_helpers_test_clonability_of_audio_worklet_node_options__WEBPACK_IMPORTED_MODULE_0__.testClonabilityOfAudioWorkletNodeOptions)(options);
        return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);
    };
};
//# sourceMappingURL=native-audio-worklet-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-faker-factory.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-faker-factory.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeAudioWorkletNodeFakerFactory: () => (/* binding */ createNativeAudioWorkletNodeFakerFactory)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./node_modules/standardized-audio-context/build/es2019/constants.js");
/* harmony import */ var _helpers_compute_buffer_size__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/compute-buffer-size */ "./node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js");
/* harmony import */ var _helpers_copy_from_channel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/copy-from-channel */ "./node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js");
/* harmony import */ var _helpers_copy_to_channel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/copy-to-channel */ "./node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js");
/* harmony import */ var _helpers_create_audio_worklet_processor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/create-audio-worklet-processor */ "./node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor.js");
/* harmony import */ var _helpers_create_nested_arrays__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/create-nested-arrays */ "./node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js");
/* harmony import */ var _read_only_map__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../read-only-map */ "./node_modules/standardized-audio-context/build/es2019/read-only-map.js");







const createNativeAudioWorkletNodeFakerFactory = (connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections) => {
    return (nativeContext, baseLatency, processorConstructor, options) => {
        if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {
            throw createNotSupportedError();
        }
        const outputChannelCount = Array.isArray(options.outputChannelCount)
            ? options.outputChannelCount
            : Array.from(options.outputChannelCount);
        // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.
        if (outputChannelCount.some((channelCount) => channelCount < 1)) {
            throw createNotSupportedError();
        }
        if (outputChannelCount.length !== options.numberOfOutputs) {
            throw createIndexSizeError();
        }
        // Bug #61: This is not part of the standard but required for the faker to work.
        if (options.channelCountMode !== 'explicit') {
            throw createNotSupportedError();
        }
        const numberOfInputChannels = options.channelCount * options.numberOfInputs;
        const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);
        const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;
        // Bug #61: This is not part of the standard but required for the faker to work.
        if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {
            throw createNotSupportedError();
        }
        const messageChannel = new MessageChannel();
        const gainNodes = [];
        const inputChannelSplitterNodes = [];
        for (let i = 0; i < options.numberOfInputs; i += 1) {
            gainNodes.push(createNativeGainNode(nativeContext, {
                channelCount: options.channelCount,
                channelCountMode: options.channelCountMode,
                channelInterpretation: options.channelInterpretation,
                gain: 1
            }));
            inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {
                channelCount: options.channelCount,
                channelCountMode: 'explicit',
                channelInterpretation: 'discrete',
                numberOfOutputs: options.channelCount
            }));
        }
        const constantSourceNodes = [];
        if (processorConstructor.parameterDescriptors !== undefined) {
            for (const { defaultValue, maxValue, minValue, name } of processorConstructor.parameterDescriptors) {
                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {
                    channelCount: 1,
                    channelCountMode: 'explicit',
                    channelInterpretation: 'discrete',
                    offset: options.parameterData[name] !== undefined
                        ? options.parameterData[name]
                        : defaultValue === undefined
                            ? 0
                            : defaultValue
                });
                Object.defineProperties(constantSourceNode.offset, {
                    defaultValue: {
                        get: () => (defaultValue === undefined ? 0 : defaultValue)
                    },
                    maxValue: {
                        get: () => (maxValue === undefined ? _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_POSITIVE_SINGLE_FLOAT : maxValue)
                    },
                    minValue: {
                        get: () => (minValue === undefined ? _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_NEGATIVE_SINGLE_FLOAT : minValue)
                    }
                });
                constantSourceNodes.push(constantSourceNode);
            }
        }
        const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'speakers',
            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)
        });
        const bufferSize = (0,_helpers_compute_buffer_size__WEBPACK_IMPORTED_MODULE_1__.computeBufferSize)(baseLatency, nativeContext.sampleRate);
        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters, 
        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.
        Math.max(1, numberOfOutputChannels));
        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {
            channelCount: Math.max(1, numberOfOutputChannels),
            channelCountMode: 'explicit',
            channelInterpretation: 'discrete',
            numberOfOutputs: Math.max(1, numberOfOutputChannels)
        });
        const outputChannelMergerNodes = [];
        for (let i = 0; i < options.numberOfOutputs; i += 1) {
            outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {
                channelCount: 1,
                channelCountMode: 'explicit',
                channelInterpretation: 'speakers',
                numberOfInputs: outputChannelCount[i]
            }));
        }
        for (let i = 0; i < options.numberOfInputs; i += 1) {
            gainNodes[i].connect(inputChannelSplitterNodes[i]);
            for (let j = 0; j < options.channelCount; j += 1) {
                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);
            }
        }
        const parameterMap = new _read_only_map__WEBPACK_IMPORTED_MODULE_6__.ReadOnlyMap(processorConstructor.parameterDescriptors === undefined
            ? []
            : processorConstructor.parameterDescriptors.map(({ name }, index) => {
                const constantSourceNode = constantSourceNodes[index];
                constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);
                constantSourceNode.start(0);
                return [name, constantSourceNode.offset];
            }));
        inputChannelMergerNode.connect(scriptProcessorNode);
        let channelInterpretation = options.channelInterpretation;
        let onprocessorerror = null;
        // Bug #87: Expose at least one output to make this node connectable.
        const outputAudioNodes = options.numberOfOutputs === 0 ? [scriptProcessorNode] : outputChannelMergerNodes;
        const nativeAudioWorkletNodeFaker = {
            get bufferSize() {
                return bufferSize;
            },
            get channelCount() {
                return options.channelCount;
            },
            set channelCount(_) {
                // Bug #61: This is not part of the standard but required for the faker to work.
                throw createInvalidStateError();
            },
            get channelCountMode() {
                return options.channelCountMode;
            },
            set channelCountMode(_) {
                // Bug #61: This is not part of the standard but required for the faker to work.
                throw createInvalidStateError();
            },
            get channelInterpretation() {
                return channelInterpretation;
            },
            set channelInterpretation(value) {
                for (const gainNode of gainNodes) {
                    gainNode.channelInterpretation = value;
                }
                channelInterpretation = value;
            },
            get context() {
                return scriptProcessorNode.context;
            },
            get inputs() {
                return gainNodes;
            },
            get numberOfInputs() {
                return options.numberOfInputs;
            },
            get numberOfOutputs() {
                return options.numberOfOutputs;
            },
            get onprocessorerror() {
                return onprocessorerror;
            },
            set onprocessorerror(value) {
                if (typeof onprocessorerror === 'function') {
                    nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);
                }
                onprocessorerror = typeof value === 'function' ? value : null;
                if (typeof onprocessorerror === 'function') {
                    nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);
                }
            },
            get parameters() {
                return parameterMap;
            },
            get port() {
                return messageChannel.port2;
            },
            addEventListener(...args) {
                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);
            },
            connect: connectMultipleOutputs.bind(null, outputAudioNodes),
            disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),
            dispatchEvent(...args) {
                return scriptProcessorNode.dispatchEvent(args[0]);
            },
            removeEventListener(...args) {
                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);
            }
        };
        const patchedEventListeners = new Map();
        messageChannel.port1.addEventListener = ((addEventListener) => {
            return (...args) => {
                if (args[0] === 'message') {
                    const unpatchedEventListener = typeof args[1] === 'function'
                        ? args[1]
                        : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function'
                            ? args[1].handleEvent
                            : null;
                    if (unpatchedEventListener !== null) {
                        const patchedEventListener = patchedEventListeners.get(args[1]);
                        if (patchedEventListener !== undefined) {
                            args[1] = patchedEventListener;
                        }
                        else {
                            args[1] = (event) => {
                                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => unpatchedEventListener(event));
                            };
                            patchedEventListeners.set(unpatchedEventListener, args[1]);
                        }
                    }
                }
                return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);
            };
        })(messageChannel.port1.addEventListener);
        messageChannel.port1.removeEventListener = ((removeEventListener) => {
            return (...args) => {
                if (args[0] === 'message') {
                    const patchedEventListener = patchedEventListeners.get(args[1]);
                    if (patchedEventListener !== undefined) {
                        patchedEventListeners.delete(args[1]);
                        args[1] = patchedEventListener;
                    }
                }
                return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);
            };
        })(messageChannel.port1.removeEventListener);
        let onmessage = null;
        Object.defineProperty(messageChannel.port1, 'onmessage', {
            get: () => onmessage,
            set: (value) => {
                if (typeof onmessage === 'function') {
                    messageChannel.port1.removeEventListener('message', onmessage);
                }
                onmessage = typeof value === 'function' ? value : null;
                if (typeof onmessage === 'function') {
                    messageChannel.port1.addEventListener('message', onmessage);
                    messageChannel.port1.start();
                }
            }
        });
        processorConstructor.prototype.port = messageChannel.port1;
        let audioWorkletProcessor = null;
        const audioWorkletProcessorPromise = (0,_helpers_create_audio_worklet_processor__WEBPACK_IMPORTED_MODULE_4__.createAudioWorkletProcessor)(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);
        audioWorkletProcessorPromise.then((dWrkltPrcssr) => (audioWorkletProcessor = dWrkltPrcssr));
        const inputs = (0,_helpers_create_nested_arrays__WEBPACK_IMPORTED_MODULE_5__.createNestedArrays)(options.numberOfInputs, options.channelCount);
        const outputs = (0,_helpers_create_nested_arrays__WEBPACK_IMPORTED_MODULE_5__.createNestedArrays)(options.numberOfOutputs, outputChannelCount);
        const parameters = processorConstructor.parameterDescriptors === undefined
            ? []
            : processorConstructor.parameterDescriptors.reduce((prmtrs, { name }) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});
        let isActive = true;
        const disconnectOutputsGraph = () => {
            if (options.numberOfOutputs > 0) {
                scriptProcessorNode.disconnect(outputChannelSplitterNode);
            }
            for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {
                const outputChannelMergerNode = outputChannelMergerNodes[i];
                for (let j = 0; j < outputChannelCount[i]; j += 1) {
                    outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);
                }
                outputChannelSplitterNodeOutput += outputChannelCount[i];
            }
        };
        const activeInputIndexes = new Map();
        // tslint:disable-next-line:deprecation
        scriptProcessorNode.onaudioprocess = ({ inputBuffer, outputBuffer }) => {
            if (audioWorkletProcessor !== null) {
                const activeInputs = getActiveAudioWorkletNodeInputs(nativeAudioWorkletNodeFaker);
                for (let i = 0; i < bufferSize; i += 128) {
                    for (let j = 0; j < options.numberOfInputs; j += 1) {
                        for (let k = 0; k < options.channelCount; k += 1) {
                            (0,_helpers_copy_from_channel__WEBPACK_IMPORTED_MODULE_2__.copyFromChannel)(inputBuffer, inputs[j], k, k, i);
                        }
                    }
                    if (processorConstructor.parameterDescriptors !== undefined) {
                        processorConstructor.parameterDescriptors.forEach(({ name }, index) => {
                            (0,_helpers_copy_from_channel__WEBPACK_IMPORTED_MODULE_2__.copyFromChannel)(inputBuffer, parameters, name, numberOfInputChannels + index, i);
                        });
                    }
                    for (let j = 0; j < options.numberOfInputs; j += 1) {
                        for (let k = 0; k < outputChannelCount[j]; k += 1) {
                            // The byteLength will be 0 when the ArrayBuffer was transferred.
                            if (outputs[j][k].byteLength === 0) {
                                outputs[j][k] = new Float32Array(128);
                            }
                        }
                    }
                    try {
                        const potentiallyEmptyInputs = inputs.map((input, index) => {
                            const activeInput = activeInputs[index];
                            if (activeInput.size > 0) {
                                activeInputIndexes.set(index, bufferSize / 128);
                                return input;
                            }
                            const count = activeInputIndexes.get(index);
                            if (count === undefined) {
                                return [];
                            }
                            if (input.every((channelData) => channelData.every((sample) => sample === 0))) {
                                if (count === 1) {
                                    activeInputIndexes.delete(index);
                                }
                                else {
                                    activeInputIndexes.set(index, count - 1);
                                }
                            }
                            return input;
                        });
                        const activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext.currentTime + i / nativeContext.sampleRate, nativeContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));
                        isActive = activeSourceFlag;
                        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {
                            for (let k = 0; k < outputChannelCount[j]; k += 1) {
                                (0,_helpers_copy_to_channel__WEBPACK_IMPORTED_MODULE_3__.copyToChannel)(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);
                            }
                            outputChannelSplitterNodeOutput += outputChannelCount[j];
                        }
                    }
                    catch (error) {
                        isActive = false;
                        nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', {
                            colno: error.colno,
                            filename: error.filename,
                            lineno: error.lineno,
                            message: error.message
                        }));
                    }
                    if (!isActive) {
                        for (let j = 0; j < options.numberOfInputs; j += 1) {
                            gainNodes[j].disconnect(inputChannelSplitterNodes[j]);
                            for (let k = 0; k < options.channelCount; k += 1) {
                                inputChannelSplitterNodes[i].disconnect(inputChannelMergerNode, k, j * options.channelCount + k);
                            }
                        }
                        if (processorConstructor.parameterDescriptors !== undefined) {
                            const length = processorConstructor.parameterDescriptors.length;
                            for (let j = 0; j < length; j += 1) {
                                const constantSourceNode = constantSourceNodes[j];
                                constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + j);
                                constantSourceNode.stop();
                            }
                        }
                        inputChannelMergerNode.disconnect(scriptProcessorNode);
                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation
                        if (isConnected) {
                            disconnectOutputsGraph();
                        }
                        else {
                            disconnectFakeGraph();
                        }
                        break;
                    }
                }
            }
        };
        let isConnected = false;
        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.
        const nativeGainNode = createNativeGainNode(nativeContext, {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'discrete',
            gain: 0
        });
        const connectFakeGraph = () => scriptProcessorNode.connect(nativeGainNode).connect(nativeContext.destination);
        const disconnectFakeGraph = () => {
            scriptProcessorNode.disconnect(nativeGainNode);
            nativeGainNode.disconnect();
        };
        const whenConnected = () => {
            if (isActive) {
                disconnectFakeGraph();
                if (options.numberOfOutputs > 0) {
                    scriptProcessorNode.connect(outputChannelSplitterNode);
                }
                for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {
                    const outputChannelMergerNode = outputChannelMergerNodes[i];
                    for (let j = 0; j < outputChannelCount[i]; j += 1) {
                        outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);
                    }
                    outputChannelSplitterNodeOutput += outputChannelCount[i];
                }
            }
            isConnected = true;
        };
        const whenDisconnected = () => {
            if (isActive) {
                connectFakeGraph();
                disconnectOutputsGraph();
            }
            isConnected = false;
        };
        connectFakeGraph();
        return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);
    };
};
//# sourceMappingURL=native-audio-worklet-node-faker-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-biquad-filter-node.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-biquad-filter-node.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeBiquadFilterNode: () => (/* binding */ createNativeBiquadFilterNode)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-audio-param-value */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js");
/* harmony import */ var _helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-option */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js");
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");



const createNativeBiquadFilterNode = (nativeContext, options) => {
    const nativeBiquadFilterNode = nativeContext.createBiquadFilter();
    (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_2__.assignNativeAudioNodeOptions)(nativeBiquadFilterNode, options);
    (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativeBiquadFilterNode, options, 'Q');
    (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativeBiquadFilterNode, options, 'detune');
    (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativeBiquadFilterNode, options, 'frequency');
    (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativeBiquadFilterNode, options, 'gain');
    (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOption)(nativeBiquadFilterNode, options, 'type');
    return nativeBiquadFilterNode;
};
//# sourceMappingURL=native-biquad-filter-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-channel-merger-node-factory.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-channel-merger-node-factory.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeChannelMergerNodeFactory: () => (/* binding */ createNativeChannelMergerNodeFactory)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");

const createNativeChannelMergerNodeFactory = (nativeAudioContextConstructor, wrapChannelMergerNode) => {
    return (nativeContext, options) => {
        const nativeChannelMergerNode = nativeContext.createChannelMerger(options.numberOfInputs);
        /*
         * Bug #20: Safari requires a connection of any kind to treat the input signal correctly.
         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of
         * the webkitAudioContext is used as a workaround here.
         */
        if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {
            wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);
        }
        (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOptions)(nativeChannelMergerNode, options);
        return nativeChannelMergerNode;
    };
};
//# sourceMappingURL=native-channel-merger-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-channel-splitter-node.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-channel-splitter-node.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeChannelSplitterNode: () => (/* binding */ createNativeChannelSplitterNode)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");
/* harmony import */ var _helpers_wrap_channel_splitter_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/wrap-channel-splitter-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-channel-splitter-node.js");


const createNativeChannelSplitterNode = (nativeContext, options) => {
    const nativeChannelSplitterNode = nativeContext.createChannelSplitter(options.numberOfOutputs);
    // Bug #96: Safari does not have the correct channelCount.
    // Bug #29: Safari does not have the correct channelCountMode.
    // Bug #31: Safari does not have the correct channelInterpretation.
    (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOptions)(nativeChannelSplitterNode, options);
    // Bug #29, #30, #31, #32, #96 & #97: Only Chrome, Edge & Firefox partially support the spec yet.
    (0,_helpers_wrap_channel_splitter_node__WEBPACK_IMPORTED_MODULE_1__.wrapChannelSplitterNode)(nativeChannelSplitterNode);
    return nativeChannelSplitterNode;
};
//# sourceMappingURL=native-channel-splitter-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-factory.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-factory.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeConstantSourceNodeFactory: () => (/* binding */ createNativeConstantSourceNodeFactory)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-audio-param-value */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js");
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");
/* harmony import */ var _helpers_wrap_audio_scheduled_source_node_start_method_negative_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js");
/* harmony import */ var _helpers_wrap_audio_scheduled_source_node_stop_method_negative_parameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js");




const createNativeConstantSourceNodeFactory = (addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport) => {
    return (nativeContext, options) => {
        // Bug #62: Safari does not support ConstantSourceNodes.
        if (nativeContext.createConstantSource === undefined) {
            return createNativeConstantSourceNodeFaker(nativeContext, options);
        }
        const nativeConstantSourceNode = nativeContext.createConstantSource();
        (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOptions)(nativeConstantSourceNode, options);
        (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativeConstantSourceNode, options, 'offset');
        // Bug #44: Safari does not throw a RangeError yet.
        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {
            (0,_helpers_wrap_audio_scheduled_source_node_start_method_negative_parameters__WEBPACK_IMPORTED_MODULE_2__.wrapAudioScheduledSourceNodeStartMethodNegativeParameters)(nativeConstantSourceNode);
        }
        // Bug #44: Only Firefox does not throw a RangeError yet.
        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {
            (0,_helpers_wrap_audio_scheduled_source_node_stop_method_negative_parameters__WEBPACK_IMPORTED_MODULE_3__.wrapAudioScheduledSourceNodeStopMethodNegativeParameters)(nativeConstantSourceNode);
        }
        // Bug #175: Safari will not fire an ended event if the ConstantSourceNode is unconnected.
        addSilentConnection(nativeContext, nativeConstantSourceNode);
        return nativeConstantSourceNode;
    };
};
//# sourceMappingURL=native-constant-source-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-faker-factory.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-faker-factory.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeConstantSourceNodeFakerFactory: () => (/* binding */ createNativeConstantSourceNodeFakerFactory)
/* harmony export */ });
/* harmony import */ var _helpers_intercept_connections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/intercept-connections */ "./node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js");

const createNativeConstantSourceNodeFakerFactory = (addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) => {
    return (nativeContext, { offset, ...audioNodeOptions }) => {
        const audioBuffer = nativeContext.createBuffer(1, 2, 44100);
        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {
            buffer: null,
            channelCount: 2,
            channelCountMode: 'max',
            channelInterpretation: 'speakers',
            loop: false,
            loopEnd: 0,
            loopStart: 0,
            playbackRate: 1
        });
        const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: offset });
        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
        const channelData = audioBuffer.getChannelData(0);
        // Bug #95: Safari does not play or loop one sample buffers.
        channelData[0] = 1;
        channelData[1] = 1;
        audioBufferSourceNode.buffer = audioBuffer;
        audioBufferSourceNode.loop = true;
        const nativeConstantSourceNodeFaker = {
            get bufferSize() {
                return undefined;
            },
            get channelCount() {
                return gainNode.channelCount;
            },
            set channelCount(value) {
                gainNode.channelCount = value;
            },
            get channelCountMode() {
                return gainNode.channelCountMode;
            },
            set channelCountMode(value) {
                gainNode.channelCountMode = value;
            },
            get channelInterpretation() {
                return gainNode.channelInterpretation;
            },
            set channelInterpretation(value) {
                gainNode.channelInterpretation = value;
            },
            get context() {
                return gainNode.context;
            },
            get inputs() {
                return [];
            },
            get numberOfInputs() {
                return audioBufferSourceNode.numberOfInputs;
            },
            get numberOfOutputs() {
                return gainNode.numberOfOutputs;
            },
            get offset() {
                return gainNode.gain;
            },
            get onended() {
                return audioBufferSourceNode.onended;
            },
            set onended(value) {
                audioBufferSourceNode.onended = value;
            },
            addEventListener(...args) {
                return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);
            },
            dispatchEvent(...args) {
                return audioBufferSourceNode.dispatchEvent(args[0]);
            },
            removeEventListener(...args) {
                return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);
            },
            start(when = 0) {
                audioBufferSourceNode.start.call(audioBufferSourceNode, when);
            },
            stop(when = 0) {
                audioBufferSourceNode.stop.call(audioBufferSourceNode, when);
            }
        };
        const whenConnected = () => audioBufferSourceNode.connect(gainNode);
        const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode);
        // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.
        addSilentConnection(nativeContext, audioBufferSourceNode);
        return monitorConnections((0,_helpers_intercept_connections__WEBPACK_IMPORTED_MODULE_0__.interceptConnections)(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);
    };
};
//# sourceMappingURL=native-constant-source-node-faker-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-factory.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-factory.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeConvolverNodeFactory: () => (/* binding */ createNativeConvolverNodeFactory)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-option */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js");
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");


const createNativeConvolverNodeFactory = (createNotSupportedError, overwriteAccessors) => {
    return (nativeContext, options) => {
        const nativeConvolverNode = nativeContext.createConvolver();
        (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOptions)(nativeConvolverNode, options);
        // The normalize property needs to be set before setting the buffer.
        if (options.disableNormalization === nativeConvolverNode.normalize) {
            nativeConvolverNode.normalize = !options.disableNormalization;
        }
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOption)(nativeConvolverNode, options, 'buffer');
        // Bug #113: Safari does allow to set the channelCount to a value larger than 2.
        if (options.channelCount > 2) {
            throw createNotSupportedError();
        }
        overwriteAccessors(nativeConvolverNode, 'channelCount', (get) => () => get.call(nativeConvolverNode), (set) => (value) => {
            if (value > 2) {
                throw createNotSupportedError();
            }
            return set.call(nativeConvolverNode, value);
        });
        // Bug #114: Safari allows to set the channelCountMode to 'max'.
        if (options.channelCountMode === 'max') {
            throw createNotSupportedError();
        }
        overwriteAccessors(nativeConvolverNode, 'channelCountMode', (get) => () => get.call(nativeConvolverNode), (set) => (value) => {
            if (value === 'max') {
                throw createNotSupportedError();
            }
            return set.call(nativeConvolverNode, value);
        });
        return nativeConvolverNode;
    };
};
//# sourceMappingURL=native-convolver-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-delay-node.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-delay-node.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeDelayNode: () => (/* binding */ createNativeDelayNode)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-audio-param-value */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js");
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");


const createNativeDelayNode = (nativeContext, options) => {
    const nativeDelayNode = nativeContext.createDelay(options.maxDelayTime);
    (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOptions)(nativeDelayNode, options);
    (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativeDelayNode, options, 'delayTime');
    return nativeDelayNode;
};
//# sourceMappingURL=native-delay-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-dynamics-compressor-node-factory.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-dynamics-compressor-node-factory.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeDynamicsCompressorNodeFactory: () => (/* binding */ createNativeDynamicsCompressorNodeFactory)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-audio-param-value */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js");
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");


const createNativeDynamicsCompressorNodeFactory = (createNotSupportedError) => {
    return (nativeContext, options) => {
        const nativeDynamicsCompressorNode = nativeContext.createDynamicsCompressor();
        (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOptions)(nativeDynamicsCompressorNode, options);
        // Bug #108: Safari allows a channelCount of three and above.
        if (options.channelCount > 2) {
            throw createNotSupportedError();
        }
        // Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max'.
        if (options.channelCountMode === 'max') {
            throw createNotSupportedError();
        }
        (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativeDynamicsCompressorNode, options, 'attack');
        (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativeDynamicsCompressorNode, options, 'knee');
        (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativeDynamicsCompressorNode, options, 'ratio');
        (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativeDynamicsCompressorNode, options, 'release');
        (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativeDynamicsCompressorNode, options, 'threshold');
        return nativeDynamicsCompressorNode;
    };
};
//# sourceMappingURL=native-dynamics-compressor-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-gain-node.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-gain-node.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeGainNode: () => (/* binding */ createNativeGainNode)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-audio-param-value */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js");
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");


const createNativeGainNode = (nativeContext, options) => {
    const nativeGainNode = nativeContext.createGain();
    (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOptions)(nativeGainNode, options);
    (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativeGainNode, options, 'gain');
    return nativeGainNode;
};
//# sourceMappingURL=native-gain-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-factory.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-factory.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeIIRFilterNodeFactory: () => (/* binding */ createNativeIIRFilterNodeFactory)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");

const createNativeIIRFilterNodeFactory = (createNativeIIRFilterNodeFaker) => {
    return (nativeContext, baseLatency, options) => {
        // Bug #9: Safari does not support IIRFilterNodes.
        if (nativeContext.createIIRFilter === undefined) {
            return createNativeIIRFilterNodeFaker(nativeContext, baseLatency, options);
        }
        // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.
        const nativeIIRFilterNode = nativeContext.createIIRFilter(options.feedforward, options.feedback);
        (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOptions)(nativeIIRFilterNode, options);
        return nativeIIRFilterNode;
    };
};
//# sourceMappingURL=native-iir-filter-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeIIRFilterNodeFakerFactory: () => (/* binding */ createNativeIIRFilterNodeFakerFactory)
/* harmony export */ });
/* harmony import */ var _helpers_compute_buffer_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/compute-buffer-size */ "./node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js");
/* harmony import */ var _helpers_filter_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/filter-buffer */ "./node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js");
/* harmony import */ var _helpers_intercept_connections__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/intercept-connections */ "./node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js");



function divide(a, b) {
    const denominator = b[0] * b[0] + b[1] * b[1];
    return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];
}
function multiply(a, b) {
    return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];
}
function evaluatePolynomial(coefficient, z) {
    let result = [0, 0];
    for (let i = coefficient.length - 1; i >= 0; i -= 1) {
        result = multiply(result, z);
        result[0] += coefficient[i];
    }
    return result;
}
const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {
    return (nativeContext, baseLatency, { channelCount, channelCountMode, channelInterpretation, feedback, feedforward }) => {
        const bufferSize = (0,_helpers_compute_buffer_size__WEBPACK_IMPORTED_MODULE_0__.computeBufferSize)(baseLatency, nativeContext.sampleRate);
        const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);
        const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);
        const feedbackLength = convertedFeedback.length;
        const feedforwardLength = convertedFeedforward.length;
        const minLength = Math.min(feedbackLength, feedforwardLength);
        if (feedbackLength === 0 || feedbackLength > 20) {
            throw createNotSupportedError();
        }
        if (convertedFeedback[0] === 0) {
            throw createInvalidStateError();
        }
        if (feedforwardLength === 0 || feedforwardLength > 20) {
            throw createNotSupportedError();
        }
        if (convertedFeedforward[0] === 0) {
            throw createInvalidStateError();
        }
        if (convertedFeedback[0] !== 1) {
            for (let i = 0; i < feedforwardLength; i += 1) {
                convertedFeedforward[i] /= convertedFeedback[0];
            }
            for (let i = 1; i < feedbackLength; i += 1) {
                convertedFeedback[i] /= convertedFeedback[0];
            }
        }
        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);
        scriptProcessorNode.channelCount = channelCount;
        scriptProcessorNode.channelCountMode = channelCountMode;
        scriptProcessorNode.channelInterpretation = channelInterpretation;
        const bufferLength = 32;
        const bufferIndexes = [];
        const xBuffers = [];
        const yBuffers = [];
        for (let i = 0; i < channelCount; i += 1) {
            bufferIndexes.push(0);
            const xBuffer = new Float32Array(bufferLength);
            const yBuffer = new Float32Array(bufferLength);
            xBuffer.fill(0);
            yBuffer.fill(0);
            xBuffers.push(xBuffer);
            yBuffers.push(yBuffer);
        }
        // tslint:disable-next-line:deprecation
        scriptProcessorNode.onaudioprocess = (event) => {
            const inputBuffer = event.inputBuffer;
            const outputBuffer = event.outputBuffer;
            const numberOfChannels = inputBuffer.numberOfChannels;
            for (let i = 0; i < numberOfChannels; i += 1) {
                const input = inputBuffer.getChannelData(i);
                const output = outputBuffer.getChannelData(i);
                bufferIndexes[i] = (0,_helpers_filter_buffer__WEBPACK_IMPORTED_MODULE_1__.filterBuffer)(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);
            }
        };
        const nyquist = nativeContext.sampleRate / 2;
        const nativeIIRFilterNodeFaker = {
            get bufferSize() {
                return bufferSize;
            },
            get channelCount() {
                return scriptProcessorNode.channelCount;
            },
            set channelCount(value) {
                scriptProcessorNode.channelCount = value;
            },
            get channelCountMode() {
                return scriptProcessorNode.channelCountMode;
            },
            set channelCountMode(value) {
                scriptProcessorNode.channelCountMode = value;
            },
            get channelInterpretation() {
                return scriptProcessorNode.channelInterpretation;
            },
            set channelInterpretation(value) {
                scriptProcessorNode.channelInterpretation = value;
            },
            get context() {
                return scriptProcessorNode.context;
            },
            get inputs() {
                return [scriptProcessorNode];
            },
            get numberOfInputs() {
                return scriptProcessorNode.numberOfInputs;
            },
            get numberOfOutputs() {
                return scriptProcessorNode.numberOfOutputs;
            },
            addEventListener(...args) {
                // @todo Dissallow adding an audioprocess listener.
                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);
            },
            dispatchEvent(...args) {
                return scriptProcessorNode.dispatchEvent(args[0]);
            },
            getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
                if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {
                    throw createInvalidAccessError();
                }
                const length = frequencyHz.length;
                for (let i = 0; i < length; i += 1) {
                    const omega = -Math.PI * (frequencyHz[i] / nyquist);
                    const z = [Math.cos(omega), Math.sin(omega)];
                    const numerator = evaluatePolynomial(convertedFeedforward, z);
                    const denominator = evaluatePolynomial(convertedFeedback, z);
                    const response = divide(numerator, denominator);
                    magResponse[i] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);
                    phaseResponse[i] = Math.atan2(response[1], response[0]);
                }
            },
            removeEventListener(...args) {
                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);
            }
        };
        return (0,_helpers_intercept_connections__WEBPACK_IMPORTED_MODULE_2__.interceptConnections)(nativeIIRFilterNodeFaker, scriptProcessorNode);
    };
};
//# sourceMappingURL=native-iir-filter-node-faker-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-media-element-audio-source-node.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-media-element-audio-source-node.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeMediaElementAudioSourceNode: () => (/* binding */ createNativeMediaElementAudioSourceNode)
/* harmony export */ });
const createNativeMediaElementAudioSourceNode = (nativeAudioContext, options) => {
    return nativeAudioContext.createMediaElementSource(options.mediaElement);
};
//# sourceMappingURL=native-media-element-audio-source-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-destination-node.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-destination-node.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeMediaStreamAudioDestinationNode: () => (/* binding */ createNativeMediaStreamAudioDestinationNode)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");

const createNativeMediaStreamAudioDestinationNode = (nativeAudioContext, options) => {
    const nativeMediaStreamAudioDestinationNode = nativeAudioContext.createMediaStreamDestination();
    (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOptions)(nativeMediaStreamAudioDestinationNode, options);
    // Bug #174: Safari does expose a wrong numberOfOutputs.
    if (nativeMediaStreamAudioDestinationNode.numberOfOutputs === 1) {
        Object.defineProperty(nativeMediaStreamAudioDestinationNode, 'numberOfOutputs', { get: () => 0 });
    }
    return nativeMediaStreamAudioDestinationNode;
};
//# sourceMappingURL=native-media-stream-audio-destination-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeMediaStreamAudioSourceNode: () => (/* binding */ createNativeMediaStreamAudioSourceNode)
/* harmony export */ });
const createNativeMediaStreamAudioSourceNode = (nativeAudioContext, { mediaStream }) => {
    const audioStreamTracks = mediaStream.getAudioTracks();
    /*
     * Bug #151: Safari does not use the audio track as input anymore if it gets removed from the mediaStream after construction.
     * Bug #159: Safari picks the first audio track if the MediaStream has more than one audio track.
     */
    audioStreamTracks.sort((a, b) => (a.id < b.id ? -1 : a.id > b.id ? 1 : 0));
    const filteredAudioStreamTracks = audioStreamTracks.slice(0, 1);
    const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));
    /*
     * Bug #151 & #159: The given mediaStream gets reconstructed before it gets passed to the native node which is why the accessor needs
     * to be overwritten as it would otherwise expose the reconstructed version.
     */
    Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', { value: mediaStream });
    return nativeMediaStreamAudioSourceNode;
};
//# sourceMappingURL=native-media-stream-audio-source-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-track-audio-source-node-factory.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-track-audio-source-node-factory.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeMediaStreamTrackAudioSourceNodeFactory: () => (/* binding */ createNativeMediaStreamTrackAudioSourceNodeFactory)
/* harmony export */ });
const createNativeMediaStreamTrackAudioSourceNodeFactory = (createInvalidStateError, isNativeOfflineAudioContext) => {
    return (nativeAudioContext, { mediaStreamTrack }) => {
        // Bug #121: Only Firefox does yet support the MediaStreamTrackAudioSourceNode.
        if (typeof nativeAudioContext.createMediaStreamTrackSource === 'function') {
            return nativeAudioContext.createMediaStreamTrackSource(mediaStreamTrack);
        }
        const mediaStream = new MediaStream([mediaStreamTrack]);
        const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(mediaStream);
        // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.
        if (mediaStreamTrack.kind !== 'audio') {
            throw createInvalidStateError();
        }
        // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.
        if (isNativeOfflineAudioContext(nativeAudioContext)) {
            throw new TypeError();
        }
        return nativeMediaStreamAudioSourceNode;
    };
};
//# sourceMappingURL=native-media-stream-track-audio-source-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-offline-audio-context-constructor.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-offline-audio-context-constructor.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeOfflineAudioContextConstructor: () => (/* binding */ createNativeOfflineAudioContextConstructor)
/* harmony export */ });
const createNativeOfflineAudioContextConstructor = (window) => {
    if (window === null) {
        return null;
    }
    if (window.hasOwnProperty('OfflineAudioContext')) {
        return window.OfflineAudioContext;
    }
    return window.hasOwnProperty('webkitOfflineAudioContext') ? window.webkitOfflineAudioContext : null;
};
//# sourceMappingURL=native-offline-audio-context-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-oscillator-node-factory.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-oscillator-node-factory.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeOscillatorNodeFactory: () => (/* binding */ createNativeOscillatorNodeFactory)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-audio-param-value */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js");
/* harmony import */ var _helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-option */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js");
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");
/* harmony import */ var _helpers_wrap_audio_scheduled_source_node_start_method_negative_parameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js");
/* harmony import */ var _helpers_wrap_audio_scheduled_source_node_stop_method_negative_parameters__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js");





const createNativeOscillatorNodeFactory = (addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {
    return (nativeContext, options) => {
        const nativeOscillatorNode = nativeContext.createOscillator();
        (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_2__.assignNativeAudioNodeOptions)(nativeOscillatorNode, options);
        (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativeOscillatorNode, options, 'detune');
        (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativeOscillatorNode, options, 'frequency');
        if (options.periodicWave !== undefined) {
            nativeOscillatorNode.setPeriodicWave(options.periodicWave);
        }
        else {
            (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOption)(nativeOscillatorNode, options, 'type');
        }
        // Bug #44: Only Chrome & Edge throw a RangeError yet.
        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {
            (0,_helpers_wrap_audio_scheduled_source_node_start_method_negative_parameters__WEBPACK_IMPORTED_MODULE_3__.wrapAudioScheduledSourceNodeStartMethodNegativeParameters)(nativeOscillatorNode);
        }
        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.
        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {
            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);
        }
        // Bug #44: Only Firefox does not throw a RangeError yet.
        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {
            (0,_helpers_wrap_audio_scheduled_source_node_stop_method_negative_parameters__WEBPACK_IMPORTED_MODULE_4__.wrapAudioScheduledSourceNodeStopMethodNegativeParameters)(nativeOscillatorNode);
        }
        // Bug #175: Safari will not fire an ended event if the OscillatorNode is unconnected.
        addSilentConnection(nativeContext, nativeOscillatorNode);
        return nativeOscillatorNode;
    };
};
//# sourceMappingURL=native-oscillator-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-factory.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-factory.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativePannerNodeFactory: () => (/* binding */ createNativePannerNodeFactory)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-audio-param-value */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js");
/* harmony import */ var _helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-option */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js");
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");



const createNativePannerNodeFactory = (createNativePannerNodeFaker) => {
    return (nativeContext, options) => {
        const nativePannerNode = nativeContext.createPanner();
        // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.
        if (nativePannerNode.orientationX === undefined) {
            return createNativePannerNodeFaker(nativeContext, options);
        }
        (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_2__.assignNativeAudioNodeOptions)(nativePannerNode, options);
        (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'orientationX');
        (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'orientationY');
        (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'orientationZ');
        (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'positionX');
        (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'positionY');
        (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'positionZ');
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOption)(nativePannerNode, options, 'coneInnerAngle');
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOption)(nativePannerNode, options, 'coneOuterAngle');
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOption)(nativePannerNode, options, 'coneOuterGain');
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOption)(nativePannerNode, options, 'distanceModel');
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOption)(nativePannerNode, options, 'maxDistance');
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOption)(nativePannerNode, options, 'panningModel');
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOption)(nativePannerNode, options, 'refDistance');
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOption)(nativePannerNode, options, 'rolloffFactor');
        return nativePannerNode;
    };
};
//# sourceMappingURL=native-panner-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-faker-factory.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-faker-factory.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativePannerNodeFakerFactory: () => (/* binding */ createNativePannerNodeFakerFactory)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");
/* harmony import */ var _helpers_intercept_connections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/intercept-connections */ "./node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js");


const createNativePannerNodeFakerFactory = (connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections) => {
    return (nativeContext, { coneInnerAngle, coneOuterAngle, coneOuterGain, distanceModel, maxDistance, orientationX, orientationY, orientationZ, panningModel, positionX, positionY, positionZ, refDistance, rolloffFactor, ...audioNodeOptions }) => {
        const pannerNode = nativeContext.createPanner();
        // Bug #125: Safari does not throw an error yet.
        if (audioNodeOptions.channelCount > 2) {
            throw createNotSupportedError();
        }
        // Bug #126: Safari does not throw an error yet.
        if (audioNodeOptions.channelCountMode === 'max') {
            throw createNotSupportedError();
        }
        (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOptions)(pannerNode, audioNodeOptions);
        const SINGLE_CHANNEL_OPTIONS = {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'discrete'
        };
        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {
            ...SINGLE_CHANNEL_OPTIONS,
            channelInterpretation: 'speakers',
            numberOfInputs: 6
        });
        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });
        const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 1 });
        const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
        const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
        const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
        const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
        const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);
        const waveShaperNode = createNativeWaveShaperNode(nativeContext, {
            ...SINGLE_CHANNEL_OPTIONS,
            curve: new Float32Array([1, 1]),
            oversample: 'none'
        });
        let lastOrientation = [orientationX, orientationY, orientationZ];
        let lastPosition = [positionX, positionY, positionZ];
        const buffer = new Float32Array(1);
        // tslint:disable-next-line:deprecation
        scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {
            const orientation = [
                getFirstSample(inputBuffer, buffer, 0),
                getFirstSample(inputBuffer, buffer, 1),
                getFirstSample(inputBuffer, buffer, 2)
            ];
            if (orientation.some((value, index) => value !== lastOrientation[index])) {
                pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation
                lastOrientation = orientation;
            }
            const positon = [
                getFirstSample(inputBuffer, buffer, 3),
                getFirstSample(inputBuffer, buffer, 4),
                getFirstSample(inputBuffer, buffer, 5)
            ];
            if (positon.some((value, index) => value !== lastPosition[index])) {
                pannerNode.setPosition(...positon); // tslint:disable-line:deprecation
                lastPosition = positon;
            }
        };
        Object.defineProperty(orientationYGainNode.gain, 'defaultValue', { get: () => 0 });
        Object.defineProperty(orientationZGainNode.gain, 'defaultValue', { get: () => 0 });
        Object.defineProperty(positionXGainNode.gain, 'defaultValue', { get: () => 0 });
        Object.defineProperty(positionYGainNode.gain, 'defaultValue', { get: () => 0 });
        Object.defineProperty(positionZGainNode.gain, 'defaultValue', { get: () => 0 });
        const nativePannerNodeFaker = {
            get bufferSize() {
                return undefined;
            },
            get channelCount() {
                return pannerNode.channelCount;
            },
            set channelCount(value) {
                // Bug #125: Safari does not throw an error yet.
                if (value > 2) {
                    throw createNotSupportedError();
                }
                inputGainNode.channelCount = value;
                pannerNode.channelCount = value;
            },
            get channelCountMode() {
                return pannerNode.channelCountMode;
            },
            set channelCountMode(value) {
                // Bug #126: Safari does not throw an error yet.
                if (value === 'max') {
                    throw createNotSupportedError();
                }
                inputGainNode.channelCountMode = value;
                pannerNode.channelCountMode = value;
            },
            get channelInterpretation() {
                return pannerNode.channelInterpretation;
            },
            set channelInterpretation(value) {
                inputGainNode.channelInterpretation = value;
                pannerNode.channelInterpretation = value;
            },
            get coneInnerAngle() {
                return pannerNode.coneInnerAngle;
            },
            set coneInnerAngle(value) {
                pannerNode.coneInnerAngle = value;
            },
            get coneOuterAngle() {
                return pannerNode.coneOuterAngle;
            },
            set coneOuterAngle(value) {
                pannerNode.coneOuterAngle = value;
            },
            get coneOuterGain() {
                return pannerNode.coneOuterGain;
            },
            set coneOuterGain(value) {
                // Bug #127: Safari does not throw an InvalidStateError yet.
                if (value < 0 || value > 1) {
                    throw createInvalidStateError();
                }
                pannerNode.coneOuterGain = value;
            },
            get context() {
                return pannerNode.context;
            },
            get distanceModel() {
                return pannerNode.distanceModel;
            },
            set distanceModel(value) {
                pannerNode.distanceModel = value;
            },
            get inputs() {
                return [inputGainNode];
            },
            get maxDistance() {
                return pannerNode.maxDistance;
            },
            set maxDistance(value) {
                // Bug #128: Safari does not throw an error yet.
                if (value < 0) {
                    throw new RangeError();
                }
                pannerNode.maxDistance = value;
            },
            get numberOfInputs() {
                return pannerNode.numberOfInputs;
            },
            get numberOfOutputs() {
                return pannerNode.numberOfOutputs;
            },
            get orientationX() {
                return orientationXGainNode.gain;
            },
            get orientationY() {
                return orientationYGainNode.gain;
            },
            get orientationZ() {
                return orientationZGainNode.gain;
            },
            get panningModel() {
                return pannerNode.panningModel;
            },
            set panningModel(value) {
                pannerNode.panningModel = value;
            },
            get positionX() {
                return positionXGainNode.gain;
            },
            get positionY() {
                return positionYGainNode.gain;
            },
            get positionZ() {
                return positionZGainNode.gain;
            },
            get refDistance() {
                return pannerNode.refDistance;
            },
            set refDistance(value) {
                // Bug #129: Safari does not throw an error yet.
                if (value < 0) {
                    throw new RangeError();
                }
                pannerNode.refDistance = value;
            },
            get rolloffFactor() {
                return pannerNode.rolloffFactor;
            },
            set rolloffFactor(value) {
                // Bug #130: Safari does not throw an error yet.
                if (value < 0) {
                    throw new RangeError();
                }
                pannerNode.rolloffFactor = value;
            },
            addEventListener(...args) {
                return inputGainNode.addEventListener(args[0], args[1], args[2]);
            },
            dispatchEvent(...args) {
                return inputGainNode.dispatchEvent(args[0]);
            },
            removeEventListener(...args) {
                return inputGainNode.removeEventListener(args[0], args[1], args[2]);
            }
        };
        if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {
            nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;
        }
        if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {
            nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;
        }
        if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {
            nativePannerNodeFaker.coneOuterGain = coneOuterGain;
        }
        if (distanceModel !== nativePannerNodeFaker.distanceModel) {
            nativePannerNodeFaker.distanceModel = distanceModel;
        }
        if (maxDistance !== nativePannerNodeFaker.maxDistance) {
            nativePannerNodeFaker.maxDistance = maxDistance;
        }
        if (orientationX !== nativePannerNodeFaker.orientationX.value) {
            nativePannerNodeFaker.orientationX.value = orientationX;
        }
        if (orientationY !== nativePannerNodeFaker.orientationY.value) {
            nativePannerNodeFaker.orientationY.value = orientationY;
        }
        if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {
            nativePannerNodeFaker.orientationZ.value = orientationZ;
        }
        if (panningModel !== nativePannerNodeFaker.panningModel) {
            nativePannerNodeFaker.panningModel = panningModel;
        }
        if (positionX !== nativePannerNodeFaker.positionX.value) {
            nativePannerNodeFaker.positionX.value = positionX;
        }
        if (positionY !== nativePannerNodeFaker.positionY.value) {
            nativePannerNodeFaker.positionY.value = positionY;
        }
        if (positionZ !== nativePannerNodeFaker.positionZ.value) {
            nativePannerNodeFaker.positionZ.value = positionZ;
        }
        if (refDistance !== nativePannerNodeFaker.refDistance) {
            nativePannerNodeFaker.refDistance = refDistance;
        }
        if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {
            nativePannerNodeFaker.rolloffFactor = rolloffFactor;
        }
        if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {
            pannerNode.setOrientation(...lastOrientation); // tslint:disable-line:deprecation
        }
        if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {
            pannerNode.setPosition(...lastPosition); // tslint:disable-line:deprecation
        }
        const whenConnected = () => {
            inputGainNode.connect(pannerNode);
            // Bug #119: Safari does not fully support the WaveShaperNode.
            connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);
            waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);
            waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);
            waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);
            waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);
            waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);
            waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);
            channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);
        };
        const whenDisconnected = () => {
            inputGainNode.disconnect(pannerNode);
            // Bug #119: Safari does not fully support the WaveShaperNode.
            disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);
            waveShaperNode.disconnect(orientationXGainNode);
            orientationXGainNode.disconnect(channelMergerNode);
            waveShaperNode.disconnect(orientationYGainNode);
            orientationYGainNode.disconnect(channelMergerNode);
            waveShaperNode.disconnect(orientationZGainNode);
            orientationZGainNode.disconnect(channelMergerNode);
            waveShaperNode.disconnect(positionXGainNode);
            positionXGainNode.disconnect(channelMergerNode);
            waveShaperNode.disconnect(positionYGainNode);
            positionYGainNode.disconnect(channelMergerNode);
            waveShaperNode.disconnect(positionZGainNode);
            positionZGainNode.disconnect(channelMergerNode);
            channelMergerNode.disconnect(scriptProcessorNode);
            scriptProcessorNode.disconnect(nativeContext.destination);
        };
        return monitorConnections((0,_helpers_intercept_connections__WEBPACK_IMPORTED_MODULE_1__.interceptConnections)(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);
    };
};
//# sourceMappingURL=native-panner-node-faker-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-periodic-wave-factory.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-periodic-wave-factory.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativePeriodicWaveFactory: () => (/* binding */ createNativePeriodicWaveFactory)
/* harmony export */ });
const createNativePeriodicWaveFactory = (createIndexSizeError) => {
    return (nativeContext, { disableNormalization, imag, real }) => {
        // Bug #180: Safari does not allow to use ordinary arrays.
        const convertedImag = imag instanceof Float32Array ? imag : new Float32Array(imag);
        const convertedReal = real instanceof Float32Array ? real : new Float32Array(real);
        const nativePeriodicWave = nativeContext.createPeriodicWave(convertedReal, convertedImag, { disableNormalization });
        // Bug #181: Safari does not throw an IndexSizeError so far if the given arrays have less than two values.
        if (Array.from(imag).length < 2) {
            throw createIndexSizeError();
        }
        return nativePeriodicWave;
    };
};
//# sourceMappingURL=native-periodic-wave-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-script-processor-node.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-script-processor-node.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeScriptProcessorNode: () => (/* binding */ createNativeScriptProcessorNode)
/* harmony export */ });
const createNativeScriptProcessorNode = (nativeContext, bufferSize, numberOfInputChannels, numberOfOutputChannels) => {
    return nativeContext.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels); // tslint:disable-line deprecation
};
//# sourceMappingURL=native-script-processor-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-factory.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-factory.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeStereoPannerNodeFactory: () => (/* binding */ createNativeStereoPannerNodeFactory)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-audio-param-value */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js");
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");


const createNativeStereoPannerNodeFactory = (createNativeStereoPannerNodeFaker, createNotSupportedError) => {
    return (nativeContext, options) => {
        const channelCountMode = options.channelCountMode;
        /*
         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari
         * which supports it and therefore it can't be supported at all.
         */
        if (channelCountMode === 'clamped-max') {
            throw createNotSupportedError();
        }
        // Bug #105: Safari does not support the StereoPannerNode.
        if (nativeContext.createStereoPanner === undefined) {
            return createNativeStereoPannerNodeFaker(nativeContext, options);
        }
        const nativeStereoPannerNode = nativeContext.createStereoPanner();
        (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOptions)(nativeStereoPannerNode, options);
        (0,_helpers_assign_native_audio_node_audio_param_value__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeAudioParamValue)(nativeStereoPannerNode, options, 'pan');
        /*
         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari
         * which supports it and therefore it can't be supported at all.
         */
        Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {
            get: () => channelCountMode,
            set: (value) => {
                if (value !== channelCountMode) {
                    throw createNotSupportedError();
                }
            }
        });
        return nativeStereoPannerNode;
    };
};
//# sourceMappingURL=native-stereo-panner-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeStereoPannerNodeFakerFactory: () => (/* binding */ createNativeStereoPannerNodeFakerFactory)
/* harmony export */ });
/* harmony import */ var _helpers_intercept_connections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/intercept-connections */ "./node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js");

const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections) => {
    // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.
    const CURVE_SIZE = 16385;
    const DC_CURVE = new Float32Array([1, 1]);
    const HALF_PI = Math.PI / 2;
    const SINGLE_CHANNEL_OPTIONS = { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete' };
    const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS, oversample: 'none' };
    const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {
        const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);
        const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);
        for (let i = 0; i < CURVE_SIZE; i += 1) {
            const x = (i / (CURVE_SIZE - 1)) * HALF_PI;
            leftWaveShaperCurve[i] = Math.cos(x);
            rightWaveShaperCurve[i] = Math.sin(x);
        }
        const leftGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
        // Bug #119: Safari does not fully support the WaveShaperNode.
        const leftWaveShaperNode = (createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftWaveShaperCurve }));
        // Bug #119: Safari does not fully support the WaveShaperNode.
        const panWaveShaperNode = (createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE }));
        const rightGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
        // Bug #119: Safari does not fully support the WaveShaperNode.
        const rightWaveShaperNode = (createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightWaveShaperCurve }));
        return {
            connectGraph() {
                inputGainNode.connect(leftGainNode);
                inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);
                inputGainNode.connect(rightGainNode);
                panWaveShaperNode.connect(panGainNode);
                panGainNode.connect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);
                panGainNode.connect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);
                leftWaveShaperNode.connect(leftGainNode.gain);
                rightWaveShaperNode.connect(rightGainNode.gain);
                leftGainNode.connect(channelMergerNode, 0, 0);
                rightGainNode.connect(channelMergerNode, 0, 1);
            },
            disconnectGraph() {
                inputGainNode.disconnect(leftGainNode);
                inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);
                inputGainNode.disconnect(rightGainNode);
                panWaveShaperNode.disconnect(panGainNode);
                panGainNode.disconnect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);
                panGainNode.disconnect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);
                leftWaveShaperNode.disconnect(leftGainNode.gain);
                rightWaveShaperNode.disconnect(rightGainNode.gain);
                leftGainNode.disconnect(channelMergerNode, 0, 0);
                rightGainNode.disconnect(channelMergerNode, 0, 1);
            }
        };
    };
    const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {
        const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
        const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
        const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
        const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
        const centerIndex = Math.floor(CURVE_SIZE / 2);
        for (let i = 0; i < CURVE_SIZE; i += 1) {
            if (i > centerIndex) {
                const x = ((i - centerIndex) / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;
                leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);
                leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);
                rightInputForLeftOutputWaveShaperCurve[i] = 0;
                rightInputForRightOutputWaveShaperCurve[i] = 1;
            }
            else {
                const x = (i / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;
                leftInputForLeftOutputWaveShaperCurve[i] = 1;
                leftInputForRightOutputWaveShaperCurve[i] = 0;
                rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);
                rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);
            }
        }
        const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {
            channelCount: 2,
            channelCountMode: 'explicit',
            channelInterpretation: 'discrete',
            numberOfOutputs: 2
        });
        const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
        // Bug #119: Safari does not fully support the WaveShaperNode.
        const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {
            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
            curve: leftInputForLeftOutputWaveShaperCurve
        });
        const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
        // Bug #119: Safari does not fully support the WaveShaperNode.
        const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {
            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
            curve: leftInputForRightOutputWaveShaperCurve
        });
        // Bug #119: Safari does not fully support the WaveShaperNode.
        const panWaveShaperNode = (createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE }));
        const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
        // Bug #119: Safari does not fully support the WaveShaperNode.
        const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {
            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
            curve: rightInputForLeftOutputWaveShaperCurve
        });
        const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
        // Bug #119: Safari does not fully support the WaveShaperNode.
        const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {
            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
            curve: rightInputForRightOutputWaveShaperCurve
        });
        return {
            connectGraph() {
                inputGainNode.connect(channelSplitterNode);
                inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);
                channelSplitterNode.connect(leftInputForLeftOutputGainNode, 0);
                channelSplitterNode.connect(leftInputForRightOutputGainNode, 0);
                channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);
                channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);
                panWaveShaperNode.connect(panGainNode);
                panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs === undefined
                    ? leftInputForLeftOutputWaveShaperNode
                    : leftInputForLeftOutputWaveShaperNode.inputs[0]);
                panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs === undefined
                    ? leftInputForRightOutputWaveShaperNode
                    : leftInputForRightOutputWaveShaperNode.inputs[0]);
                panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs === undefined
                    ? rightInputForLeftOutputWaveShaperNode
                    : rightInputForLeftOutputWaveShaperNode.inputs[0]);
                panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs === undefined
                    ? rightInputForRightOutputWaveShaperNode
                    : rightInputForRightOutputWaveShaperNode.inputs[0]);
                leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);
                leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);
                rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);
                rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);
                leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);
                rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);
                leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);
                rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);
            },
            disconnectGraph() {
                inputGainNode.disconnect(channelSplitterNode);
                inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);
                channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 0);
                channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 0);
                channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);
                channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);
                panWaveShaperNode.disconnect(panGainNode);
                panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs === undefined
                    ? leftInputForLeftOutputWaveShaperNode
                    : leftInputForLeftOutputWaveShaperNode.inputs[0]);
                panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs === undefined
                    ? leftInputForRightOutputWaveShaperNode
                    : leftInputForRightOutputWaveShaperNode.inputs[0]);
                panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs === undefined
                    ? rightInputForLeftOutputWaveShaperNode
                    : rightInputForLeftOutputWaveShaperNode.inputs[0]);
                panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs === undefined
                    ? rightInputForRightOutputWaveShaperNode
                    : rightInputForRightOutputWaveShaperNode.inputs[0]);
                leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);
                leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);
                rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);
                rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);
                leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);
                rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);
                leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);
                rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);
            }
        };
    };
    const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {
        if (channelCount === 1) {
            return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);
        }
        if (channelCount === 2) {
            return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);
        }
        throw createNotSupportedError();
    };
    return (nativeContext, { channelCount, channelCountMode, pan, ...audioNodeOptions }) => {
        if (channelCountMode === 'max') {
            throw createNotSupportedError();
        }
        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {
            ...audioNodeOptions,
            channelCount: 1,
            channelCountMode,
            numberOfInputs: 2
        });
        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, channelCount, channelCountMode, gain: 1 });
        const panGainNode = createNativeGainNode(nativeContext, {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'discrete',
            gain: pan
        });
        let { connectGraph, disconnectGraph } = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);
        Object.defineProperty(panGainNode.gain, 'defaultValue', { get: () => 0 });
        Object.defineProperty(panGainNode.gain, 'maxValue', { get: () => 1 });
        Object.defineProperty(panGainNode.gain, 'minValue', { get: () => -1 });
        const nativeStereoPannerNodeFakerFactory = {
            get bufferSize() {
                return undefined;
            },
            get channelCount() {
                return inputGainNode.channelCount;
            },
            set channelCount(value) {
                if (inputGainNode.channelCount !== value) {
                    if (isConnected) {
                        disconnectGraph();
                    }
                    ({ connectGraph, disconnectGraph } = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode));
                    if (isConnected) {
                        connectGraph();
                    }
                }
                inputGainNode.channelCount = value;
            },
            get channelCountMode() {
                return inputGainNode.channelCountMode;
            },
            set channelCountMode(value) {
                if (value === 'clamped-max' || value === 'max') {
                    throw createNotSupportedError();
                }
                inputGainNode.channelCountMode = value;
            },
            get channelInterpretation() {
                return inputGainNode.channelInterpretation;
            },
            set channelInterpretation(value) {
                inputGainNode.channelInterpretation = value;
            },
            get context() {
                return inputGainNode.context;
            },
            get inputs() {
                return [inputGainNode];
            },
            get numberOfInputs() {
                return inputGainNode.numberOfInputs;
            },
            get numberOfOutputs() {
                return inputGainNode.numberOfOutputs;
            },
            get pan() {
                return panGainNode.gain;
            },
            addEventListener(...args) {
                return inputGainNode.addEventListener(args[0], args[1], args[2]);
            },
            dispatchEvent(...args) {
                return inputGainNode.dispatchEvent(args[0]);
            },
            removeEventListener(...args) {
                return inputGainNode.removeEventListener(args[0], args[1], args[2]);
            }
        };
        let isConnected = false;
        const whenConnected = () => {
            connectGraph();
            isConnected = true;
        };
        const whenDisconnected = () => {
            disconnectGraph();
            isConnected = false;
        };
        return monitorConnections((0,_helpers_intercept_connections__WEBPACK_IMPORTED_MODULE_0__.interceptConnections)(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);
    };
};
//# sourceMappingURL=native-stereo-panner-node-faker-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-factory.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-factory.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeWaveShaperNodeFactory: () => (/* binding */ createNativeWaveShaperNodeFactory)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-option */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js");
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");


const createNativeWaveShaperNodeFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors) => {
    return (nativeContext, options) => {
        const nativeWaveShaperNode = nativeContext.createWaveShaper();
        /*
         * Bug #119: Safari does not correctly map the values.
         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of
         * the webkitAudioContext is used as a workaround here. Testing for the automationRate property is necessary because this workaround
         * isn't necessary anymore since v14.0.2 of Safari.
         */
        if (nativeAudioContextConstructor !== null &&
            nativeAudioContextConstructor.name === 'webkitAudioContext' &&
            nativeContext.createGain().gain.automationRate === undefined) {
            return createNativeWaveShaperNodeFaker(nativeContext, options);
        }
        (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_1__.assignNativeAudioNodeOptions)(nativeWaveShaperNode, options);
        const curve = options.curve === null || options.curve instanceof Float32Array ? options.curve : new Float32Array(options.curve);
        // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.
        if (curve !== null && curve.length < 2) {
            throw createInvalidStateError();
        }
        // Only values of type Float32Array can be assigned to the curve property.
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOption)(nativeWaveShaperNode, { curve }, 'curve');
        (0,_helpers_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOption)(nativeWaveShaperNode, options, 'oversample');
        let disconnectNativeAudioBufferSourceNode = null;
        let isConnected = false;
        overwriteAccessors(nativeWaveShaperNode, 'curve', (get) => () => get.call(nativeWaveShaperNode), (set) => (value) => {
            set.call(nativeWaveShaperNode, value);
            if (isConnected) {
                if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {
                    disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);
                }
                else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {
                    disconnectNativeAudioBufferSourceNode();
                    disconnectNativeAudioBufferSourceNode = null;
                }
            }
            return value;
        });
        const whenConnected = () => {
            isConnected = true;
            if (isDCCurve(nativeWaveShaperNode.curve)) {
                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);
            }
        };
        const whenDisconnected = () => {
            isConnected = false;
            if (disconnectNativeAudioBufferSourceNode !== null) {
                disconnectNativeAudioBufferSourceNode();
                disconnectNativeAudioBufferSourceNode = null;
            }
        };
        return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);
    };
};
//# sourceMappingURL=native-wave-shaper-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNativeWaveShaperNodeFakerFactory: () => (/* binding */ createNativeWaveShaperNodeFakerFactory)
/* harmony export */ });
/* harmony import */ var _helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/assign-native-audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js");
/* harmony import */ var _helpers_intercept_connections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/intercept-connections */ "./node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js");


const createNativeWaveShaperNodeFakerFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections) => {
    return (nativeContext, { curve, oversample, ...audioNodeOptions }) => {
        const negativeWaveShaperNode = nativeContext.createWaveShaper();
        const positiveWaveShaperNode = nativeContext.createWaveShaper();
        (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOptions)(negativeWaveShaperNode, audioNodeOptions);
        (0,_helpers_assign_native_audio_node_options__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOptions)(positiveWaveShaperNode, audioNodeOptions);
        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });
        const invertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });
        const outputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });
        const revertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });
        let disconnectNativeAudioBufferSourceNode = null;
        let isConnected = false;
        let unmodifiedCurve = null;
        const nativeWaveShaperNodeFaker = {
            get bufferSize() {
                return undefined;
            },
            get channelCount() {
                return negativeWaveShaperNode.channelCount;
            },
            set channelCount(value) {
                inputGainNode.channelCount = value;
                invertGainNode.channelCount = value;
                negativeWaveShaperNode.channelCount = value;
                outputGainNode.channelCount = value;
                positiveWaveShaperNode.channelCount = value;
                revertGainNode.channelCount = value;
            },
            get channelCountMode() {
                return negativeWaveShaperNode.channelCountMode;
            },
            set channelCountMode(value) {
                inputGainNode.channelCountMode = value;
                invertGainNode.channelCountMode = value;
                negativeWaveShaperNode.channelCountMode = value;
                outputGainNode.channelCountMode = value;
                positiveWaveShaperNode.channelCountMode = value;
                revertGainNode.channelCountMode = value;
            },
            get channelInterpretation() {
                return negativeWaveShaperNode.channelInterpretation;
            },
            set channelInterpretation(value) {
                inputGainNode.channelInterpretation = value;
                invertGainNode.channelInterpretation = value;
                negativeWaveShaperNode.channelInterpretation = value;
                outputGainNode.channelInterpretation = value;
                positiveWaveShaperNode.channelInterpretation = value;
                revertGainNode.channelInterpretation = value;
            },
            get context() {
                return negativeWaveShaperNode.context;
            },
            get curve() {
                return unmodifiedCurve;
            },
            set curve(value) {
                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.
                if (value !== null && value.length < 2) {
                    throw createInvalidStateError();
                }
                if (value === null) {
                    negativeWaveShaperNode.curve = value;
                    positiveWaveShaperNode.curve = value;
                }
                else {
                    const curveLength = value.length;
                    const negativeCurve = new Float32Array(curveLength + 2 - (curveLength % 2));
                    const positiveCurve = new Float32Array(curveLength + 2 - (curveLength % 2));
                    negativeCurve[0] = value[0];
                    positiveCurve[0] = -value[curveLength - 1];
                    const length = Math.ceil((curveLength + 1) / 2);
                    const centerIndex = (curveLength + 1) / 2 - 1;
                    for (let i = 1; i < length; i += 1) {
                        const theoreticIndex = (i / length) * centerIndex;
                        const lowerIndex = Math.floor(theoreticIndex);
                        const upperIndex = Math.ceil(theoreticIndex);
                        negativeCurve[i] =
                            lowerIndex === upperIndex
                                ? value[lowerIndex]
                                : (1 - (theoreticIndex - lowerIndex)) * value[lowerIndex] +
                                    (1 - (upperIndex - theoreticIndex)) * value[upperIndex];
                        positiveCurve[i] =
                            lowerIndex === upperIndex
                                ? -value[curveLength - 1 - lowerIndex]
                                : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex]) -
                                    (1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex];
                    }
                    negativeCurve[length] = curveLength % 2 === 1 ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;
                    negativeWaveShaperNode.curve = negativeCurve;
                    positiveWaveShaperNode.curve = positiveCurve;
                }
                unmodifiedCurve = value;
                if (isConnected) {
                    if (isDCCurve(unmodifiedCurve) && disconnectNativeAudioBufferSourceNode === null) {
                        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);
                    }
                    else if (disconnectNativeAudioBufferSourceNode !== null) {
                        disconnectNativeAudioBufferSourceNode();
                        disconnectNativeAudioBufferSourceNode = null;
                    }
                }
            },
            get inputs() {
                return [inputGainNode];
            },
            get numberOfInputs() {
                return negativeWaveShaperNode.numberOfInputs;
            },
            get numberOfOutputs() {
                return negativeWaveShaperNode.numberOfOutputs;
            },
            get oversample() {
                return negativeWaveShaperNode.oversample;
            },
            set oversample(value) {
                negativeWaveShaperNode.oversample = value;
                positiveWaveShaperNode.oversample = value;
            },
            addEventListener(...args) {
                return inputGainNode.addEventListener(args[0], args[1], args[2]);
            },
            dispatchEvent(...args) {
                return inputGainNode.dispatchEvent(args[0]);
            },
            removeEventListener(...args) {
                return inputGainNode.removeEventListener(args[0], args[1], args[2]);
            }
        };
        if (curve !== null) {
            // Only values of type Float32Array can be assigned to the curve property.
            nativeWaveShaperNodeFaker.curve = curve instanceof Float32Array ? curve : new Float32Array(curve);
        }
        if (oversample !== nativeWaveShaperNodeFaker.oversample) {
            nativeWaveShaperNodeFaker.oversample = oversample;
        }
        const whenConnected = () => {
            inputGainNode.connect(negativeWaveShaperNode).connect(outputGainNode);
            inputGainNode.connect(invertGainNode).connect(positiveWaveShaperNode).connect(revertGainNode).connect(outputGainNode);
            isConnected = true;
            if (isDCCurve(unmodifiedCurve)) {
                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);
            }
        };
        const whenDisconnected = () => {
            inputGainNode.disconnect(negativeWaveShaperNode);
            negativeWaveShaperNode.disconnect(outputGainNode);
            inputGainNode.disconnect(invertGainNode);
            invertGainNode.disconnect(positiveWaveShaperNode);
            positiveWaveShaperNode.disconnect(revertGainNode);
            revertGainNode.disconnect(outputGainNode);
            isConnected = false;
            if (disconnectNativeAudioBufferSourceNode !== null) {
                disconnectNativeAudioBufferSourceNode();
                disconnectNativeAudioBufferSourceNode = null;
            }
        };
        return monitorConnections((0,_helpers_intercept_connections__WEBPACK_IMPORTED_MODULE_1__.interceptConnections)(nativeWaveShaperNodeFaker, outputGainNode), whenConnected, whenDisconnected);
    };
};
//# sourceMappingURL=native-wave-shaper-node-faker-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/not-supported-error.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/not-supported-error.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNotSupportedError: () => (/* binding */ createNotSupportedError)
/* harmony export */ });
const createNotSupportedError = () => new DOMException('', 'NotSupportedError');
//# sourceMappingURL=not-supported-error.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/offline-audio-context-constructor.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/offline-audio-context-constructor.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createOfflineAudioContextConstructor: () => (/* binding */ createOfflineAudioContextConstructor)
/* harmony export */ });
/* harmony import */ var _helpers_deactivate_audio_graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/deactivate-audio-graph */ "./node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js");
/* harmony import */ var _helpers_test_promise_support__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/test-promise-support */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js");


const DEFAULT_OPTIONS = {
    numberOfChannels: 1
};
const createOfflineAudioContextConstructor = (baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering) => {
    return class OfflineAudioContext extends baseAudioContextConstructor {
        constructor(a, b, c) {
            let options;
            if (typeof a === 'number' && b !== undefined && c !== undefined) {
                options = { length: b, numberOfChannels: a, sampleRate: c };
            }
            else if (typeof a === 'object') {
                options = a;
            }
            else {
                throw new Error('The given parameters are not valid.');
            }
            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };
            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);
            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.
            if (!cacheTestResult(_helpers_test_promise_support__WEBPACK_IMPORTED_MODULE_1__.testPromiseSupport, () => (0,_helpers_test_promise_support__WEBPACK_IMPORTED_MODULE_1__.testPromiseSupport)(nativeOfflineAudioContext))) {
                nativeOfflineAudioContext.addEventListener('statechange', (() => {
                    let i = 0;
                    const delayStateChangeEvent = (event) => {
                        if (this._state === 'running') {
                            if (i > 0) {
                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);
                                event.stopImmediatePropagation();
                                this._waitForThePromiseToSettle(event);
                            }
                            else {
                                i += 1;
                            }
                        }
                    };
                    return delayStateChangeEvent;
                })());
            }
            super(nativeOfflineAudioContext, numberOfChannels);
            this._length = length;
            this._nativeOfflineAudioContext = nativeOfflineAudioContext;
            this._state = null;
        }
        get length() {
            // Bug #17: Safari does not yet expose the length.
            if (this._nativeOfflineAudioContext.length === undefined) {
                return this._length;
            }
            return this._nativeOfflineAudioContext.length;
        }
        get state() {
            return this._state === null ? this._nativeOfflineAudioContext.state : this._state;
        }
        startRendering() {
            /*
             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore
             * the state of the nativeOfflineAudioContext might no transition to running immediately.
             */
            if (this._state === 'running') {
                return Promise.reject(createInvalidStateError());
            }
            this._state = 'running';
            return startRendering(this.destination, this._nativeOfflineAudioContext).finally(() => {
                this._state = null;
                (0,_helpers_deactivate_audio_graph__WEBPACK_IMPORTED_MODULE_0__.deactivateAudioGraph)(this);
            });
        }
        _waitForThePromiseToSettle(event) {
            if (this._state === null) {
                this._nativeOfflineAudioContext.dispatchEvent(event);
            }
            else {
                setTimeout(() => this._waitForThePromiseToSettle(event));
            }
        }
    };
};
//# sourceMappingURL=offline-audio-context-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-constructor.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-constructor.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createOscillatorNodeConstructor: () => (/* binding */ createOscillatorNodeConstructor)
/* harmony export */ });
/* harmony import */ var _helpers_is_active_audio_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/is-active-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js");
/* harmony import */ var _helpers_set_internal_state_to_active__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/set-internal-state-to-active */ "./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js");
/* harmony import */ var _helpers_set_internal_state_to_passive__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/set-internal-state-to-passive */ "./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js");



const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max', // This attribute has no effect for nodes with no inputs.
    channelInterpretation: 'speakers', // This attribute has no effect for nodes with no inputs.
    detune: 0,
    frequency: 440,
    periodicWave: undefined,
    type: 'sine'
};
const createOscillatorNodeConstructor = (audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {
    return class OscillatorNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
            const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const oscillatorNodeRenderer = (isOffline ? createOscillatorNodeRenderer() : null);
            const nyquist = context.sampleRate / 2;
            super(context, false, nativeOscillatorNode, oscillatorNodeRenderer);
            // Bug #81: Firefox & Safari do not export the correct values for maxValue and minValue.
            this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600);
            // Bug #76: Safari does not export the correct values for maxValue and minValue.
            this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);
            this._nativeOscillatorNode = nativeOscillatorNode;
            this._onended = null;
            this._oscillatorNodeRenderer = oscillatorNodeRenderer;
            if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {
                this._oscillatorNodeRenderer.periodicWave =
                    mergedOptions.periodicWave;
            }
        }
        get detune() {
            return this._detune;
        }
        get frequency() {
            return this._frequency;
        }
        get onended() {
            return this._onended;
        }
        set onended(value) {
            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
            this._nativeOscillatorNode.onended = wrappedListener;
            const nativeOnEnded = this._nativeOscillatorNode.onended;
            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;
        }
        get type() {
            return this._nativeOscillatorNode.type;
        }
        set type(value) {
            this._nativeOscillatorNode.type = value;
            if (this._oscillatorNodeRenderer !== null) {
                this._oscillatorNodeRenderer.periodicWave = null;
            }
        }
        setPeriodicWave(periodicWave) {
            this._nativeOscillatorNode.setPeriodicWave(periodicWave);
            if (this._oscillatorNodeRenderer !== null) {
                this._oscillatorNodeRenderer.periodicWave = periodicWave;
            }
        }
        start(when = 0) {
            this._nativeOscillatorNode.start(when);
            if (this._oscillatorNodeRenderer !== null) {
                this._oscillatorNodeRenderer.start = when;
            }
            if (this.context.state !== 'closed') {
                (0,_helpers_set_internal_state_to_active__WEBPACK_IMPORTED_MODULE_1__.setInternalStateToActive)(this);
                const resetInternalStateToPassive = () => {
                    this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive);
                    if ((0,_helpers_is_active_audio_node__WEBPACK_IMPORTED_MODULE_0__.isActiveAudioNode)(this)) {
                        (0,_helpers_set_internal_state_to_passive__WEBPACK_IMPORTED_MODULE_2__.setInternalStateToPassive)(this);
                    }
                };
                this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);
            }
        }
        stop(when = 0) {
            this._nativeOscillatorNode.stop(when);
            if (this._oscillatorNodeRenderer !== null) {
                this._oscillatorNodeRenderer.stop = when;
            }
        }
    };
};
//# sourceMappingURL=oscillator-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createOscillatorNodeRendererFactory: () => (/* binding */ createOscillatorNodeRendererFactory)
/* harmony export */ });
/* harmony import */ var _helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/is-owned-by-context */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js");

const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
    return () => {
        const renderedNativeOscillatorNodes = new WeakMap();
        let periodicWave = null;
        let start = null;
        let stop = null;
        const createOscillatorNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeOscillatorNode = getNativeAudioNode(proxy);
            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeOscillatorNodeIsOwnedByContext = (0,_helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_0__.isOwnedByContext)(nativeOscillatorNode, nativeOfflineAudioContext);
            if (!nativeOscillatorNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeOscillatorNode.channelCount,
                    channelCountMode: nativeOscillatorNode.channelCountMode,
                    channelInterpretation: nativeOscillatorNode.channelInterpretation,
                    detune: nativeOscillatorNode.detune.value,
                    frequency: nativeOscillatorNode.frequency.value,
                    periodicWave: periodicWave === null ? undefined : periodicWave,
                    type: nativeOscillatorNode.type
                };
                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);
                if (start !== null) {
                    nativeOscillatorNode.start(start);
                }
                if (stop !== null) {
                    nativeOscillatorNode.stop(stop);
                }
            }
            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);
            if (!nativeOscillatorNodeIsOwnedByContext) {
                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);
                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);
            }
            else {
                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);
                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);
            return nativeOscillatorNode;
        };
        return {
            set periodicWave(value) {
                periodicWave = value;
            },
            set start(value) {
                start = value;
            },
            set stop(value) {
                stop = value;
            },
            render(proxy, nativeOfflineAudioContext) {
                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);
                if (renderedNativeOscillatorNode !== undefined) {
                    return Promise.resolve(renderedNativeOscillatorNode);
                }
                return createOscillatorNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
};
//# sourceMappingURL=oscillator-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/panner-node-constructor.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/panner-node-constructor.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createPannerNodeConstructor: () => (/* binding */ createPannerNodeConstructor)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./node_modules/standardized-audio-context/build/es2019/constants.js");

const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'clamped-max',
    channelInterpretation: 'speakers',
    coneInnerAngle: 360,
    coneOuterAngle: 360,
    coneOuterGain: 0,
    distanceModel: 'inverse',
    maxDistance: 10000,
    orientationX: 1,
    orientationY: 0,
    orientationZ: 0,
    panningModel: 'equalpower',
    positionX: 0,
    positionY: 0,
    positionZ: 0,
    refDistance: 1,
    rolloffFactor: 1
};
const createPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {
    return class PannerNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
            const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const pannerNodeRenderer = (isOffline ? createPannerNodeRenderer() : null);
            super(context, false, nativePannerNode, pannerNodeRenderer);
            this._nativePannerNode = nativePannerNode;
            // Bug #74: Safari does not export the correct values for maxValue and minValue.
            this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_POSITIVE_SINGLE_FLOAT, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_NEGATIVE_SINGLE_FLOAT);
            this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_POSITIVE_SINGLE_FLOAT, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_NEGATIVE_SINGLE_FLOAT);
            this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_POSITIVE_SINGLE_FLOAT, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_NEGATIVE_SINGLE_FLOAT);
            this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_POSITIVE_SINGLE_FLOAT, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_NEGATIVE_SINGLE_FLOAT);
            this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_POSITIVE_SINGLE_FLOAT, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_NEGATIVE_SINGLE_FLOAT);
            this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_POSITIVE_SINGLE_FLOAT, _constants__WEBPACK_IMPORTED_MODULE_0__.MOST_NEGATIVE_SINGLE_FLOAT);
            // @todo Determine a meaningful tail-time instead of just using one second.
            setAudioNodeTailTime(this, 1);
        }
        get coneInnerAngle() {
            return this._nativePannerNode.coneInnerAngle;
        }
        set coneInnerAngle(value) {
            this._nativePannerNode.coneInnerAngle = value;
        }
        get coneOuterAngle() {
            return this._nativePannerNode.coneOuterAngle;
        }
        set coneOuterAngle(value) {
            this._nativePannerNode.coneOuterAngle = value;
        }
        get coneOuterGain() {
            return this._nativePannerNode.coneOuterGain;
        }
        set coneOuterGain(value) {
            this._nativePannerNode.coneOuterGain = value;
        }
        get distanceModel() {
            return this._nativePannerNode.distanceModel;
        }
        set distanceModel(value) {
            this._nativePannerNode.distanceModel = value;
        }
        get maxDistance() {
            return this._nativePannerNode.maxDistance;
        }
        set maxDistance(value) {
            this._nativePannerNode.maxDistance = value;
        }
        get orientationX() {
            return this._orientationX;
        }
        get orientationY() {
            return this._orientationY;
        }
        get orientationZ() {
            return this._orientationZ;
        }
        get panningModel() {
            return this._nativePannerNode.panningModel;
        }
        set panningModel(value) {
            this._nativePannerNode.panningModel = value;
        }
        get positionX() {
            return this._positionX;
        }
        get positionY() {
            return this._positionY;
        }
        get positionZ() {
            return this._positionZ;
        }
        get refDistance() {
            return this._nativePannerNode.refDistance;
        }
        set refDistance(value) {
            this._nativePannerNode.refDistance = value;
        }
        get rolloffFactor() {
            return this._nativePannerNode.rolloffFactor;
        }
        set rolloffFactor(value) {
            this._nativePannerNode.rolloffFactor = value;
        }
    };
};
//# sourceMappingURL=panner-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createPannerNodeRendererFactory: () => (/* binding */ createPannerNodeRendererFactory)
/* harmony export */ });
/* harmony import */ var _guards_native_audio_node_faker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../guards/native-audio-node-faker */ "./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js");
/* harmony import */ var _helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/is-owned-by-context */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js");


const createPannerNodeRendererFactory = (connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {
    return () => {
        const renderedNativeAudioNodes = new WeakMap();
        let renderedBufferPromise = null;
        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeGainNode = null;
            let nativePannerNode = getNativeAudioNode(proxy);
            const commonAudioNodeOptions = {
                channelCount: nativePannerNode.channelCount,
                channelCountMode: nativePannerNode.channelCountMode,
                channelInterpretation: nativePannerNode.channelInterpretation
            };
            const commonNativePannerNodeOptions = {
                ...commonAudioNodeOptions,
                coneInnerAngle: nativePannerNode.coneInnerAngle,
                coneOuterAngle: nativePannerNode.coneOuterAngle,
                coneOuterGain: nativePannerNode.coneOuterGain,
                distanceModel: nativePannerNode.distanceModel,
                maxDistance: nativePannerNode.maxDistance,
                panningModel: nativePannerNode.panningModel,
                refDistance: nativePannerNode.refDistance,
                rolloffFactor: nativePannerNode.rolloffFactor
            };
            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativePannerNodeIsOwnedByContext = (0,_helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_1__.isOwnedByContext)(nativePannerNode, nativeOfflineAudioContext);
            // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.
            if ('bufferSize' in nativePannerNode) {
                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });
            }
            else if (!nativePannerNodeIsOwnedByContext) {
                const options = {
                    ...commonNativePannerNodeOptions,
                    orientationX: nativePannerNode.orientationX.value,
                    orientationY: nativePannerNode.orientationY.value,
                    orientationZ: nativePannerNode.orientationZ.value,
                    positionX: nativePannerNode.positionX.value,
                    positionY: nativePannerNode.positionY.value,
                    positionZ: nativePannerNode.positionZ.value
                };
                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);
            }
            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);
            if (nativeGainNode !== null) {
                if (renderedBufferPromise === null) {
                    if (nativeOfflineAudioContextConstructor === null) {
                        throw new Error('Missing the native OfflineAudioContext constructor.');
                    }
                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6, 
                    // Bug #17: Safari does not yet expose the length.
                    proxy.context.length, nativeOfflineAudioContext.sampleRate);
                    const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {
                        channelCount: 1,
                        channelCountMode: 'explicit',
                        channelInterpretation: 'speakers',
                        numberOfInputs: 6
                    });
                    nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);
                    renderedBufferPromise = (async () => {
                        const nativeConstantSourceNodes = await Promise.all([
                            proxy.orientationX,
                            proxy.orientationY,
                            proxy.orientationZ,
                            proxy.positionX,
                            proxy.positionY,
                            proxy.positionZ
                        ].map(async (audioParam, index) => {
                            const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {
                                channelCount: 1,
                                channelCountMode: 'explicit',
                                channelInterpretation: 'discrete',
                                offset: index === 0 ? 1 : 0
                            });
                            await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset);
                            return nativeConstantSourceNode;
                        }));
                        for (let i = 0; i < 6; i += 1) {
                            nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);
                            nativeConstantSourceNodes[i].start(0);
                        }
                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);
                    })();
                }
                const renderedBuffer = await renderedBufferPromise;
                const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode);
                const channelDatas = [];
                for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {
                    channelDatas.push(renderedBuffer.getChannelData(i));
                }
                let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];
                let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];
                let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });
                let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {
                    ...commonNativePannerNodeOptions,
                    orientationX: lastOrientation[0],
                    orientationY: lastOrientation[1],
                    orientationZ: lastOrientation[2],
                    positionX: lastPosition[0],
                    positionY: lastPosition[1],
                    positionZ: lastPosition[2]
                });
                inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);
                partialPannerNode.connect(nativeGainNode);
                for (let i = 128; i < renderedBuffer.length; i += 128) {
                    const orientation = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];
                    const positon = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];
                    if (orientation.some((value, index) => value !== lastOrientation[index]) ||
                        positon.some((value, index) => value !== lastPosition[index])) {
                        lastOrientation = orientation;
                        lastPosition = positon;
                        const currentTime = i / nativeOfflineAudioContext.sampleRate;
                        gateGainNode.gain.setValueAtTime(0, currentTime);
                        gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 0 });
                        partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {
                            ...commonNativePannerNodeOptions,
                            orientationX: lastOrientation[0],
                            orientationY: lastOrientation[1],
                            orientationZ: lastOrientation[2],
                            positionX: lastPosition[0],
                            positionY: lastPosition[1],
                            positionZ: lastPosition[2]
                        });
                        gateGainNode.gain.setValueAtTime(1, currentTime);
                        inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);
                        partialPannerNode.connect(nativeGainNode);
                    }
                }
                return nativeGainNode;
            }
            if (!nativePannerNodeIsOwnedByContext) {
                await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);
                await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);
                await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);
                await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);
                await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);
                await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);
            }
            else {
                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);
                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);
                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);
                await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);
                await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);
                await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);
            }
            if ((0,_guards_native_audio_node_faker__WEBPACK_IMPORTED_MODULE_0__.isNativeAudioNodeFaker)(nativePannerNode)) {
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);
            }
            else {
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);
            }
            return nativePannerNode;
        };
        return {
            render(proxy, nativeOfflineAudioContext) {
                const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);
                if (renderedNativeGainNodeOrNativePannerNode !== undefined) {
                    return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);
                }
                return createAudioNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
};
//# sourceMappingURL=panner-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/periodic-wave-constructor.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/periodic-wave-constructor.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createPeriodicWaveConstructor: () => (/* binding */ createPeriodicWaveConstructor)
/* harmony export */ });
const DEFAULT_OPTIONS = {
    disableNormalization: false
};
const createPeriodicWaveConstructor = (createNativePeriodicWave, getNativeContext, periodicWaveStore, sanitizePeriodicWaveOptions) => {
    return class PeriodicWave {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = sanitizePeriodicWaveOptions({ ...DEFAULT_OPTIONS, ...options });
            const periodicWave = createNativePeriodicWave(nativeContext, mergedOptions);
            periodicWaveStore.add(periodicWave);
            // This does violate all good pratices but it is used here to simplify the handling of periodic waves.
            return periodicWave;
        }
        static [Symbol.hasInstance](instance) {
            return ((instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === PeriodicWave.prototype) ||
                periodicWaveStore.has(instance));
        }
    };
};
//# sourceMappingURL=periodic-wave-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/render-automation.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/render-automation.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createRenderAutomation: () => (/* binding */ createRenderAutomation)
/* harmony export */ });
const createRenderAutomation = (getAudioParamRenderer, renderInputsOfAudioParam) => {
    return (nativeOfflineAudioContext, audioParam, nativeAudioParam) => {
        const audioParamRenderer = getAudioParamRenderer(audioParam);
        audioParamRenderer.replay(nativeAudioParam);
        return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam);
    };
};
//# sourceMappingURL=render-automation.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createRenderInputsOfAudioNode: () => (/* binding */ createRenderInputsOfAudioNode)
/* harmony export */ });
const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) => {
    return async (audioNode, nativeOfflineAudioContext, nativeAudioNode) => {
        const audioNodeConnections = getAudioNodeConnections(audioNode);
        await Promise.all(audioNodeConnections.activeInputs
            .map((connections, input) => Array.from(connections).map(async ([source, output]) => {
            const audioNodeRenderer = getAudioNodeRenderer(source);
            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);
            const destination = audioNode.context.destination;
            if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {
                renderedNativeAudioNode.connect(nativeAudioNode, output, input);
            }
        }))
            .reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));
    };
};
//# sourceMappingURL=render-inputs-of-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createRenderInputsOfAudioParam: () => (/* binding */ createRenderInputsOfAudioParam)
/* harmony export */ });
const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {
    return async (audioParam, nativeOfflineAudioContext, nativeAudioParam) => {
        const audioParamConnections = getAudioParamConnections(audioParam);
        await Promise.all(Array.from(audioParamConnections.activeInputs).map(async ([source, output]) => {
            const audioNodeRenderer = getAudioNodeRenderer(source);
            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);
            if (!isPartOfACycle(source)) {
                renderedNativeAudioNode.connect(nativeAudioParam, output);
            }
        }));
    };
};
//# sourceMappingURL=render-inputs-of-audio-param.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/render-native-offline-audio-context.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/render-native-offline-audio-context.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createRenderNativeOfflineAudioContext: () => (/* binding */ createRenderNativeOfflineAudioContext)
/* harmony export */ });
/* harmony import */ var _helpers_test_promise_support__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/test-promise-support */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js");

const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {
    return (nativeOfflineAudioContext) => {
        // Bug #21: Safari does not support promises yet.
        if (cacheTestResult(_helpers_test_promise_support__WEBPACK_IMPORTED_MODULE_0__.testPromiseSupport, () => (0,_helpers_test_promise_support__WEBPACK_IMPORTED_MODULE_0__.testPromiseSupport)(nativeOfflineAudioContext))) {
            // Bug #158: Chrome and Edge do not advance currentTime if it is not accessed while rendering the audio.
            return Promise.resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)).then((isOfflineAudioContextCurrentTimeSupported) => {
                if (!isOfflineAudioContextCurrentTimeSupported) {
                    const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);
                    nativeOfflineAudioContext.oncomplete = () => {
                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation
                        scriptProcessorNode.disconnect();
                    };
                    scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation
                    scriptProcessorNode.connect(nativeOfflineAudioContext.destination);
                }
                return nativeOfflineAudioContext.startRendering();
            });
        }
        return new Promise((resolve) => {
            // Bug #48: Safari does not render an OfflineAudioContext without any connected node.
            const gainNode = createNativeGainNode(nativeOfflineAudioContext, {
                channelCount: 1,
                channelCountMode: 'explicit',
                channelInterpretation: 'discrete',
                gain: 0
            });
            nativeOfflineAudioContext.oncomplete = (event) => {
                gainNode.disconnect();
                resolve(event.renderedBuffer);
            };
            gainNode.connect(nativeOfflineAudioContext.destination);
            nativeOfflineAudioContext.startRendering();
        });
    };
};
//# sourceMappingURL=render-native-offline-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/set-active-audio-worklet-node-inputs.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/set-active-audio-worklet-node-inputs.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createSetActiveAudioWorkletNodeInputs: () => (/* binding */ createSetActiveAudioWorkletNodeInputs)
/* harmony export */ });
const createSetActiveAudioWorkletNodeInputs = (activeAudioWorkletNodeInputsStore) => {
    return (nativeAudioWorkletNode, activeInputs) => {
        activeAudioWorkletNodeInputsStore.set(nativeAudioWorkletNode, activeInputs);
    };
};
//# sourceMappingURL=set-active-audio-worklet-node-inputs.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/set-audio-node-tail-time.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/set-audio-node-tail-time.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createSetAudioNodeTailTime: () => (/* binding */ createSetAudioNodeTailTime)
/* harmony export */ });
const createSetAudioNodeTailTime = (audioNodeTailTimeStore) => {
    return (audioNode, tailTime) => audioNodeTailTimeStore.set(audioNode, tailTime);
};
//# sourceMappingURL=set-audio-node-tail-time.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/start-rendering.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/start-rendering.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createStartRendering: () => (/* binding */ createStartRendering)
/* harmony export */ });
/* harmony import */ var _helpers_wrap_audio_buffer_get_channel_data_method__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/wrap-audio-buffer-get-channel-data-method */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js");

const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {
    return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination)
        .render(destination, nativeOfflineAudioContext)
        /*
         * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the
         * destination.
         */
        .then(() => Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map((audioWorkletNode) => getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext))))
        .then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext))
        .then((audioBuffer) => {
        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
        // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.
        if (typeof audioBuffer.copyFromChannel !== 'function') {
            wrapAudioBufferCopyChannelMethods(audioBuffer);
            (0,_helpers_wrap_audio_buffer_get_channel_data_method__WEBPACK_IMPORTED_MODULE_0__.wrapAudioBufferGetChannelDataMethod)(audioBuffer);
            // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.
        }
        else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {
            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);
        }
        audioBufferStore.add(audioBuffer);
        return audioBuffer;
    });
};
//# sourceMappingURL=start-rendering.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-constructor.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-constructor.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createStereoPannerNodeConstructor: () => (/* binding */ createStereoPannerNodeConstructor)
/* harmony export */ });
const DEFAULT_OPTIONS = {
    channelCount: 2,
    /*
     * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent
     * behavior.
     */
    channelCountMode: 'explicit',
    channelInterpretation: 'speakers',
    pan: 0
};
const createStereoPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {
    return class StereoPannerNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
            const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const stereoPannerNodeRenderer = (isOffline ? createStereoPannerNodeRenderer() : null);
            super(context, false, nativeStereoPannerNode, stereoPannerNodeRenderer);
            this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan);
        }
        get pan() {
            return this._pan;
        }
    };
};
//# sourceMappingURL=stereo-panner-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createStereoPannerNodeRendererFactory: () => (/* binding */ createStereoPannerNodeRendererFactory)
/* harmony export */ });
/* harmony import */ var _guards_native_audio_node_faker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../guards/native-audio-node-faker */ "./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js");
/* harmony import */ var _helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/is-owned-by-context */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js");


const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
    return () => {
        const renderedNativeStereoPannerNodes = new WeakMap();
        const createStereoPannerNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeStereoPannerNode = getNativeAudioNode(proxy);
            /*
             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created
             * again.
             */
            const nativeStereoPannerNodeIsOwnedByContext = (0,_helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_1__.isOwnedByContext)(nativeStereoPannerNode, nativeOfflineAudioContext);
            if (!nativeStereoPannerNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeStereoPannerNode.channelCount,
                    channelCountMode: nativeStereoPannerNode.channelCountMode,
                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,
                    pan: nativeStereoPannerNode.pan.value
                };
                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);
            }
            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);
            if (!nativeStereoPannerNodeIsOwnedByContext) {
                await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);
            }
            else {
                await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);
            }
            if ((0,_guards_native_audio_node_faker__WEBPACK_IMPORTED_MODULE_0__.isNativeAudioNodeFaker)(nativeStereoPannerNode)) {
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);
            }
            else {
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);
            }
            return nativeStereoPannerNode;
        };
        return {
            render(proxy, nativeOfflineAudioContext) {
                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);
                if (renderedNativeStereoPannerNode !== undefined) {
                    return Promise.resolve(renderedNativeStereoPannerNode);
                }
                return createStereoPannerNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
};
//# sourceMappingURL=stereo-panner-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-constructor-support.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-constructor-support.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTestAudioBufferConstructorSupport: () => (/* binding */ createTestAudioBufferConstructorSupport)
/* harmony export */ });
// Bug #33: Safari exposes an AudioBuffer but it can't be used as a constructor.
const createTestAudioBufferConstructorSupport = (nativeAudioBufferConstructor) => {
    return () => {
        if (nativeAudioBufferConstructor === null) {
            return false;
        }
        try {
            new nativeAudioBufferConstructor({ length: 1, sampleRate: 44100 }); // tslint:disable-line:no-unused-expression
        }
        catch {
            return false;
        }
        return true;
    };
};
//# sourceMappingURL=test-audio-buffer-constructor-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-copy-channel-methods-subarray-support.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-copy-channel-methods-subarray-support.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTestAudioBufferCopyChannelMethodsSubarraySupport: () => (/* binding */ createTestAudioBufferCopyChannelMethodsSubarraySupport)
/* harmony export */ });
/*
 * Firefox up to version 67 didn't fully support the copyFromChannel() and copyToChannel() methods. Therefore testing one of those methods
 * is enough to know if the other one is supported as well.
 */
const createTestAudioBufferCopyChannelMethodsSubarraySupport = (nativeOfflineAudioContextConstructor) => {
    return () => {
        if (nativeOfflineAudioContextConstructor === null) {
            return false;
        }
        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        const nativeAudioBuffer = nativeOfflineAudioContext.createBuffer(1, 1, 44100);
        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
        if (nativeAudioBuffer.copyToChannel === undefined) {
            return true;
        }
        const source = new Float32Array(2);
        try {
            nativeAudioBuffer.copyFromChannel(source, 0, 0);
        }
        catch {
            return false;
        }
        return true;
    };
};
//# sourceMappingURL=test-audio-buffer-copy-channel-methods-subarray-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-close-method-support.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-close-method-support.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTestAudioContextCloseMethodSupport: () => (/* binding */ createTestAudioContextCloseMethodSupport)
/* harmony export */ });
const createTestAudioContextCloseMethodSupport = (nativeAudioContextConstructor) => {
    return () => {
        if (nativeAudioContextConstructor === null) {
            return false;
        }
        // Try to check the prototype before constructing the AudioContext.
        if (nativeAudioContextConstructor.prototype !== undefined && nativeAudioContextConstructor.prototype.close !== undefined) {
            return true;
        }
        const audioContext = new nativeAudioContextConstructor();
        const isAudioContextClosable = audioContext.close !== undefined;
        try {
            audioContext.close();
        }
        catch {
            // Ignore errors.
        }
        return isAudioContextClosable;
    };
};
//# sourceMappingURL=test-audio-context-close-method-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-decode-audio-data-method-type-error-support.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-decode-audio-data-method-type-error-support.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTestAudioContextDecodeAudioDataMethodTypeErrorSupport: () => (/* binding */ createTestAudioContextDecodeAudioDataMethodTypeErrorSupport)
/* harmony export */ });
/**
 * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers
 * did not refuse to decode invalid parameters with a TypeError.
 */
const createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = (nativeOfflineAudioContextConstructor) => {
    return () => {
        if (nativeOfflineAudioContextConstructor === null) {
            return Promise.resolve(false);
        }
        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        // Bug #21: Safari does not support promises yet.
        return new Promise((resolve) => {
            let isPending = true;
            const resolvePromise = (err) => {
                if (isPending) {
                    isPending = false;
                    offlineAudioContext.startRendering();
                    resolve(err instanceof TypeError);
                }
            };
            let promise;
            // Bug #26: Safari throws a synchronous error.
            try {
                promise = offlineAudioContext
                    // Bug #1: Safari requires a successCallback.
                    .decodeAudioData(null, () => {
                    // Ignore the success callback.
                }, resolvePromise);
            }
            catch (err) {
                resolvePromise(err);
            }
            // Bug #21: Safari does not support promises yet.
            if (promise !== undefined) {
                // Bug #6: Chrome, Edge and Firefox do not call the errorCallback.
                promise.catch(resolvePromise);
            }
        });
    };
};
//# sourceMappingURL=test-audio-context-decode-audio-data-method-type-error-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-options-support.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-options-support.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTestAudioContextOptionsSupport: () => (/* binding */ createTestAudioContextOptionsSupport)
/* harmony export */ });
const createTestAudioContextOptionsSupport = (nativeAudioContextConstructor) => {
    return () => {
        if (nativeAudioContextConstructor === null) {
            return false;
        }
        let audioContext;
        try {
            audioContext = new nativeAudioContextConstructor({ latencyHint: 'balanced' });
        }
        catch {
            return false;
        }
        audioContext.close();
        return true;
    };
};
//# sourceMappingURL=test-audio-context-options-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/test-audio-node-connect-method-support.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/test-audio-node-connect-method-support.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTestAudioNodeConnectMethodSupport: () => (/* binding */ createTestAudioNodeConnectMethodSupport)
/* harmony export */ });
// Safari up to version 12.0 (but not v12.1) didn't return the destination in case it was an AudioNode.
const createTestAudioNodeConnectMethodSupport = (nativeOfflineAudioContextConstructor) => {
    return () => {
        if (nativeOfflineAudioContextConstructor === null) {
            return false;
        }
        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        const nativeGainNode = nativeOfflineAudioContext.createGain();
        const isSupported = nativeGainNode.connect(nativeGainNode) === nativeGainNode;
        nativeGainNode.disconnect(nativeGainNode);
        return isSupported;
    };
};
//# sourceMappingURL=test-audio-node-connect-method-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTestAudioWorkletProcessorNoOutputsSupport: () => (/* binding */ createTestAudioWorkletProcessorNoOutputsSupport)
/* harmony export */ });
/**
 * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was
 * enabled by default in version 66.
 */
const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {
    return async () => {
        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.
        if (nativeAudioWorkletNodeConstructor === null) {
            return true;
        }
        if (nativeOfflineAudioContextConstructor === null) {
            return false;
        }
        const blob = new Blob([
            'let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor("a",A)'
        ], {
            type: 'application/javascript; charset=utf-8'
        });
        const messageChannel = new MessageChannel();
        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.
        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);
        const url = URL.createObjectURL(blob);
        let isCallingProcess = false;
        try {
            await offlineAudioContext.audioWorklet.addModule(url);
            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });
            const oscillator = offlineAudioContext.createOscillator();
            await new Promise((resolve) => {
                audioWorkletNode.port.onmessage = () => resolve();
                audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);
            });
            audioWorkletNode.port.onmessage = () => (isCallingProcess = true);
            oscillator.connect(audioWorkletNode);
            oscillator.start(0);
            await offlineAudioContext.startRendering();
            isCallingProcess = await new Promise((resolve) => {
                messageChannel.port1.onmessage = ({ data }) => resolve(data === 1);
                messageChannel.port1.postMessage(0);
            });
        }
        catch {
            // Ignore errors.
        }
        finally {
            messageChannel.port1.close();
            URL.revokeObjectURL(url);
        }
        return isCallingProcess;
    };
};
//# sourceMappingURL=test-audio-worklet-processor-no-outputs-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-post-message-support.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-post-message-support.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTestAudioWorkletProcessorPostMessageSupport: () => (/* binding */ createTestAudioWorkletProcessorPostMessageSupport)
/* harmony export */ });
// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.
const createTestAudioWorkletProcessorPostMessageSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {
    return async () => {
        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.
        if (nativeAudioWorkletNodeConstructor === null) {
            return true;
        }
        if (nativeOfflineAudioContextConstructor === null) {
            return false;
        }
        const blob = new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor("a",A)'], {
            type: 'application/javascript; charset=utf-8'
        });
        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.
        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);
        const url = URL.createObjectURL(blob);
        let isEmittingMessageEvents = false;
        let isEmittingProcessorErrorEvents = false;
        try {
            await offlineAudioContext.audioWorklet.addModule(url);
            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });
            const oscillator = offlineAudioContext.createOscillator();
            audioWorkletNode.port.onmessage = () => (isEmittingMessageEvents = true);
            audioWorkletNode.onprocessorerror = () => (isEmittingProcessorErrorEvents = true);
            oscillator.connect(audioWorkletNode);
            oscillator.start(0);
            await offlineAudioContext.startRendering();
            // Bug #197: Safari does not deliver the messages before the promise returned by startRendering() resolves.
            await new Promise((resolve) => setTimeout(resolve));
        }
        catch {
            // Ignore errors.
        }
        finally {
            URL.revokeObjectURL(url);
        }
        return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;
    };
};
//# sourceMappingURL=test-audio-worklet-processor-post-message-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/test-channel-merger-node-channel-count-support.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/test-channel-merger-node-channel-count-support.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTestChannelMergerNodeChannelCountSupport: () => (/* binding */ createTestChannelMergerNodeChannelCountSupport)
/* harmony export */ });
/**
 * Firefox up to version 69 did not throw an error when setting a different channelCount or channelCountMode.
 */
const createTestChannelMergerNodeChannelCountSupport = (nativeOfflineAudioContextConstructor) => {
    return () => {
        if (nativeOfflineAudioContextConstructor === null) {
            return false;
        }
        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        const nativeChannelMergerNode = offlineAudioContext.createChannelMerger();
        /**
         * Bug #15: Safari does not return the default properties. It still needs to be patched. This test is supposed to test the support
         * in other browsers.
         */
        if (nativeChannelMergerNode.channelCountMode === 'max') {
            return true;
        }
        try {
            nativeChannelMergerNode.channelCount = 2;
        }
        catch {
            return true;
        }
        return false;
    };
};
//# sourceMappingURL=test-channel-merger-node-channel-count-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/test-constant-source-node-accurate-scheduling-support.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/test-constant-source-node-accurate-scheduling-support.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTestConstantSourceNodeAccurateSchedulingSupport: () => (/* binding */ createTestConstantSourceNodeAccurateSchedulingSupport)
/* harmony export */ });
const createTestConstantSourceNodeAccurateSchedulingSupport = (nativeOfflineAudioContextConstructor) => {
    return () => {
        if (nativeOfflineAudioContextConstructor === null) {
            return false;
        }
        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        // Bug #62: Safari does not support ConstantSourceNodes.
        if (nativeOfflineAudioContext.createConstantSource === undefined) {
            return true;
        }
        const nativeConstantSourceNode = nativeOfflineAudioContext.createConstantSource();
        /*
         * @todo This is using bug #75 to detect bug #70. That works because both bugs were unique to
         * the implementation of Firefox right now, but it could probably be done in a better way.
         */
        return nativeConstantSourceNode.offset.maxValue !== Number.POSITIVE_INFINITY;
    };
};
//# sourceMappingURL=test-constant-source-node-accurate-scheduling-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-buffer-reassignability-support.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-buffer-reassignability-support.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTestConvolverNodeBufferReassignabilitySupport: () => (/* binding */ createTestConvolverNodeBufferReassignabilitySupport)
/* harmony export */ });
// Opera up to version 57 did not allow to reassign the buffer of a ConvolverNode.
const createTestConvolverNodeBufferReassignabilitySupport = (nativeOfflineAudioContextConstructor) => {
    return () => {
        if (nativeOfflineAudioContextConstructor === null) {
            return false;
        }
        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        const nativeConvolverNode = offlineAudioContext.createConvolver();
        nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);
        try {
            nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);
        }
        catch {
            return false;
        }
        return true;
    };
};
//# sourceMappingURL=test-convolver-node-buffer-reassignability-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-channel-count-support.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-channel-count-support.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTestConvolverNodeChannelCountSupport: () => (/* binding */ createTestConvolverNodeChannelCountSupport)
/* harmony export */ });
// Chrome up to version v80, Edge up to version v80 and Opera up to version v67 did not allow to set the channelCount property of a ConvolverNode to 1. They also did not allow to set the channelCountMode to 'explicit'.
const createTestConvolverNodeChannelCountSupport = (nativeOfflineAudioContextConstructor) => {
    return () => {
        if (nativeOfflineAudioContextConstructor === null) {
            return false;
        }
        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        const nativeConvolverNode = offlineAudioContext.createConvolver();
        try {
            nativeConvolverNode.channelCount = 1;
        }
        catch {
            return false;
        }
        return true;
    };
};
//# sourceMappingURL=test-convolver-node-channel-count-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/test-is-secure-context-support.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/test-is-secure-context-support.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTestIsSecureContextSupport: () => (/* binding */ createTestIsSecureContextSupport)
/* harmony export */ });
const createTestIsSecureContextSupport = (window) => {
    return () => window !== null && window.hasOwnProperty('isSecureContext');
};
//# sourceMappingURL=test-is-secure-context-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js":
/*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js ***!
  \********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport: () => (/* binding */ createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)
/* harmony export */ });
// Firefox up to version 68 did not throw an error when creating a MediaStreamAudioSourceNode with a mediaStream that had no audio track.
const createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = (nativeAudioContextConstructor) => {
    return () => {
        if (nativeAudioContextConstructor === null) {
            return false;
        }
        const audioContext = new nativeAudioContextConstructor();
        try {
            audioContext.createMediaStreamSource(new MediaStream());
            return false;
        }
        catch (err) {
            return true;
        }
        finally {
            audioContext.close();
        }
    };
};
//# sourceMappingURL=test-media-stream-audio-source-node-media-stream-without-audio-track-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/test-offline-audio-context-current-time-support.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/test-offline-audio-context-current-time-support.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTestOfflineAudioContextCurrentTimeSupport: () => (/* binding */ createTestOfflineAudioContextCurrentTimeSupport)
/* harmony export */ });
const createTestOfflineAudioContextCurrentTimeSupport = (createNativeGainNode, nativeOfflineAudioContextConstructor) => {
    return () => {
        if (nativeOfflineAudioContextConstructor === null) {
            return Promise.resolve(false);
        }
        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        // Bug #48: Safari does not render an OfflineAudioContext without any connected node.
        const gainNode = createNativeGainNode(nativeOfflineAudioContext, {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'discrete',
            gain: 0
        });
        // Bug #21: Safari does not support promises yet.
        return new Promise((resolve) => {
            nativeOfflineAudioContext.oncomplete = () => {
                gainNode.disconnect();
                resolve(nativeOfflineAudioContext.currentTime !== 0);
            };
            nativeOfflineAudioContext.startRendering();
        });
    };
};
//# sourceMappingURL=test-offline-audio-context-current-time-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/test-stereo-panner-node-default-value-support.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/test-stereo-panner-node-default-value-support.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTestStereoPannerNodeDefaultValueSupport: () => (/* binding */ createTestStereoPannerNodeDefaultValueSupport)
/* harmony export */ });
/**
 * Firefox up to version 62 did not kick off the processing of the StereoPannerNode if the value of pan was zero.
 */
const createTestStereoPannerNodeDefaultValueSupport = (nativeOfflineAudioContextConstructor) => {
    return () => {
        if (nativeOfflineAudioContextConstructor === null) {
            return Promise.resolve(false);
        }
        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        /*
         * Bug #105: Safari does not support the StereoPannerNode. Therefore the returned value should normally be false but the faker does
         * support the tested behaviour.
         */
        if (nativeOfflineAudioContext.createStereoPanner === undefined) {
            return Promise.resolve(true);
        }
        // Bug #62: Safari does not support ConstantSourceNodes.
        if (nativeOfflineAudioContext.createConstantSource === undefined) {
            return Promise.resolve(true);
        }
        const constantSourceNode = nativeOfflineAudioContext.createConstantSource();
        const stereoPanner = nativeOfflineAudioContext.createStereoPanner();
        constantSourceNode.channelCount = 1;
        constantSourceNode.offset.value = 1;
        stereoPanner.channelCount = 1;
        constantSourceNode.start();
        constantSourceNode.connect(stereoPanner).connect(nativeOfflineAudioContext.destination);
        return nativeOfflineAudioContext.startRendering().then((buffer) => buffer.getChannelData(0)[0] !== 1);
    };
};
//# sourceMappingURL=test-stereo-panner-node-default-value-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/unknown-error.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/unknown-error.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createUnknownError: () => (/* binding */ createUnknownError)
/* harmony export */ });
const createUnknownError = () => new DOMException('', 'UnknownError');
//# sourceMappingURL=unknown-error.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createWaveShaperNodeConstructor: () => (/* binding */ createWaveShaperNodeConstructor)
/* harmony export */ });
const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    curve: null,
    oversample: 'none'
};
const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {
    return class WaveShaperNode extends audioNodeConstructor {
        constructor(context, options) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
            const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const waveShaperNodeRenderer = (isOffline ? createWaveShaperNodeRenderer() : null);
            // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.
            super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);
            this._isCurveNullified = false;
            this._nativeWaveShaperNode = nativeWaveShaperNode;
            // @todo Determine a meaningful tail-time instead of just using one second.
            setAudioNodeTailTime(this, 1);
        }
        get curve() {
            if (this._isCurveNullified) {
                return null;
            }
            return this._nativeWaveShaperNode.curve;
        }
        set curve(value) {
            // Bug #103: Safari does not allow to set the curve to null.
            if (value === null) {
                this._isCurveNullified = true;
                this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);
            }
            else {
                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.
                // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.
                if (value.length < 2) {
                    throw createInvalidStateError();
                }
                this._isCurveNullified = false;
                this._nativeWaveShaperNode.curve = value;
            }
        }
        get oversample() {
            return this._nativeWaveShaperNode.oversample;
        }
        set oversample(value) {
            this._nativeWaveShaperNode.oversample = value;
        }
    };
};
//# sourceMappingURL=wave-shaper-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createWaveShaperNodeRendererFactory: () => (/* binding */ createWaveShaperNodeRendererFactory)
/* harmony export */ });
/* harmony import */ var _guards_native_audio_node_faker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../guards/native-audio-node-faker */ "./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js");
/* harmony import */ var _helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/is-owned-by-context */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js");


const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {
    return () => {
        const renderedNativeWaveShaperNodes = new WeakMap();
        const createWaveShaperNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeWaveShaperNode = getNativeAudioNode(proxy);
            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeWaveShaperNodeIsOwnedByContext = (0,_helpers_is_owned_by_context__WEBPACK_IMPORTED_MODULE_1__.isOwnedByContext)(nativeWaveShaperNode, nativeOfflineAudioContext);
            if (!nativeWaveShaperNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeWaveShaperNode.channelCount,
                    channelCountMode: nativeWaveShaperNode.channelCountMode,
                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,
                    curve: nativeWaveShaperNode.curve,
                    oversample: nativeWaveShaperNode.oversample
                };
                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);
            }
            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);
            if ((0,_guards_native_audio_node_faker__WEBPACK_IMPORTED_MODULE_0__.isNativeAudioNodeFaker)(nativeWaveShaperNode)) {
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);
            }
            else {
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);
            }
            return nativeWaveShaperNode;
        };
        return {
            render(proxy, nativeOfflineAudioContext) {
                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);
                if (renderedNativeWaveShaperNode !== undefined) {
                    return Promise.resolve(renderedNativeWaveShaperNode);
                }
                return createWaveShaperNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
};
//# sourceMappingURL=wave-shaper-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/window.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/window.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createWindow: () => (/* binding */ createWindow)
/* harmony export */ });
const createWindow = () => (typeof window === 'undefined' ? null : window);
//# sourceMappingURL=window.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createWrapAudioBufferCopyChannelMethodsOutOfBounds: () => (/* binding */ createWrapAudioBufferCopyChannelMethodsOutOfBounds)
/* harmony export */ });
const createWrapAudioBufferCopyChannelMethodsOutOfBounds = (convertNumberToUnsignedLong) => {
    return (audioBuffer) => {
        audioBuffer.copyFromChannel = ((copyFromChannel) => {
            return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {
                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);
                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);
                if (bufferOffset < audioBuffer.length) {
                    return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);
                }
            };
        })(audioBuffer.copyFromChannel);
        audioBuffer.copyToChannel = ((copyToChannel) => {
            return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {
                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);
                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);
                if (bufferOffset < audioBuffer.length) {
                    return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);
                }
            };
        })(audioBuffer.copyToChannel);
    };
};
//# sourceMappingURL=wrap-audio-buffer-copy-channel-methods-out-of-bounds.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createWrapAudioBufferCopyChannelMethods: () => (/* binding */ createWrapAudioBufferCopyChannelMethods)
/* harmony export */ });
const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong, createIndexSizeError) => {
    return (audioBuffer) => {
        audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {
            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);
            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);
            if (channelNumber >= audioBuffer.numberOfChannels) {
                throw createIndexSizeError();
            }
            const audioBufferLength = audioBuffer.length;
            const channelData = audioBuffer.getChannelData(channelNumber);
            const destinationLength = destination.length;
            for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {
                destination[i] = channelData[i + bufferOffset];
            }
        };
        audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {
            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);
            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);
            if (channelNumber >= audioBuffer.numberOfChannels) {
                throw createIndexSizeError();
            }
            const audioBufferLength = audioBuffer.length;
            const channelData = audioBuffer.getChannelData(channelNumber);
            const sourceLength = source.length;
            for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {
                channelData[i + bufferOffset] = source[i];
            }
        };
    };
};
//# sourceMappingURL=wrap-audio-buffer-copy-channel-methods.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer: () => (/* binding */ createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer)
/* harmony export */ });
const createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer = (overwriteAccessors) => {
    return (nativeAudioBufferSourceNode, nativeContext) => {
        const nullifiedBuffer = nativeContext.createBuffer(1, 1, 44100);
        if (nativeAudioBufferSourceNode.buffer === null) {
            nativeAudioBufferSourceNode.buffer = nullifiedBuffer;
        }
        overwriteAccessors(nativeAudioBufferSourceNode, 'buffer', (get) => () => {
            const value = get.call(nativeAudioBufferSourceNode);
            return value === nullifiedBuffer ? null : value;
        }, (set) => (value) => {
            return set.call(nativeAudioBufferSourceNode, value === null ? nullifiedBuffer : value);
        });
    };
};
//# sourceMappingURL=wrap-audio-buffer-source-node-stop-method-nullified-buffer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/factories/wrap-channel-merger-node.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/factories/wrap-channel-merger-node.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createWrapChannelMergerNode: () => (/* binding */ createWrapChannelMergerNode)
/* harmony export */ });
const createWrapChannelMergerNode = (createInvalidStateError, monitorConnections) => {
    return (nativeContext, channelMergerNode) => {
        // Bug #15: Safari does not return the default properties.
        channelMergerNode.channelCount = 1;
        channelMergerNode.channelCountMode = 'explicit';
        // Bug #16: Safari does not throw an error when setting a different channelCount or channelCountMode.
        Object.defineProperty(channelMergerNode, 'channelCount', {
            get: () => 1,
            set: () => {
                throw createInvalidStateError();
            }
        });
        Object.defineProperty(channelMergerNode, 'channelCountMode', {
            get: () => 'explicit',
            set: () => {
                throw createInvalidStateError();
            }
        });
        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.
        const audioBufferSourceNode = nativeContext.createBufferSource();
        const whenConnected = () => {
            const length = channelMergerNode.numberOfInputs;
            for (let i = 0; i < length; i += 1) {
                audioBufferSourceNode.connect(channelMergerNode, 0, i);
            }
        };
        const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);
        monitorConnections(channelMergerNode, whenConnected, whenDisconnected);
    };
};
//# sourceMappingURL=wrap-channel-merger-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/globals.js":
/*!*************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/globals.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ACTIVE_AUDIO_NODE_STORE: () => (/* binding */ ACTIVE_AUDIO_NODE_STORE),
/* harmony export */   AUDIO_NODE_CONNECTIONS_STORE: () => (/* binding */ AUDIO_NODE_CONNECTIONS_STORE),
/* harmony export */   AUDIO_NODE_STORE: () => (/* binding */ AUDIO_NODE_STORE),
/* harmony export */   AUDIO_PARAM_CONNECTIONS_STORE: () => (/* binding */ AUDIO_PARAM_CONNECTIONS_STORE),
/* harmony export */   AUDIO_PARAM_STORE: () => (/* binding */ AUDIO_PARAM_STORE),
/* harmony export */   CONTEXT_STORE: () => (/* binding */ CONTEXT_STORE),
/* harmony export */   CYCLE_COUNTERS: () => (/* binding */ CYCLE_COUNTERS),
/* harmony export */   EVENT_LISTENERS: () => (/* binding */ EVENT_LISTENERS),
/* harmony export */   NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS: () => (/* binding */ NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS),
/* harmony export */   NODE_TO_PROCESSOR_MAPS: () => (/* binding */ NODE_TO_PROCESSOR_MAPS)
/* harmony export */ });
const ACTIVE_AUDIO_NODE_STORE = new WeakSet();
const AUDIO_NODE_CONNECTIONS_STORE = new WeakMap();
const AUDIO_NODE_STORE = new WeakMap();
const AUDIO_PARAM_CONNECTIONS_STORE = new WeakMap();
const AUDIO_PARAM_STORE = new WeakMap();
const CONTEXT_STORE = new WeakMap();
const EVENT_LISTENERS = new WeakMap();
const CYCLE_COUNTERS = new WeakMap();
// This clunky name is borrowed from the spec. :-)
const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = new WeakMap();
const NODE_TO_PROCESSOR_MAPS = new WeakMap();
//# sourceMappingURL=globals.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/guards/audio-buffer-source-node.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/guards/audio-buffer-source-node.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isAudioBufferSourceNode: () => (/* binding */ isAudioBufferSourceNode)
/* harmony export */ });
const isAudioBufferSourceNode = (audioNode) => {
    return 'playbackRate' in audioNode;
};
//# sourceMappingURL=audio-buffer-source-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isAudioNodeOutputConnection: () => (/* binding */ isAudioNodeOutputConnection)
/* harmony export */ });
/* harmony import */ var _audio_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./audio-node */ "./node_modules/standardized-audio-context/build/es2019/guards/audio-node.js");

const isAudioNodeOutputConnection = (outputConnection) => {
    return (0,_audio_node__WEBPACK_IMPORTED_MODULE_0__.isAudioNode)(outputConnection[0]);
};
//# sourceMappingURL=audio-node-output-connection.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/guards/audio-node.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/guards/audio-node.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isAudioNode: () => (/* binding */ isAudioNode)
/* harmony export */ });
const isAudioNode = (audioNodeOrAudioParam) => {
    return 'context' in audioNodeOrAudioParam;
};
//# sourceMappingURL=audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isAudioWorkletNode: () => (/* binding */ isAudioWorkletNode)
/* harmony export */ });
const isAudioWorkletNode = (audioNode) => {
    return 'port' in audioNode;
};
//# sourceMappingURL=audio-worklet-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/guards/biquad-filter-node.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/guards/biquad-filter-node.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isBiquadFilterNode: () => (/* binding */ isBiquadFilterNode)
/* harmony export */ });
const isBiquadFilterNode = (audioNode) => {
    return 'frequency' in audioNode && 'gain' in audioNode;
};
//# sourceMappingURL=biquad-filter-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/guards/constant-source-node.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/guards/constant-source-node.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isConstantSourceNode: () => (/* binding */ isConstantSourceNode)
/* harmony export */ });
const isConstantSourceNode = (audioNode) => {
    return 'offset' in audioNode;
};
//# sourceMappingURL=constant-source-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/guards/delay-node.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/guards/delay-node.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isDelayNode: () => (/* binding */ isDelayNode)
/* harmony export */ });
const isDelayNode = (audioNode) => {
    return 'delayTime' in audioNode;
};
//# sourceMappingURL=delay-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/guards/gain-node.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/guards/gain-node.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isGainNode: () => (/* binding */ isGainNode)
/* harmony export */ });
const isGainNode = (audioNode) => {
    return !('frequency' in audioNode) && 'gain' in audioNode;
};
//# sourceMappingURL=gain-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isNativeAudioNodeFaker: () => (/* binding */ isNativeAudioNodeFaker)
/* harmony export */ });
const isNativeAudioNodeFaker = (nativeAudioNodeOrNativeAudioNodeFaker) => {
    return 'inputs' in nativeAudioNodeOrNativeAudioNodeFaker;
};
//# sourceMappingURL=native-audio-node-faker.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isNativeAudioNode: () => (/* binding */ isNativeAudioNode)
/* harmony export */ });
const isNativeAudioNode = (nativeAudioNodeOrAudioParam) => {
    return 'context' in nativeAudioNodeOrAudioParam;
};
//# sourceMappingURL=native-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/guards/oscillator-node.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/guards/oscillator-node.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isOscillatorNode: () => (/* binding */ isOscillatorNode)
/* harmony export */ });
const isOscillatorNode = (audioNode) => {
    return 'detune' in audioNode && 'frequency' in audioNode && !('gain' in audioNode);
};
//# sourceMappingURL=oscillator-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/guards/stereo-panner-node.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/guards/stereo-panner-node.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isStereoPannerNode: () => (/* binding */ isStereoPannerNode)
/* harmony export */ });
const isStereoPannerNode = (audioNode) => {
    return 'pan' in audioNode;
};
//# sourceMappingURL=stereo-panner-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/add-active-input-connection-to-audio-param.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/add-active-input-connection-to-audio-param.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addActiveInputConnectionToAudioParam: () => (/* binding */ addActiveInputConnectionToAudioParam)
/* harmony export */ });
/* harmony import */ var _insert_element_in_set__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./insert-element-in-set */ "./node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js");

const addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {
    (0,_insert_element_in_set__WEBPACK_IMPORTED_MODULE_0__.insertElementInSet)(activeInputs, [source, output, eventListener], (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);
};
//# sourceMappingURL=add-active-input-connection-to-audio-param.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/add-passive-input-connection-to-audio-param.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/add-passive-input-connection-to-audio-param.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addPassiveInputConnectionToAudioParam: () => (/* binding */ addPassiveInputConnectionToAudioParam)
/* harmony export */ });
/* harmony import */ var _insert_element_in_set__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./insert-element-in-set */ "./node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js");

const addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {
    const passiveInputConnections = passiveInputs.get(source);
    if (passiveInputConnections === undefined) {
        passiveInputs.set(source, new Set([[output, eventListener]]));
    }
    else {
        (0,_insert_element_in_set__WEBPACK_IMPORTED_MODULE_0__.insertElementInSet)(passiveInputConnections, [output, eventListener], (passiveInputConnection) => passiveInputConnection[0] === output, ignoreDuplicates);
    }
};
//# sourceMappingURL=add-passive-input-connection-to-audio-param.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assignNativeAudioNodeAudioParamValue: () => (/* binding */ assignNativeAudioNodeAudioParamValue)
/* harmony export */ });
const assignNativeAudioNodeAudioParamValue = (nativeAudioNode, options, audioParam) => {
    const value = options[audioParam];
    if (value !== undefined && value !== nativeAudioNode[audioParam].value) {
        nativeAudioNode[audioParam].value = value;
    }
};
//# sourceMappingURL=assign-native-audio-node-audio-param-value.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assignNativeAudioNodeOption: () => (/* binding */ assignNativeAudioNodeOption)
/* harmony export */ });
const assignNativeAudioNodeOption = (nativeAudioNode, options, option) => {
    const value = options[option];
    if (value !== undefined && value !== nativeAudioNode[option]) {
        nativeAudioNode[option] = value;
    }
};
//# sourceMappingURL=assign-native-audio-node-option.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assignNativeAudioNodeOptions: () => (/* binding */ assignNativeAudioNodeOptions)
/* harmony export */ });
/* harmony import */ var _assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assign-native-audio-node-option */ "./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js");

const assignNativeAudioNodeOptions = (nativeAudioNode, options) => {
    (0,_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOption)(nativeAudioNode, options, 'channelCount');
    (0,_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOption)(nativeAudioNode, options, 'channelCountMode');
    (0,_assign_native_audio_node_option__WEBPACK_IMPORTED_MODULE_0__.assignNativeAudioNodeOption)(nativeAudioNode, options, 'channelInterpretation');
};
//# sourceMappingURL=assign-native-audio-node-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/clone-audio-worklet-node-options.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/clone-audio-worklet-node-options.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cloneAudioWorkletNodeOptions: () => (/* binding */ cloneAudioWorkletNodeOptions)
/* harmony export */ });
const cloneAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {
    return new Promise((resolve, reject) => {
        const { port1, port2 } = new MessageChannel();
        port1.onmessage = ({ data }) => {
            port1.close();
            port2.close();
            resolve(data);
        };
        port1.onmessageerror = ({ data }) => {
            port1.close();
            port2.close();
            reject(data);
        };
        // This will throw an error if the audioWorkletNodeOptions are not clonable.
        port2.postMessage(audioWorkletNodeOptions);
    });
};
//# sourceMappingURL=clone-audio-worklet-node-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   computeBufferSize: () => (/* binding */ computeBufferSize)
/* harmony export */ });
const computeBufferSize = (baseLatency, sampleRate) => {
    if (baseLatency === null) {
        return 512;
    }
    return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));
};
//# sourceMappingURL=compute-buffer-size.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   connectNativeAudioNodeToNativeAudioNode: () => (/* binding */ connectNativeAudioNodeToNativeAudioNode)
/* harmony export */ });
/* harmony import */ var _guards_native_audio_node_faker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../guards/native-audio-node-faker */ "./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js");

const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {
    if ((0,_guards_native_audio_node_faker__WEBPACK_IMPORTED_MODULE_0__.isNativeAudioNodeFaker)(nativeDestinationAudioNode)) {
        const fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];
        nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);
        return [fakeNativeDestinationAudioNode, output, 0];
    }
    nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);
    return [nativeDestinationAudioNode, output, input];
};
//# sourceMappingURL=connect-native-audio-node-to-native-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   copyFromChannel: () => (/* binding */ copyFromChannel)
/* harmony export */ });
function copyFromChannel(audioBuffer, 
// @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }
parent, key, channelNumber, bufferOffset) {
    if (typeof audioBuffer.copyFromChannel === 'function') {
        // The byteLength will be 0 when the ArrayBuffer was transferred.
        if (parent[key].byteLength === 0) {
            parent[key] = new Float32Array(128);
        }
        audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset);
        // Bug #5: Safari does not support copyFromChannel().
    }
    else {
        const channelData = audioBuffer.getChannelData(channelNumber);
        // The byteLength will be 0 when the ArrayBuffer was transferred.
        if (parent[key].byteLength === 0) {
            parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);
        }
        else {
            const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);
            parent[key].set(slicedInput);
        }
    }
}
//# sourceMappingURL=copy-from-channel.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   copyToChannel: () => (/* binding */ copyToChannel)
/* harmony export */ });
const copyToChannel = (audioBuffer, parent, key, channelNumber, bufferOffset) => {
    if (typeof audioBuffer.copyToChannel === 'function') {
        // The byteLength will be 0 when the ArrayBuffer was transferred.
        if (parent[key].byteLength !== 0) {
            audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);
        }
        // Bug #5: Safari does not support copyToChannel().
    }
    else {
        // The byteLength will be 0 when the ArrayBuffer was transferred.
        if (parent[key].byteLength !== 0) {
            audioBuffer.getChannelData(channelNumber).set(parent[key], bufferOffset);
        }
    }
};
//# sourceMappingURL=copy-to-channel.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor-promise.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor-promise.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAudioWorkletProcessorPromise: () => (/* binding */ createAudioWorkletProcessorPromise)
/* harmony export */ });
/* harmony import */ var _clone_audio_worklet_node_options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clone-audio-worklet-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/clone-audio-worklet-node-options.js");

const createAudioWorkletProcessorPromise = async (processorConstructor, audioWorkletNodeOptions) => {
    const clonedAudioWorkletNodeOptions = await (0,_clone_audio_worklet_node_options__WEBPACK_IMPORTED_MODULE_0__.cloneAudioWorkletNodeOptions)(audioWorkletNodeOptions);
    return new processorConstructor(clonedAudioWorkletNodeOptions);
};
//# sourceMappingURL=create-audio-worklet-processor-promise.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAudioWorkletProcessor: () => (/* binding */ createAudioWorkletProcessor)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");
/* harmony import */ var _create_audio_worklet_processor_promise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./create-audio-worklet-processor-promise */ "./node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor-promise.js");


const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions) => {
    let nodeToProcessorMap = _globals__WEBPACK_IMPORTED_MODULE_0__.NODE_TO_PROCESSOR_MAPS.get(nativeContext);
    if (nodeToProcessorMap === undefined) {
        nodeToProcessorMap = new WeakMap();
        _globals__WEBPACK_IMPORTED_MODULE_0__.NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);
    }
    const audioWorkletProcessorPromise = (0,_create_audio_worklet_processor_promise__WEBPACK_IMPORTED_MODULE_1__.createAudioWorkletProcessorPromise)(processorConstructor, audioWorkletNodeOptions);
    nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);
    return audioWorkletProcessorPromise;
};
//# sourceMappingURL=create-audio-worklet-processor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNestedArrays: () => (/* binding */ createNestedArrays)
/* harmony export */ });
const createNestedArrays = (x, y) => {
    const arrays = [];
    for (let i = 0; i < x; i += 1) {
        const array = [];
        const length = typeof y === 'number' ? y : y[i];
        for (let j = 0; j < length; j += 1) {
            array.push(new Float32Array(128));
        }
        arrays.push(array);
    }
    return arrays;
};
//# sourceMappingURL=create-nested-arrays.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/deactivate-active-audio-node-input-connections.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/deactivate-active-audio-node-input-connections.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deactivateActiveAudioNodeInputConnections: () => (/* binding */ deactivateActiveAudioNodeInputConnections)
/* harmony export */ });
/* harmony import */ var _guards_audio_buffer_source_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../guards/audio-buffer-source-node */ "./node_modules/standardized-audio-context/build/es2019/guards/audio-buffer-source-node.js");
/* harmony import */ var _guards_audio_worklet_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../guards/audio-worklet-node */ "./node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js");
/* harmony import */ var _guards_biquad_filter_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../guards/biquad-filter-node */ "./node_modules/standardized-audio-context/build/es2019/guards/biquad-filter-node.js");
/* harmony import */ var _guards_constant_source_node__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../guards/constant-source-node */ "./node_modules/standardized-audio-context/build/es2019/guards/constant-source-node.js");
/* harmony import */ var _guards_gain_node__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../guards/gain-node */ "./node_modules/standardized-audio-context/build/es2019/guards/gain-node.js");
/* harmony import */ var _guards_oscillator_node__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../guards/oscillator-node */ "./node_modules/standardized-audio-context/build/es2019/guards/oscillator-node.js");
/* harmony import */ var _guards_stereo_panner_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../guards/stereo-panner-node */ "./node_modules/standardized-audio-context/build/es2019/guards/stereo-panner-node.js");
/* harmony import */ var _get_audio_node_connections__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./get-audio-node-connections */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js");
/* harmony import */ var _get_audio_param_connections__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./get-audio-param-connections */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js");
/* harmony import */ var _is_active_audio_node__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./is-active-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js");
/* harmony import */ var _set_internal_state_to_passive__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./set-internal-state-to-passive */ "./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js");











const deactivateActiveAudioNodeInputConnections = (audioNode, trace) => {
    const { activeInputs } = (0,_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_7__.getAudioNodeConnections)(audioNode);
    activeInputs.forEach((connections) => connections.forEach(([source]) => {
        if (!trace.includes(audioNode)) {
            deactivateActiveAudioNodeInputConnections(source, [...trace, audioNode]);
        }
    }));
    const audioParams = (0,_guards_audio_buffer_source_node__WEBPACK_IMPORTED_MODULE_0__.isAudioBufferSourceNode)(audioNode)
        ? [
            // Bug #149: Safari does not yet support the detune AudioParam.
            audioNode.playbackRate
        ]
        : (0,_guards_audio_worklet_node__WEBPACK_IMPORTED_MODULE_1__.isAudioWorkletNode)(audioNode)
            ? Array.from(audioNode.parameters.values())
            : (0,_guards_biquad_filter_node__WEBPACK_IMPORTED_MODULE_2__.isBiquadFilterNode)(audioNode)
                ? [audioNode.Q, audioNode.detune, audioNode.frequency, audioNode.gain]
                : (0,_guards_constant_source_node__WEBPACK_IMPORTED_MODULE_3__.isConstantSourceNode)(audioNode)
                    ? [audioNode.offset]
                    : (0,_guards_gain_node__WEBPACK_IMPORTED_MODULE_4__.isGainNode)(audioNode)
                        ? [audioNode.gain]
                        : (0,_guards_oscillator_node__WEBPACK_IMPORTED_MODULE_5__.isOscillatorNode)(audioNode)
                            ? [audioNode.detune, audioNode.frequency]
                            : (0,_guards_stereo_panner_node__WEBPACK_IMPORTED_MODULE_6__.isStereoPannerNode)(audioNode)
                                ? [audioNode.pan]
                                : [];
    for (const audioParam of audioParams) {
        const audioParamConnections = (0,_get_audio_param_connections__WEBPACK_IMPORTED_MODULE_8__.getAudioParamConnections)(audioParam);
        if (audioParamConnections !== undefined) {
            audioParamConnections.activeInputs.forEach(([source]) => deactivateActiveAudioNodeInputConnections(source, trace));
        }
    }
    if ((0,_is_active_audio_node__WEBPACK_IMPORTED_MODULE_9__.isActiveAudioNode)(audioNode)) {
        (0,_set_internal_state_to_passive__WEBPACK_IMPORTED_MODULE_10__.setInternalStateToPassive)(audioNode);
    }
};
//# sourceMappingURL=deactivate-active-audio-node-input-connections.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deactivateAudioGraph: () => (/* binding */ deactivateAudioGraph)
/* harmony export */ });
/* harmony import */ var _deactivate_active_audio_node_input_connections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deactivate-active-audio-node-input-connections */ "./node_modules/standardized-audio-context/build/es2019/helpers/deactivate-active-audio-node-input-connections.js");

const deactivateAudioGraph = (context) => {
    (0,_deactivate_active_audio_node_input_connections__WEBPACK_IMPORTED_MODULE_0__.deactivateActiveAudioNodeInputConnections)(context.destination, []);
};
//# sourceMappingURL=deactivate-audio-graph.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection-to-audio-param.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection-to-audio-param.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deleteActiveInputConnectionToAudioParam: () => (/* binding */ deleteActiveInputConnectionToAudioParam)
/* harmony export */ });
/* harmony import */ var _pick_element_from_set__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pick-element-from-set */ "./node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js");

const deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {
    return (0,_pick_element_from_set__WEBPACK_IMPORTED_MODULE_0__.pickElementFromSet)(activeInputs, (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output);
};
//# sourceMappingURL=delete-active-input-connection-to-audio-param.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deleteActiveInputConnection: () => (/* binding */ deleteActiveInputConnection)
/* harmony export */ });
const deleteActiveInputConnection = (activeInputConnections, source, output) => {
    for (const activeInputConnection of activeInputConnections) {
        if (activeInputConnection[0] === source && activeInputConnection[1] === output) {
            activeInputConnections.delete(activeInputConnection);
            return activeInputConnection;
        }
    }
    return null;
};
//# sourceMappingURL=delete-active-input-connection.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/delete-event-listeners-of-audio-node.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/delete-event-listeners-of-audio-node.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deleteEventListenerOfAudioNode: () => (/* binding */ deleteEventListenerOfAudioNode)
/* harmony export */ });
/* harmony import */ var _get_event_listeners_of_audio_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-event-listeners-of-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js");

const deleteEventListenerOfAudioNode = (audioNode, eventListener) => {
    const eventListeners = (0,_get_event_listeners_of_audio_node__WEBPACK_IMPORTED_MODULE_0__.getEventListenersOfAudioNode)(audioNode);
    if (!eventListeners.delete(eventListener)) {
        throw new Error('Missing the expected event listener.');
    }
};
//# sourceMappingURL=delete-event-listeners-of-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-node.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-node.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deletePassiveInputConnectionToAudioNode: () => (/* binding */ deletePassiveInputConnectionToAudioNode)
/* harmony export */ });
/* harmony import */ var _get_value_for_key__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-value-for-key */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js");
/* harmony import */ var _pick_element_from_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pick-element-from-set */ "./node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js");


const deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {
    const passiveInputConnections = (0,_get_value_for_key__WEBPACK_IMPORTED_MODULE_0__.getValueForKey)(passiveInputs, source);
    const matchingConnection = (0,_pick_element_from_set__WEBPACK_IMPORTED_MODULE_1__.pickElementFromSet)(passiveInputConnections, (passiveInputConnection) => passiveInputConnection[0] === output && passiveInputConnection[1] === input);
    if (passiveInputConnections.size === 0) {
        passiveInputs.delete(source);
    }
    return matchingConnection;
};
//# sourceMappingURL=delete-passive-input-connection-to-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-param.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-param.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deletePassiveInputConnectionToAudioParam: () => (/* binding */ deletePassiveInputConnectionToAudioParam)
/* harmony export */ });
/* harmony import */ var _get_value_for_key__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-value-for-key */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js");
/* harmony import */ var _pick_element_from_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pick-element-from-set */ "./node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js");


const deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {
    const passiveInputConnections = (0,_get_value_for_key__WEBPACK_IMPORTED_MODULE_0__.getValueForKey)(passiveInputs, source);
    const matchingConnection = (0,_pick_element_from_set__WEBPACK_IMPORTED_MODULE_1__.pickElementFromSet)(passiveInputConnections, (passiveInputConnection) => passiveInputConnection[0] === output);
    if (passiveInputConnections.size === 0) {
        passiveInputs.delete(source);
    }
    return matchingConnection;
};
//# sourceMappingURL=delete-passive-input-connection-to-audio-param.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/detach-array-buffer.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/detach-array-buffer.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   detachArrayBuffer: () => (/* binding */ detachArrayBuffer)
/* harmony export */ });
const detachArrayBuffer = (arrayBuffer) => {
    const { port1, port2 } = new MessageChannel();
    return new Promise((resolve) => {
        const closeAndResolve = () => {
            port2.onmessage = null;
            port1.close();
            port2.close();
            resolve();
        };
        port2.onmessage = () => closeAndResolve();
        try {
            port1.postMessage(arrayBuffer, [arrayBuffer]);
        }
        catch {
            // Ignore errors.
        }
        finally {
            closeAndResolve();
        }
    });
};
//# sourceMappingURL=detach-array-buffer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   disconnectNativeAudioNodeFromNativeAudioNode: () => (/* binding */ disconnectNativeAudioNodeFromNativeAudioNode)
/* harmony export */ });
/* harmony import */ var _guards_native_audio_node_faker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../guards/native-audio-node-faker */ "./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js");

const disconnectNativeAudioNodeFromNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {
    if ((0,_guards_native_audio_node_faker__WEBPACK_IMPORTED_MODULE_0__.isNativeAudioNodeFaker)(nativeDestinationAudioNode)) {
        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode.inputs[input], output, 0);
    }
    else {
        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);
    }
};
//# sourceMappingURL=disconnect-native-audio-node-from-native-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   filterBuffer: () => (/* binding */ filterBuffer)
/* harmony export */ });
// This implementation as shamelessly inspired by source code of
// tslint:disable-next-line:max-line-length
// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.
const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {
    const inputLength = input.length;
    let i = bufferIndex;
    for (let j = 0; j < inputLength; j += 1) {
        let y = feedforward[0] * input[j];
        for (let k = 1; k < minLength; k += 1) {
            const x = (i - k) & (bufferLength - 1); // tslint:disable-line:no-bitwise
            y += feedforward[k] * xBuffer[x];
            y -= feedback[k] * yBuffer[x];
        }
        for (let k = minLength; k < feedforwardLength; k += 1) {
            y += feedforward[k] * xBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise
        }
        for (let k = minLength; k < feedbackLength; k += 1) {
            y -= feedback[k] * yBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise
        }
        xBuffer[i] = input[j];
        yBuffer[i] = y;
        i = (i + 1) & (bufferLength - 1); // tslint:disable-line:no-bitwise
        output[j] = y;
    }
    return i;
};
//# sourceMappingURL=filter-buffer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getAudioNodeConnections: () => (/* binding */ getAudioNodeConnections)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");
/* harmony import */ var _get_value_for_key__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-value-for-key */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js");


const getAudioNodeConnections = (audioNode) => {
    return (0,_get_value_for_key__WEBPACK_IMPORTED_MODULE_1__.getValueForKey)(_globals__WEBPACK_IMPORTED_MODULE_0__.AUDIO_NODE_CONNECTIONS_STORE, audioNode);
};
//# sourceMappingURL=get-audio-node-connections.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getAudioParamConnections: () => (/* binding */ getAudioParamConnections)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");
/* harmony import */ var _get_value_for_key__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-value-for-key */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js");


const getAudioParamConnections = (audioParam) => {
    return (0,_get_value_for_key__WEBPACK_IMPORTED_MODULE_1__.getValueForKey)(_globals__WEBPACK_IMPORTED_MODULE_0__.AUDIO_PARAM_CONNECTIONS_STORE, audioParam);
};
//# sourceMappingURL=get-audio-param-connections.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-worklet-processor.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-worklet-processor.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getAudioWorkletProcessor: () => (/* binding */ getAudioWorkletProcessor)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");
/* harmony import */ var _get_native_audio_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-native-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js");
/* harmony import */ var _get_value_for_key__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./get-value-for-key */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js");



const getAudioWorkletProcessor = (nativeOfflineAudioContext, proxy) => {
    const nodeToProcessorMap = (0,_get_value_for_key__WEBPACK_IMPORTED_MODULE_2__.getValueForKey)(_globals__WEBPACK_IMPORTED_MODULE_0__.NODE_TO_PROCESSOR_MAPS, nativeOfflineAudioContext);
    const nativeAudioWorkletNode = (0,_get_native_audio_node__WEBPACK_IMPORTED_MODULE_1__.getNativeAudioNode)(proxy);
    return (0,_get_value_for_key__WEBPACK_IMPORTED_MODULE_2__.getValueForKey)(nodeToProcessorMap, nativeAudioWorkletNode);
};
//# sourceMappingURL=get-audio-worklet-processor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getEventListenersOfAudioNode: () => (/* binding */ getEventListenersOfAudioNode)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");
/* harmony import */ var _get_value_for_key__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-value-for-key */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js");


const getEventListenersOfAudioNode = (audioNode) => {
    return (0,_get_value_for_key__WEBPACK_IMPORTED_MODULE_1__.getValueForKey)(_globals__WEBPACK_IMPORTED_MODULE_0__.EVENT_LISTENERS, audioNode);
};
//# sourceMappingURL=get-event-listeners-of-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/get-first-sample.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/get-first-sample.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getFirstSample: () => (/* binding */ getFirstSample)
/* harmony export */ });
const getFirstSample = (audioBuffer, buffer, channelNumber) => {
    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
    if (audioBuffer.copyFromChannel === undefined) {
        return audioBuffer.getChannelData(channelNumber)[0];
    }
    audioBuffer.copyFromChannel(buffer, channelNumber);
    return buffer[0];
};
//# sourceMappingURL=get-first-sample.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getNativeAudioNode: () => (/* binding */ getNativeAudioNode)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");
/* harmony import */ var _get_value_for_key__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-value-for-key */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js");


const getNativeAudioNode = (audioNode) => {
    return (0,_get_value_for_key__WEBPACK_IMPORTED_MODULE_1__.getValueForKey)(_globals__WEBPACK_IMPORTED_MODULE_0__.AUDIO_NODE_STORE, audioNode);
};
//# sourceMappingURL=get-native-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getNativeAudioParam: () => (/* binding */ getNativeAudioParam)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");
/* harmony import */ var _get_value_for_key__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-value-for-key */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js");


const getNativeAudioParam = (audioParam) => {
    return (0,_get_value_for_key__WEBPACK_IMPORTED_MODULE_1__.getValueForKey)(_globals__WEBPACK_IMPORTED_MODULE_0__.AUDIO_PARAM_STORE, audioParam);
};
//# sourceMappingURL=get-native-audio-param.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getValueForKey: () => (/* binding */ getValueForKey)
/* harmony export */ });
const getValueForKey = (map, key) => {
    const value = map.get(key);
    if (value === undefined) {
        throw new Error('A value with the given key could not be found.');
    }
    return value;
};
//# sourceMappingURL=get-value-for-key.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   insertElementInSet: () => (/* binding */ insertElementInSet)
/* harmony export */ });
const insertElementInSet = (set, element, predicate, ignoreDuplicates) => {
    for (const lmnt of set) {
        if (predicate(lmnt)) {
            if (ignoreDuplicates) {
                return false;
            }
            throw Error('The set contains at least one similar element.');
        }
    }
    set.add(element);
    return true;
};
//# sourceMappingURL=insert-element-in-set.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   interceptConnections: () => (/* binding */ interceptConnections)
/* harmony export */ });
const interceptConnections = (original, interceptor) => {
    original.connect = interceptor.connect.bind(interceptor);
    original.disconnect = interceptor.disconnect.bind(interceptor);
    return original;
};
//# sourceMappingURL=intercept-connections.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isActiveAudioNode: () => (/* binding */ isActiveAudioNode)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");

const isActiveAudioNode = (audioNode) => _globals__WEBPACK_IMPORTED_MODULE_0__.ACTIVE_AUDIO_NODE_STORE.has(audioNode);
//# sourceMappingURL=is-active-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/is-constructible.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/is-constructible.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isConstructible: () => (/* binding */ isConstructible)
/* harmony export */ });
const handler = {
    construct() {
        return handler;
    }
};
const isConstructible = (constructible) => {
    try {
        const proxy = new Proxy(constructible, handler);
        new proxy(); // tslint:disable-line:no-unused-expression
    }
    catch {
        return false;
    }
    return true;
};
//# sourceMappingURL=is-constructible.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/is-dc-curve.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/is-dc-curve.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isDCCurve: () => (/* binding */ isDCCurve)
/* harmony export */ });
const isDCCurve = (curve) => {
    if (curve === null) {
        return false;
    }
    const length = curve.length;
    if (length % 2 !== 0) {
        return curve[Math.floor(length / 2)] !== 0;
    }
    return curve[length / 2 - 1] + curve[length / 2] !== 0;
};
//# sourceMappingURL=is-dc-curve.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isOwnedByContext: () => (/* binding */ isOwnedByContext)
/* harmony export */ });
const isOwnedByContext = (nativeAudioNode, nativeContext) => {
    return nativeAudioNode.context === nativeContext;
};
//# sourceMappingURL=is-owned-by-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isPartOfACycle: () => (/* binding */ isPartOfACycle)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");

const isPartOfACycle = (audioNode) => {
    return _globals__WEBPACK_IMPORTED_MODULE_0__.CYCLE_COUNTERS.has(audioNode);
};
//# sourceMappingURL=is-part-of-a-cycle.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isPassiveAudioNode: () => (/* binding */ isPassiveAudioNode)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");

const isPassiveAudioNode = (audioNode) => {
    return !_globals__WEBPACK_IMPORTED_MODULE_0__.ACTIVE_AUDIO_NODE_STORE.has(audioNode);
};
//# sourceMappingURL=is-passive-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isValidLatencyHint: () => (/* binding */ isValidLatencyHint)
/* harmony export */ });
const isValidLatencyHint = (latencyHint) => {
    return (latencyHint === undefined ||
        typeof latencyHint === 'number' ||
        (typeof latencyHint === 'string' && (latencyHint === 'balanced' || latencyHint === 'interactive' || latencyHint === 'playback')));
};
//# sourceMappingURL=is-valid-latency-hint.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/overwrite-accessors.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/overwrite-accessors.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   overwriteAccessors: () => (/* binding */ overwriteAccessors)
/* harmony export */ });
const overwriteAccessors = (object, property, createGetter, createSetter) => {
    let prototype = object;
    while (!prototype.hasOwnProperty(property)) {
        prototype = Object.getPrototypeOf(prototype);
    }
    const { get, set } = Object.getOwnPropertyDescriptor(prototype, property);
    Object.defineProperty(object, property, { get: createGetter(get), set: createSetter(set) });
};
//# sourceMappingURL=overwrite-accessors.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   pickElementFromSet: () => (/* binding */ pickElementFromSet)
/* harmony export */ });
const pickElementFromSet = (set, predicate) => {
    const matchingElements = Array.from(set).filter(predicate);
    if (matchingElements.length > 1) {
        throw Error('More than one element was found.');
    }
    if (matchingElements.length === 0) {
        throw Error('No element was found.');
    }
    const [matchingElement] = matchingElements;
    set.delete(matchingElement);
    return matchingElement;
};
//# sourceMappingURL=pick-element-from-set.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/sanitize-audio-worklet-node-options.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/sanitize-audio-worklet-node-options.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   sanitizeAudioWorkletNodeOptions: () => (/* binding */ sanitizeAudioWorkletNodeOptions)
/* harmony export */ });
const sanitizeAudioWorkletNodeOptions = (options) => {
    return {
        ...options,
        outputChannelCount: options.outputChannelCount !== undefined
            ? options.outputChannelCount
            : options.numberOfInputs === 1 && options.numberOfOutputs === 1
                ? /*
                   * Bug #61: This should be the computedNumberOfChannels, but unfortunately that is almost impossible to fake. That's why
                   * the channelCountMode is required to be 'explicit' as long as there is not a native implementation in every browser. That
                   * makes sure the computedNumberOfChannels is equivilant to the channelCount which makes it much easier to compute.
                   */
                    [options.channelCount]
                : Array.from({ length: options.numberOfOutputs }, () => 1)
    };
};
//# sourceMappingURL=sanitize-audio-worklet-node-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/sanitize-channel-splitter-options.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/sanitize-channel-splitter-options.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   sanitizeChannelSplitterOptions: () => (/* binding */ sanitizeChannelSplitterOptions)
/* harmony export */ });
const sanitizeChannelSplitterOptions = (options) => {
    return { ...options, channelCount: options.numberOfOutputs };
};
//# sourceMappingURL=sanitize-channel-splitter-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/sanitize-periodic-wave-options.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/sanitize-periodic-wave-options.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   sanitizePeriodicWaveOptions: () => (/* binding */ sanitizePeriodicWaveOptions)
/* harmony export */ });
const sanitizePeriodicWaveOptions = (options) => {
    const { imag, real } = options;
    if (imag === undefined) {
        if (real === undefined) {
            return { ...options, imag: [0, 0], real: [0, 0] };
        }
        return { ...options, imag: Array.from(real, () => 0), real };
    }
    if (real === undefined) {
        return { ...options, imag, real: Array.from(imag, () => 0) };
    }
    return { ...options, imag, real };
};
//# sourceMappingURL=sanitize-periodic-wave-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   setInternalStateToActive: () => (/* binding */ setInternalStateToActive)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");
/* harmony import */ var _get_event_listeners_of_audio_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-event-listeners-of-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js");


const setInternalStateToActive = (audioNode) => {
    if (_globals__WEBPACK_IMPORTED_MODULE_0__.ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {
        throw new Error('The AudioNode is already stored.');
    }
    _globals__WEBPACK_IMPORTED_MODULE_0__.ACTIVE_AUDIO_NODE_STORE.add(audioNode);
    (0,_get_event_listeners_of_audio_node__WEBPACK_IMPORTED_MODULE_1__.getEventListenersOfAudioNode)(audioNode).forEach((eventListener) => eventListener(true));
};
//# sourceMappingURL=set-internal-state-to-active.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   setInternalStateToPassiveWhenNecessary: () => (/* binding */ setInternalStateToPassiveWhenNecessary)
/* harmony export */ });
/* harmony import */ var _guards_audio_worklet_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../guards/audio-worklet-node */ "./node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js");
/* harmony import */ var _set_internal_state_to_passive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./set-internal-state-to-passive */ "./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js");


// Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.
const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs) => {
    if (!(0,_guards_audio_worklet_node__WEBPACK_IMPORTED_MODULE_0__.isAudioWorkletNode)(audioNode) && activeInputs.every((connections) => connections.size === 0)) {
        (0,_set_internal_state_to_passive__WEBPACK_IMPORTED_MODULE_1__.setInternalStateToPassive)(audioNode);
    }
};
//# sourceMappingURL=set-internal-state-to-passive-when-necessary.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   setInternalStateToPassive: () => (/* binding */ setInternalStateToPassive)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");
/* harmony import */ var _get_event_listeners_of_audio_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-event-listeners-of-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js");


const setInternalStateToPassive = (audioNode) => {
    if (!_globals__WEBPACK_IMPORTED_MODULE_0__.ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {
        throw new Error('The AudioNode is not stored.');
    }
    _globals__WEBPACK_IMPORTED_MODULE_0__.ACTIVE_AUDIO_NODE_STORE.delete(audioNode);
    (0,_get_event_listeners_of_audio_node__WEBPACK_IMPORTED_MODULE_1__.getEventListenersOfAudioNode)(audioNode).forEach((eventListener) => eventListener(false));
};
//# sourceMappingURL=set-internal-state-to-passive.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/set-value-at-time-until-possible.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/set-value-at-time-until-possible.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   setValueAtTimeUntilPossible: () => (/* binding */ setValueAtTimeUntilPossible)
/* harmony export */ });
const setValueAtTimeUntilPossible = (audioParam, value, startTime) => {
    try {
        audioParam.setValueAtTime(value, startTime);
    }
    catch (err) {
        if (err.code !== 9) {
            throw err;
        }
        setValueAtTimeUntilPossible(audioParam, value, startTime + 1e-7);
    }
};
//# sourceMappingURL=set-value-at-time-until-possible.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/split-import-statements.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/split-import-statements.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   splitImportStatements: () => (/* binding */ splitImportStatements)
/* harmony export */ });
/*
 * This massive regex tries to cover all the following cases.
 *
 * import './path';
 * import defaultImport from './path';
 * import { namedImport } from './path';
 * import { namedImport as renamendImport } from './path';
 * import * as namespaceImport from './path';
 * import defaultImport, { namedImport } from './path';
 * import defaultImport, { namedImport as renamendImport } from './path';
 * import defaultImport, * as namespaceImport from './path';
 */
const IMPORT_STATEMENT_REGEX = /^import(?:(?:[\s]+[\w]+|(?:[\s]+[\w]+[\s]*,)?[\s]*\{[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?(?:[\s]*,[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?)*[\s]*}|(?:[\s]+[\w]+[\s]*,)?[\s]*\*[\s]+as[\s]+[\w]+)[\s]+from)?(?:[\s]*)("([^"\\]|\\.)+"|'([^'\\]|\\.)+')(?:[\s]*);?/; // tslint:disable-line:max-line-length
const splitImportStatements = (source, url) => {
    const importStatements = [];
    let sourceWithoutImportStatements = source.replace(/^[\s]+/, '');
    let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);
    while (result !== null) {
        const unresolvedUrl = result[1].slice(1, -1);
        const importStatementWithResolvedUrl = result[0]
            .replace(/([\s]+)?;?$/, '')
            .replace(unresolvedUrl, new URL(unresolvedUrl, url).toString());
        importStatements.push(importStatementWithResolvedUrl);
        sourceWithoutImportStatements = sourceWithoutImportStatements.slice(result[0].length).replace(/^[\s]+/, '');
        result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);
    }
    return [importStatements.join(';'), sourceWithoutImportStatements];
};
//# sourceMappingURL=split-import-statements.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/test-analyser-node-get-float-time-domain-data-method-support.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/test-analyser-node-get-float-time-domain-data-method-support.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   testAnalyserNodeGetFloatTimeDomainDataMethodSupport: () => (/* binding */ testAnalyserNodeGetFloatTimeDomainDataMethodSupport)
/* harmony export */ });
const testAnalyserNodeGetFloatTimeDomainDataMethodSupport = (nativeAnalyserNode) => {
    return typeof nativeAnalyserNode.getFloatTimeDomainData === 'function';
};
//# sourceMappingURL=test-analyser-node-get-float-time-domain-data-method-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   testAudioBufferCopyChannelMethodsOutOfBoundsSupport: () => (/* binding */ testAudioBufferCopyChannelMethodsOutOfBoundsSupport)
/* harmony export */ });
const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = (nativeAudioBuffer) => {
    try {
        nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);
    }
    catch {
        return false;
    }
    return true;
};
//# sourceMappingURL=test-audio-buffer-copy-channel-methods-out-of-bounds-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport: () => (/* binding */ testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport)
/* harmony export */ });
const testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = (nativeContext) => {
    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
    nativeAudioBufferSourceNode.start();
    try {
        nativeAudioBufferSourceNode.start();
    }
    catch {
        return true;
    }
    return false;
};
//# sourceMappingURL=test-audio-buffer-source-node-start-method-consecutive-calls-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-offset-clamping-support.js":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-offset-clamping-support.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   testAudioBufferSourceNodeStartMethodOffsetClampingSupport: () => (/* binding */ testAudioBufferSourceNodeStartMethodOffsetClampingSupport)
/* harmony export */ });
const testAudioBufferSourceNodeStartMethodOffsetClampingSupport = (nativeContext) => {
    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
    const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);
    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;
    try {
        nativeAudioBufferSourceNode.start(0, 1);
    }
    catch {
        return false;
    }
    return true;
};
//# sourceMappingURL=test-audio-buffer-source-node-start-method-offset-clamping-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   testAudioBufferSourceNodeStopMethodNullifiedBufferSupport: () => (/* binding */ testAudioBufferSourceNodeStopMethodNullifiedBufferSupport)
/* harmony export */ });
const testAudioBufferSourceNodeStopMethodNullifiedBufferSupport = (nativeContext) => {
    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
    nativeAudioBufferSourceNode.start();
    try {
        nativeAudioBufferSourceNode.stop();
    }
    catch {
        return false;
    }
    return true;
};
//# sourceMappingURL=test-audio-buffer-source-node-stop-method-nullified-buffer-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-node-disconnect-method-support.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-node-disconnect-method-support.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   testAudioNodeDisconnectMethodSupport: () => (/* binding */ testAudioNodeDisconnectMethodSupport)
/* harmony export */ });
const testAudioNodeDisconnectMethodSupport = (nativeAudioContext, nativeAudioWorkletNodeConstructor) => {
    return new Promise((resolve) => {
        /*
         * This bug existed in Safari up until v14.0.2. Since AudioWorklets were not supported in Safari until v14.1 the presence of the
         * constructor for an AudioWorkletNode can be used here to skip the test.
         */
        if (nativeAudioWorkletNodeConstructor !== null) {
            resolve(true);
        }
        else {
            const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1); // tslint:disable-line deprecation
            const dummy = nativeAudioContext.createGain();
            // Bug #95: Safari does not play one sample buffers.
            const ones = nativeAudioContext.createBuffer(1, 2, 44100);
            const channelData = ones.getChannelData(0);
            channelData[0] = 1;
            channelData[1] = 1;
            const source = nativeAudioContext.createBufferSource();
            source.buffer = ones;
            source.loop = true;
            source.connect(analyzer).connect(nativeAudioContext.destination);
            source.connect(dummy);
            source.disconnect(dummy);
            // tslint:disable-next-line:deprecation
            analyzer.onaudioprocess = (event) => {
                const chnnlDt = event.inputBuffer.getChannelData(0); // tslint:disable-line deprecation
                if (Array.prototype.some.call(chnnlDt, (sample) => sample === 1)) {
                    resolve(true);
                }
                else {
                    resolve(false);
                }
                source.stop();
                analyzer.onaudioprocess = null; // tslint:disable-line:deprecation
                source.disconnect(analyzer);
                analyzer.disconnect(nativeAudioContext.destination);
            };
            source.start();
        }
    });
};
//# sourceMappingURL=test-audio-node-disconnect-method-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support.js ***!
  \***************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   testAudioScheduledSourceNodeStartMethodNegativeParametersSupport: () => (/* binding */ testAudioScheduledSourceNodeStartMethodNegativeParametersSupport)
/* harmony export */ });
const testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = (nativeContext) => {
    const nativeAudioBufferSourceNode = nativeContext.createOscillator();
    try {
        nativeAudioBufferSourceNode.start(-1);
    }
    catch (err) {
        return err instanceof RangeError;
    }
    return false;
};
//# sourceMappingURL=test-audio-scheduled-source-node-start-method-negative-parameters-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport: () => (/* binding */ testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport)
/* harmony export */ });
const testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = (nativeContext) => {
    const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);
    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;
    nativeAudioBufferSourceNode.start();
    nativeAudioBufferSourceNode.stop();
    try {
        nativeAudioBufferSourceNode.stop();
        return true;
    }
    catch {
        return false;
    }
};
//# sourceMappingURL=test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js ***!
  \**************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   testAudioScheduledSourceNodeStopMethodNegativeParametersSupport: () => (/* binding */ testAudioScheduledSourceNodeStopMethodNegativeParametersSupport)
/* harmony export */ });
const testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = (nativeContext) => {
    const nativeAudioBufferSourceNode = nativeContext.createOscillator();
    try {
        nativeAudioBufferSourceNode.stop(-1);
    }
    catch (err) {
        return err instanceof RangeError;
    }
    return false;
};
//# sourceMappingURL=test-audio-scheduled-source-node-stop-method-negative-parameters-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-worklet-node-options-clonability.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-worklet-node-options-clonability.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   testAudioWorkletNodeOptionsClonability: () => (/* binding */ testAudioWorkletNodeOptionsClonability)
/* harmony export */ });
const testAudioWorkletNodeOptionsClonability = (audioWorkletNodeOptions) => {
    const { port1, port2 } = new MessageChannel();
    try {
        // This will throw an error if the audioWorkletNodeOptions are not clonable.
        port1.postMessage(audioWorkletNodeOptions);
    }
    finally {
        port1.close();
        port2.close();
    }
};
//# sourceMappingURL=test-audio-worklet-node-options-clonability.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/test-clonability-of-audio-worklet-node-options.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/test-clonability-of-audio-worklet-node-options.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   testClonabilityOfAudioWorkletNodeOptions: () => (/* binding */ testClonabilityOfAudioWorkletNodeOptions)
/* harmony export */ });
const testClonabilityOfAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {
    const { port1 } = new MessageChannel();
    try {
        // This will throw an error if the audioWorkletNodeOptions are not clonable.
        port1.postMessage(audioWorkletNodeOptions);
    }
    finally {
        port1.close();
    }
};
//# sourceMappingURL=test-clonability-of-audio-worklet-node-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/test-dom-exception-constructor-support.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/test-dom-exception-constructor-support.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   testDomExceptionConstructorSupport: () => (/* binding */ testDomExceptionConstructorSupport)
/* harmony export */ });
/*
 * Bug #122: Edge up to version v18 did not allow to construct a DOMException'. It also had a couple more bugs but since this is easy to
 * test it's used here as a placeholder.
 *
 * Bug #27: Edge up to version v18 did reject an invalid arrayBuffer passed to decodeAudioData() with a DOMException.
 *
 * Bug #50: Edge up to version v18 did not allow to create AudioNodes on a closed context.
 *
 * Bug #57: Edge up to version v18 did not throw an error when assigning the type of an OscillatorNode to 'custom'.
 *
 * Bug #63: Edge up to version v18 did not expose the mediaElement property of a MediaElementAudioSourceNode.
 *
 * Bug #64: Edge up to version v18 did not support the MediaStreamAudioDestinationNode.
 *
 * Bug #71: Edge up to version v18 did not allow to set the buffer of an AudioBufferSourceNode to null.
 *
 * Bug #93: Edge up to version v18 did set the sampleRate of an AudioContext to zero when it was closed.
 *
 * Bug #101: Edge up to version v18 refused to execute decodeAudioData() on a closed context.
 *
 * Bug #106: Edge up to version v18 did not expose the maxValue and minValue properties of the pan AudioParam of a StereoPannerNode.
 *
 * Bug #110: Edge up to version v18 did not expose the maxValue and minValue properties of the attack, knee, ratio, release and threshold AudioParams of a DynamicsCompressorNode.
 *
 * Bug #123: Edge up to version v18 did not support HRTF as the panningModel for a PannerNode.
 *
 * Bug #145: Edge up to version v18 did throw an IndexSizeError when an OfflineAudioContext was created with a sampleRate of zero.
 *
 * Bug #161: Edge up to version v18 did not expose the maxValue and minValue properties of the delayTime AudioParam of a DelayNode.
 */
const testDomExceptionConstructorSupport = () => {
    try {
        new DOMException(); // tslint:disable-line:no-unused-expression
    }
    catch {
        return false;
    }
    return true;
};
//# sourceMappingURL=test-dom-exception-constructor-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   testPromiseSupport: () => (/* binding */ testPromiseSupport)
/* harmony export */ });
const testPromiseSupport = (nativeContext) => {
    // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.
    const uint32Array = new Uint32Array([1179011410, 40, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 4, 0]);
    try {
        // Bug #1: Safari requires a successCallback.
        const promise = nativeContext.decodeAudioData(uint32Array.buffer, () => {
            // Ignore the success callback.
        });
        if (promise === undefined) {
            return false;
        }
        promise.catch(() => {
            // Ignore rejected errors.
        });
        return true;
    }
    catch {
        // Ignore errors.
    }
    return false;
};
//# sourceMappingURL=test-promise-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/test-transferables-support.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/test-transferables-support.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   testTransferablesSupport: () => (/* binding */ testTransferablesSupport)
/* harmony export */ });
// Safari at version 11 did not support transferables.
const testTransferablesSupport = () => new Promise((resolve) => {
    const arrayBuffer = new ArrayBuffer(0);
    const { port1, port2 } = new MessageChannel();
    port1.onmessage = ({ data }) => resolve(data !== null);
    port2.postMessage(arrayBuffer, [arrayBuffer]);
});
//# sourceMappingURL=test-transferables-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/visit-each-audio-node-once.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/visit-each-audio-node-once.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   visitEachAudioNodeOnce: () => (/* binding */ visitEachAudioNodeOnce)
/* harmony export */ });
const visitEachAudioNodeOnce = (cycles, visitor) => {
    const counts = new Map();
    for (const cycle of cycles) {
        for (const audioNode of cycle) {
            const count = counts.get(audioNode);
            counts.set(audioNode, count === undefined ? 1 : count + 1);
        }
    }
    counts.forEach((count, audioNode) => visitor(audioNode, count));
};
//# sourceMappingURL=visit-each-audio-node-once.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-analyser-node-get-float-time-domain-data-method.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/wrap-analyser-node-get-float-time-domain-data-method.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   wrapAnalyserNodeGetFloatTimeDomainDataMethod: () => (/* binding */ wrapAnalyserNodeGetFloatTimeDomainDataMethod)
/* harmony export */ });
const wrapAnalyserNodeGetFloatTimeDomainDataMethod = (nativeAnalyserNode) => {
    nativeAnalyserNode.getFloatTimeDomainData = (array) => {
        const byteTimeDomainData = new Uint8Array(array.length);
        nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);
        const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);
        for (let i = 0; i < length; i += 1) {
            array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;
        }
        return array;
    };
};
//# sourceMappingURL=wrap-analyser-node-get-float-time-domain-data-method.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   wrapAudioBufferGetChannelDataMethod: () => (/* binding */ wrapAudioBufferGetChannelDataMethod)
/* harmony export */ });
/* harmony import */ var _factories_index_size_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../factories/index-size-error */ "./node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js");

const wrapAudioBufferGetChannelDataMethod = (audioBuffer) => {
    audioBuffer.getChannelData = ((getChannelData) => {
        return (channel) => {
            try {
                return getChannelData.call(audioBuffer, channel);
            }
            catch (err) {
                if (err.code === 12) {
                    throw (0,_factories_index_size_error__WEBPACK_IMPORTED_MODULE_0__.createIndexSizeError)();
                }
                throw err;
            }
        };
    })(audioBuffer.getChannelData);
};
//# sourceMappingURL=wrap-audio-buffer-get-channel-data-method.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   wrapAudioBufferSourceNodeStartMethodConsecutiveCalls: () => (/* binding */ wrapAudioBufferSourceNodeStartMethodConsecutiveCalls)
/* harmony export */ });
/* harmony import */ var _factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../factories/invalid-state-error */ "./node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js");

const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = (nativeAudioBufferSourceNode) => {
    nativeAudioBufferSourceNode.start = ((start) => {
        let isScheduled = false;
        return (when = 0, offset = 0, duration) => {
            if (isScheduled) {
                throw (0,_factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_0__.createInvalidStateError)();
            }
            start.call(nativeAudioBufferSourceNode, when, offset, duration);
            isScheduled = true;
        };
    })(nativeAudioBufferSourceNode.start);
};
//# sourceMappingURL=wrap-audio-buffer-source-node-start-method-consecutive-calls.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   wrapAudioBufferSourceNodeStartMethodOffsetClamping: () => (/* binding */ wrapAudioBufferSourceNodeStartMethodOffsetClamping)
/* harmony export */ });
const wrapAudioBufferSourceNodeStartMethodOffsetClamping = (nativeAudioBufferSourceNode) => {
    nativeAudioBufferSourceNode.start = ((start) => {
        return (when = 0, offset = 0, duration) => {
            const buffer = nativeAudioBufferSourceNode.buffer;
            // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.
            const clampedOffset = buffer === null ? offset : Math.min(buffer.duration, offset);
            // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.
            if (buffer !== null && clampedOffset > buffer.duration - 0.5 / nativeAudioBufferSourceNode.context.sampleRate) {
                start.call(nativeAudioBufferSourceNode, when, 0, 0);
            }
            else {
                start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);
            }
        };
    })(nativeAudioBufferSourceNode.start);
};
//# sourceMappingURL=wrap-audio-buffer-source-node-start-method-offset-clamping.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-node-disconnect-method.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-node-disconnect-method.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   wrapAudioNodeDisconnectMethod: () => (/* binding */ wrapAudioNodeDisconnectMethod)
/* harmony export */ });
/* harmony import */ var _guards_native_audio_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../guards/native-audio-node */ "./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js");

const wrapAudioNodeDisconnectMethod = (nativeAudioNode) => {
    const connections = new Map();
    nativeAudioNode.connect = ((connect) => {
        // tslint:disable-next-line:invalid-void no-inferrable-types
        return (destination, output = 0, input = 0) => {
            const returnValue = (0,_guards_native_audio_node__WEBPACK_IMPORTED_MODULE_0__.isNativeAudioNode)(destination) ? connect(destination, output, input) : connect(destination, output);
            // Save the new connection only if the calls to connect above didn't throw an error.
            const connectionsToDestination = connections.get(destination);
            if (connectionsToDestination === undefined) {
                connections.set(destination, [{ input, output }]);
            }
            else {
                if (connectionsToDestination.every((connection) => connection.input !== input || connection.output !== output)) {
                    connectionsToDestination.push({ input, output });
                }
            }
            return returnValue;
        };
    })(nativeAudioNode.connect.bind(nativeAudioNode));
    nativeAudioNode.disconnect = ((disconnect) => {
        return (destinationOrOutput, output, input) => {
            disconnect.apply(nativeAudioNode);
            if (destinationOrOutput === undefined) {
                connections.clear();
            }
            else if (typeof destinationOrOutput === 'number') {
                for (const [destination, connectionsToDestination] of connections) {
                    const filteredConnections = connectionsToDestination.filter((connection) => connection.output !== destinationOrOutput);
                    if (filteredConnections.length === 0) {
                        connections.delete(destination);
                    }
                    else {
                        connections.set(destination, filteredConnections);
                    }
                }
            }
            else if (connections.has(destinationOrOutput)) {
                if (output === undefined) {
                    connections.delete(destinationOrOutput);
                }
                else {
                    const connectionsToDestination = connections.get(destinationOrOutput);
                    if (connectionsToDestination !== undefined) {
                        const filteredConnections = connectionsToDestination.filter((connection) => connection.output !== output && (connection.input !== input || input === undefined));
                        if (filteredConnections.length === 0) {
                            connections.delete(destinationOrOutput);
                        }
                        else {
                            connections.set(destinationOrOutput, filteredConnections);
                        }
                    }
                }
            }
            for (const [destination, connectionsToDestination] of connections) {
                connectionsToDestination.forEach((connection) => {
                    if ((0,_guards_native_audio_node__WEBPACK_IMPORTED_MODULE_0__.isNativeAudioNode)(destination)) {
                        nativeAudioNode.connect(destination, connection.output, connection.input);
                    }
                    else {
                        nativeAudioNode.connect(destination, connection.output);
                    }
                });
            }
        };
    })(nativeAudioNode.disconnect);
};
//# sourceMappingURL=wrap-audio-node-disconnect-method.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js ***!
  \*******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   wrapAudioScheduledSourceNodeStartMethodNegativeParameters: () => (/* binding */ wrapAudioScheduledSourceNodeStartMethodNegativeParameters)
/* harmony export */ });
const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {
    nativeAudioScheduledSourceNode.start = ((start) => {
        return (when = 0, offset = 0, duration) => {
            if ((typeof duration === 'number' && duration < 0) || offset < 0 || when < 0) {
                throw new RangeError("The parameters can't be negative.");
            }
            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.
            start.call(nativeAudioScheduledSourceNode, when, offset, duration);
        };
    })(nativeAudioScheduledSourceNode.start);
};
//# sourceMappingURL=wrap-audio-scheduled-source-node-start-method-negative-parameters.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls: () => (/* binding */ wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls)
/* harmony export */ });
/* harmony import */ var _intercept_connections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./intercept-connections */ "./node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js");

const wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = (nativeAudioScheduledSourceNode, nativeContext) => {
    const nativeGainNode = nativeContext.createGain();
    nativeAudioScheduledSourceNode.connect(nativeGainNode);
    const disconnectGainNode = ((disconnect) => {
        return () => {
            // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.
            disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);
            nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);
        };
    })(nativeAudioScheduledSourceNode.disconnect);
    nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);
    (0,_intercept_connections__WEBPACK_IMPORTED_MODULE_0__.interceptConnections)(nativeAudioScheduledSourceNode, nativeGainNode);
    nativeAudioScheduledSourceNode.stop = ((stop) => {
        let isStopped = false;
        return (when = 0) => {
            if (isStopped) {
                try {
                    stop.call(nativeAudioScheduledSourceNode, when);
                }
                catch {
                    nativeGainNode.gain.setValueAtTime(0, when);
                }
            }
            else {
                stop.call(nativeAudioScheduledSourceNode, when);
                isStopped = true;
            }
        };
    })(nativeAudioScheduledSourceNode.stop);
};
//# sourceMappingURL=wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   wrapAudioScheduledSourceNodeStopMethodNegativeParameters: () => (/* binding */ wrapAudioScheduledSourceNodeStopMethodNegativeParameters)
/* harmony export */ });
const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {
    nativeAudioScheduledSourceNode.stop = ((stop) => {
        return (when = 0) => {
            if (when < 0) {
                throw new RangeError("The parameter can't be negative.");
            }
            stop.call(nativeAudioScheduledSourceNode, when);
        };
    })(nativeAudioScheduledSourceNode.stop);
};
//# sourceMappingURL=wrap-audio-scheduled-source-node-stop-method-negative-parameters.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-channel-splitter-node.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/wrap-channel-splitter-node.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   wrapChannelSplitterNode: () => (/* binding */ wrapChannelSplitterNode)
/* harmony export */ });
/* harmony import */ var _factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../factories/invalid-state-error */ "./node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js");

const wrapChannelSplitterNode = (channelSplitterNode) => {
    const channelCount = channelSplitterNode.numberOfOutputs;
    // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.
    Object.defineProperty(channelSplitterNode, 'channelCount', {
        get: () => channelCount,
        set: (value) => {
            if (value !== channelCount) {
                throw (0,_factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_0__.createInvalidStateError)();
            }
        }
    });
    // Bug #30: Safari does not throw an error when attempting to change the channelCountMode to something other than explicit.
    Object.defineProperty(channelSplitterNode, 'channelCountMode', {
        get: () => 'explicit',
        set: (value) => {
            if (value !== 'explicit') {
                throw (0,_factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_0__.createInvalidStateError)();
            }
        }
    });
    // Bug #32: Safari does not throw an error when attempting to change the channelInterpretation to something other than discrete.
    Object.defineProperty(channelSplitterNode, 'channelInterpretation', {
        get: () => 'discrete',
        set: (value) => {
            if (value !== 'discrete') {
                throw (0,_factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_0__.createInvalidStateError)();
            }
        }
    });
};
//# sourceMappingURL=wrap-channel-splitter-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-event-listener.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/wrap-event-listener.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   wrapEventListener: () => (/* binding */ wrapEventListener)
/* harmony export */ });
const wrapEventListener = (target, eventListener) => {
    return (event) => {
        const descriptor = { value: target };
        Object.defineProperties(event, {
            currentTarget: descriptor,
            target: descriptor
        });
        if (typeof eventListener === 'function') {
            return eventListener.call(target, event);
        }
        return eventListener.handleEvent.call(target, event);
    };
};
//# sourceMappingURL=wrap-event-listener.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-iir-filter-node-get-frequency-response-method.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/helpers/wrap-iir-filter-node-get-frequency-response-method.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   wrapIIRFilterNodeGetFrequencyResponseMethod: () => (/* binding */ wrapIIRFilterNodeGetFrequencyResponseMethod)
/* harmony export */ });
/* harmony import */ var _factories_invalid_access_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../factories/invalid-access-error */ "./node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js");

const wrapIIRFilterNodeGetFrequencyResponseMethod = (nativeIIRFilterNode) => {
    nativeIIRFilterNode.getFrequencyResponse = ((getFrequencyResponse) => {
        return (frequencyHz, magResponse, phaseResponse) => {
            if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {
                throw (0,_factories_invalid_access_error__WEBPACK_IMPORTED_MODULE_0__.createInvalidAccessError)();
            }
            return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);
        };
    })(nativeIIRFilterNode.getFrequencyResponse);
};
//# sourceMappingURL=wrap-iir-filter-node-get-frequency-response-method.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/analyser-node.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/analyser-node.js ***!
  \******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=analyser-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/analyser-options.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/analyser-options.js ***!
  \*********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=analyser-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-options.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-options.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-buffer-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node-renderer.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node-renderer.js ***!
  \**************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-buffer-source-node-renderer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-buffer-source-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-options.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-options.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-buffer-source-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer.js ***!
  \*****************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-buffer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-context-options.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-context-options.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-context-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-context.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-context.js ***!
  \******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-destination-node.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-destination-node.js ***!
  \***************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-destination-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-listener.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-listener.js ***!
  \*******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-listener.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-options.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-options.js ***!
  \***********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-node-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-renderer.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-renderer.js ***!
  \************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-node-renderer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-node.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-node.js ***!
  \***************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-descriptor.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-descriptor.js ***!
  \***************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-param-descriptor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-renderer.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-renderer.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-param-renderer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-param.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-param.js ***!
  \****************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-param.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node-event-map.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node-event-map.js ***!
  \******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-scheduled-source-node-event-map.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-scheduled-source-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-event-map.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-event-map.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-worklet-node-event-map.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-options.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-options.js ***!
  \*******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-worklet-node-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node.js ***!
  \***********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-worklet-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor-constructor.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor-constructor.js ***!
  \****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-worklet-processor-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-worklet-processor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet.js ***!
  \******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-worklet.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/automation.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/automation.js ***!
  \***************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=automation.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/base-audio-context.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/base-audio-context.js ***!
  \***********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=base-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-node.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-node.js ***!
  \***********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=biquad-filter-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-options.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-options.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=biquad-filter-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/channel-merger-options.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/channel-merger-options.js ***!
  \***************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=channel-merger-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/channel-splitter-options.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/channel-splitter-options.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=channel-splitter-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/common-audio-context.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/common-audio-context.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=common-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/common-offline-audio-context.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/common-offline-audio-context.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=common-offline-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node-renderer.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node-renderer.js ***!
  \**********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=constant-source-node-renderer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=constant-source-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-options.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-options.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=constant-source-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/convolver-node.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/convolver-node.js ***!
  \*******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=convolver-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/convolver-options.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/convolver-options.js ***!
  \**********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=convolver-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/delay-node.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/delay-node.js ***!
  \***************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=delay-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/delay-options.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/delay-options.js ***!
  \******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=delay-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-node.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-node.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=dynamics-compressor-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-options.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-options.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=dynamics-compressor-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/event-target.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/event-target.js ***!
  \*****************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=event-target.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/gain-node.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/gain-node.js ***!
  \**************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=gain-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/gain-options.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/gain-options.js ***!
  \*****************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=gain-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-node.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-node.js ***!
  \********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=iir-filter-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-options.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-options.js ***!
  \***********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=iir-filter-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony import */ var _analyser_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./analyser-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/analyser-node.js");
/* harmony import */ var _analyser_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./analyser-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/analyser-options.js");
/* harmony import */ var _audio_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./audio-buffer */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer.js");
/* harmony import */ var _audio_buffer_options__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./audio-buffer-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-options.js");
/* harmony import */ var _audio_buffer_source_node__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./audio-buffer-source-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node.js");
/* harmony import */ var _audio_buffer_source_node_renderer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./audio-buffer-source-node-renderer */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node-renderer.js");
/* harmony import */ var _audio_buffer_source_options__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./audio-buffer-source-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-options.js");
/* harmony import */ var _audio_context__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./audio-context */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-context.js");
/* harmony import */ var _audio_context_options__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./audio-context-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-context-options.js");
/* harmony import */ var _audio_destination_node__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./audio-destination-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-destination-node.js");
/* harmony import */ var _audio_listener__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./audio-listener */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-listener.js");
/* harmony import */ var _audio_node__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./audio-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-node.js");
/* harmony import */ var _audio_node_options__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./audio-node-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-options.js");
/* harmony import */ var _audio_node_renderer__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./audio-node-renderer */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-renderer.js");
/* harmony import */ var _audio_param__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./audio-param */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-param.js");
/* harmony import */ var _audio_param_descriptor__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./audio-param-descriptor */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-descriptor.js");
/* harmony import */ var _audio_param_renderer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./audio-param-renderer */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-renderer.js");
/* harmony import */ var _audio_scheduled_source_node__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./audio-scheduled-source-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node.js");
/* harmony import */ var _audio_scheduled_source_node_event_map__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./audio-scheduled-source-node-event-map */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node-event-map.js");
/* harmony import */ var _audio_worklet__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./audio-worklet */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet.js");
/* harmony import */ var _audio_worklet_node__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./audio-worklet-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node.js");
/* harmony import */ var _audio_worklet_node_event_map__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./audio-worklet-node-event-map */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-event-map.js");
/* harmony import */ var _audio_worklet_node_options__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./audio-worklet-node-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-options.js");
/* harmony import */ var _audio_worklet_processor__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./audio-worklet-processor */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor.js");
/* harmony import */ var _audio_worklet_processor_constructor__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./audio-worklet-processor-constructor */ "./node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor-constructor.js");
/* harmony import */ var _automation__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./automation */ "./node_modules/standardized-audio-context/build/es2019/interfaces/automation.js");
/* harmony import */ var _base_audio_context__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./base-audio-context */ "./node_modules/standardized-audio-context/build/es2019/interfaces/base-audio-context.js");
/* harmony import */ var _biquad_filter_node__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./biquad-filter-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-node.js");
/* harmony import */ var _biquad_filter_options__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./biquad-filter-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-options.js");
/* harmony import */ var _channel_merger_options__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./channel-merger-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/channel-merger-options.js");
/* harmony import */ var _channel_splitter_options__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./channel-splitter-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/channel-splitter-options.js");
/* harmony import */ var _common_audio_context__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./common-audio-context */ "./node_modules/standardized-audio-context/build/es2019/interfaces/common-audio-context.js");
/* harmony import */ var _common_offline_audio_context__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./common-offline-audio-context */ "./node_modules/standardized-audio-context/build/es2019/interfaces/common-offline-audio-context.js");
/* harmony import */ var _constant_source_node__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./constant-source-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node.js");
/* harmony import */ var _constant_source_node_renderer__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./constant-source-node-renderer */ "./node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node-renderer.js");
/* harmony import */ var _constant_source_options__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./constant-source-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-options.js");
/* harmony import */ var _convolver_node__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./convolver-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/convolver-node.js");
/* harmony import */ var _convolver_options__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./convolver-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/convolver-options.js");
/* harmony import */ var _delay_node__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./delay-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/delay-node.js");
/* harmony import */ var _delay_options__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./delay-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/delay-options.js");
/* harmony import */ var _dynamics_compressor_node__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./dynamics-compressor-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-node.js");
/* harmony import */ var _dynamics_compressor_options__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./dynamics-compressor-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-options.js");
/* harmony import */ var _event_target__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./event-target */ "./node_modules/standardized-audio-context/build/es2019/interfaces/event-target.js");
/* harmony import */ var _gain_node__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./gain-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/gain-node.js");
/* harmony import */ var _gain_options__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./gain-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/gain-options.js");
/* harmony import */ var _iir_filter_node__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./iir-filter-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-node.js");
/* harmony import */ var _iir_filter_options__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./iir-filter-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-options.js");
/* harmony import */ var _media_element_audio_source_node__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./media-element-audio-source-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-node.js");
/* harmony import */ var _media_element_audio_source_options__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./media-element-audio-source-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-options.js");
/* harmony import */ var _media_stream_audio_destination_node__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./media-stream-audio-destination-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-destination-node.js");
/* harmony import */ var _media_stream_audio_source_node__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./media-stream-audio-source-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-node.js");
/* harmony import */ var _media_stream_audio_source_options__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./media-stream-audio-source-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-options.js");
/* harmony import */ var _media_stream_track_audio_source_node__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./media-stream-track-audio-source-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-node.js");
/* harmony import */ var _media_stream_track_audio_source_options__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./media-stream-track-audio-source-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-options.js");
/* harmony import */ var _minimal_audio_context__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./minimal-audio-context */ "./node_modules/standardized-audio-context/build/es2019/interfaces/minimal-audio-context.js");
/* harmony import */ var _minimal_base_audio_context__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./minimal-base-audio-context */ "./node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context.js");
/* harmony import */ var _minimal_base_audio_context_event_map__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./minimal-base-audio-context-event-map */ "./node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context-event-map.js");
/* harmony import */ var _minimal_offline_audio_context__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./minimal-offline-audio-context */ "./node_modules/standardized-audio-context/build/es2019/interfaces/minimal-offline-audio-context.js");
/* harmony import */ var _native_audio_node_faker__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./native-audio-node-faker */ "./node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-node-faker.js");
/* harmony import */ var _native_audio_worklet_node_faker__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./native-audio-worklet-node-faker */ "./node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-worklet-node-faker.js");
/* harmony import */ var _native_constant_source_node_faker__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./native-constant-source-node-faker */ "./node_modules/standardized-audio-context/build/es2019/interfaces/native-constant-source-node-faker.js");
/* harmony import */ var _native_convolver_node_faker__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./native-convolver-node-faker */ "./node_modules/standardized-audio-context/build/es2019/interfaces/native-convolver-node-faker.js");
/* harmony import */ var _native_iir_filter_node_faker__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./native-iir-filter-node-faker */ "./node_modules/standardized-audio-context/build/es2019/interfaces/native-iir-filter-node-faker.js");
/* harmony import */ var _native_panner_node_faker__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./native-panner-node-faker */ "./node_modules/standardized-audio-context/build/es2019/interfaces/native-panner-node-faker.js");
/* harmony import */ var _native_stereo_panner_node_faker__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./native-stereo-panner-node-faker */ "./node_modules/standardized-audio-context/build/es2019/interfaces/native-stereo-panner-node-faker.js");
/* harmony import */ var _native_wave_shaper_node_faker__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./native-wave-shaper-node-faker */ "./node_modules/standardized-audio-context/build/es2019/interfaces/native-wave-shaper-node-faker.js");
/* harmony import */ var _offline_audio_completion_event__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./offline-audio-completion-event */ "./node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-completion-event.js");
/* harmony import */ var _offline_audio_context__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./offline-audio-context */ "./node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context.js");
/* harmony import */ var _offline_audio_context_constructor__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./offline-audio-context-constructor */ "./node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-constructor.js");
/* harmony import */ var _offline_audio_context_options__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./offline-audio-context-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-options.js");
/* harmony import */ var _oscillator_node__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./oscillator-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node.js");
/* harmony import */ var _oscillator_node_renderer__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./oscillator-node-renderer */ "./node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node-renderer.js");
/* harmony import */ var _oscillator_options__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./oscillator-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-options.js");
/* harmony import */ var _panner_node__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./panner-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/panner-node.js");
/* harmony import */ var _panner_options__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./panner-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/panner-options.js");
/* harmony import */ var _periodic_wave__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./periodic-wave */ "./node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave.js");
/* harmony import */ var _periodic_wave_constraints__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./periodic-wave-constraints */ "./node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-constraints.js");
/* harmony import */ var _periodic_wave_options__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./periodic-wave-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-options.js");
/* harmony import */ var _read_only_map__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./read-only-map */ "./node_modules/standardized-audio-context/build/es2019/interfaces/read-only-map.js");
/* harmony import */ var _stereo_panner_node__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./stereo-panner-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-node.js");
/* harmony import */ var _stereo_panner_options__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./stereo-panner-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-options.js");
/* harmony import */ var _wave_shaper_node__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./wave-shaper-node */ "./node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-node.js");
/* harmony import */ var _wave_shaper_options__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./wave-shaper-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-options.js");
/* harmony import */ var _worklet_options__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./worklet-options */ "./node_modules/standardized-audio-context/build/es2019/interfaces/worklet-options.js");




















































































//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-node.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-node.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=media-element-audio-source-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-options.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-options.js ***!
  \***************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=media-element-audio-source-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-destination-node.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-destination-node.js ***!
  \****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=media-stream-audio-destination-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-node.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-node.js ***!
  \***********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=media-stream-audio-source-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-options.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-options.js ***!
  \**************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=media-stream-audio-source-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-node.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-node.js ***!
  \*****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=media-stream-track-audio-source-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-options.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-options.js ***!
  \********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=media-stream-track-audio-source-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/minimal-audio-context.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/minimal-audio-context.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=minimal-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context-event-map.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context-event-map.js ***!
  \*****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=minimal-base-audio-context-event-map.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context.js ***!
  \*******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=minimal-base-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/minimal-offline-audio-context.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/minimal-offline-audio-context.js ***!
  \**********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=minimal-offline-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-node-faker.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-node-faker.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-node-faker.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-worklet-node-faker.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-worklet-node-faker.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-worklet-node-faker.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/native-constant-source-node-faker.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/native-constant-source-node-faker.js ***!
  \**************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-constant-source-node-faker.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/native-convolver-node-faker.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/native-convolver-node-faker.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-convolver-node-faker.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/native-iir-filter-node-faker.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/native-iir-filter-node-faker.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-iir-filter-node-faker.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/native-panner-node-faker.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/native-panner-node-faker.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-panner-node-faker.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/native-stereo-panner-node-faker.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/native-stereo-panner-node-faker.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-stereo-panner-node-faker.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/native-wave-shaper-node-faker.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/native-wave-shaper-node-faker.js ***!
  \**********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-wave-shaper-node-faker.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-completion-event.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-completion-event.js ***!
  \***********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=offline-audio-completion-event.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-constructor.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-constructor.js ***!
  \**************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=offline-audio-context-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-options.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-options.js ***!
  \**********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=offline-audio-context-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=offline-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node-renderer.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node-renderer.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=oscillator-node-renderer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node.js ***!
  \********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=oscillator-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-options.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-options.js ***!
  \***********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=oscillator-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/panner-node.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/panner-node.js ***!
  \****************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=panner-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/panner-options.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/panner-options.js ***!
  \*******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=panner-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-constraints.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-constraints.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=periodic-wave-constraints.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-options.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-options.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=periodic-wave-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave.js ***!
  \******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=periodic-wave.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/read-only-map.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/read-only-map.js ***!
  \******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=read-only-map.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-node.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-node.js ***!
  \***********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=stereo-panner-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-options.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-options.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=stereo-panner-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-node.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-node.js ***!
  \*********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wave-shaper-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-options.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-options.js ***!
  \************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wave-shaper-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/interfaces/worklet-options.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/interfaces/worklet-options.js ***!
  \********************************************************************************************/
/***/ (() => {

"use strict";
// @todo This is currently named IWorkletOptions and not IAudioWorkletOptions because it defines the options of a generic Worklet.

//# sourceMappingURL=worklet-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/module.js":
/*!************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/module.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OfflineAudioContext: () => (/* binding */ offlineAudioContextConstructor)
/* harmony export */ });
/* unused harmony exports AnalyserNode, AudioBuffer, AudioBufferSourceNode, addAudioWorkletModule, decodeAudioData, AudioContext, AudioWorkletNode, BiquadFilterNode, ChannelMergerNode, ChannelSplitterNode, ConvolverNode, ConstantSourceNode, DelayNode, DynamicsCompressorNode, GainNode, IIRFilterNode, MediaElementAudioSourceNode, MediaStreamAudioDestinationNode, MediaStreamAudioSourceNode, MediaStreamTrackAudioSourceNode, MinimalAudioContext, MinimalOfflineAudioContext, OscillatorNode, PannerNode, PeriodicWave, StereoPannerNode, WaveShaperNode, isAnyAudioContext, isAnyAudioNode, isAnyAudioParam, isAnyOfflineAudioContext, isSupported */
/* harmony import */ var automation_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! automation-events */ "./node_modules/automation-events/build/es5/bundle.js");
/* harmony import */ var automation_events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(automation_events__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _factories_abort_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./factories/abort-error */ "./node_modules/standardized-audio-context/build/es2019/factories/abort-error.js");
/* harmony import */ var _factories_add_active_input_connection_to_audio_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./factories/add-active-input-connection-to-audio-node */ "./node_modules/standardized-audio-context/build/es2019/factories/add-active-input-connection-to-audio-node.js");
/* harmony import */ var _factories_add_audio_node_connections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./factories/add-audio-node-connections */ "./node_modules/standardized-audio-context/build/es2019/factories/add-audio-node-connections.js");
/* harmony import */ var _factories_add_audio_param_connections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./factories/add-audio-param-connections */ "./node_modules/standardized-audio-context/build/es2019/factories/add-audio-param-connections.js");
/* harmony import */ var _factories_add_audio_worklet_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./factories/add-audio-worklet-module */ "./node_modules/standardized-audio-context/build/es2019/factories/add-audio-worklet-module.js");
/* harmony import */ var _factories_add_connection_to_audio_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./factories/add-connection-to-audio-node */ "./node_modules/standardized-audio-context/build/es2019/factories/add-connection-to-audio-node.js");
/* harmony import */ var _factories_add_passive_input_connection_to_audio_node__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./factories/add-passive-input-connection-to-audio-node */ "./node_modules/standardized-audio-context/build/es2019/factories/add-passive-input-connection-to-audio-node.js");
/* harmony import */ var _factories_add_silent_connection__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./factories/add-silent-connection */ "./node_modules/standardized-audio-context/build/es2019/factories/add-silent-connection.js");
/* harmony import */ var _factories_add_unrendered_audio_worklet_node__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./factories/add-unrendered-audio-worklet-node */ "./node_modules/standardized-audio-context/build/es2019/factories/add-unrendered-audio-worklet-node.js");
/* harmony import */ var _factories_analyser_node_constructor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./factories/analyser-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/analyser-node-constructor.js");
/* harmony import */ var _factories_analyser_node_renderer_factory__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./factories/analyser-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory.js");
/* harmony import */ var _factories_audio_buffer_constructor__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./factories/audio-buffer-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-constructor.js");
/* harmony import */ var _factories_audio_buffer_source_node_constructor__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./factories/audio-buffer-source-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-constructor.js");
/* harmony import */ var _factories_audio_buffer_source_node_renderer_factory__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./factories/audio-buffer-source-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory.js");
/* harmony import */ var _factories_audio_context_constructor__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./factories/audio-context-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/audio-context-constructor.js");
/* harmony import */ var _factories_audio_destination_node_constructor__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./factories/audio-destination-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-constructor.js");
/* harmony import */ var _factories_audio_destination_node_renderer_factory__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./factories/audio-destination-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-renderer-factory.js");
/* harmony import */ var _factories_audio_listener_factory__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./factories/audio-listener-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/audio-listener-factory.js");
/* harmony import */ var _factories_audio_node_constructor__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./factories/audio-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/audio-node-constructor.js");
/* harmony import */ var _factories_audio_param_factory__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./factories/audio-param-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/audio-param-factory.js");
/* harmony import */ var _factories_audio_param_renderer__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./factories/audio-param-renderer */ "./node_modules/standardized-audio-context/build/es2019/factories/audio-param-renderer.js");
/* harmony import */ var _factories_audio_worklet_node_constructor__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./factories/audio-worklet-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor.js");
/* harmony import */ var _factories_audio_worklet_node_renderer_factory__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./factories/audio-worklet-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-renderer-factory.js");
/* harmony import */ var _factories_base_audio_context_constructor__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./factories/base-audio-context-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/base-audio-context-constructor.js");
/* harmony import */ var _factories_biquad_filter_node_constructor__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./factories/biquad-filter-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-constructor.js");
/* harmony import */ var _factories_biquad_filter_node_renderer_factory__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./factories/biquad-filter-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js");
/* harmony import */ var _factories_cache_test_result__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./factories/cache-test-result */ "./node_modules/standardized-audio-context/build/es2019/factories/cache-test-result.js");
/* harmony import */ var _factories_channel_merger_node_constructor__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./factories/channel-merger-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-constructor.js");
/* harmony import */ var _factories_channel_merger_node_renderer_factory__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./factories/channel-merger-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js");
/* harmony import */ var _factories_channel_splitter_node_constructor__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./factories/channel-splitter-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor.js");
/* harmony import */ var _factories_channel_splitter_node_renderer_factory__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./factories/channel-splitter-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory.js");
/* harmony import */ var _factories_connect_audio_param__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./factories/connect-audio-param */ "./node_modules/standardized-audio-context/build/es2019/factories/connect-audio-param.js");
/* harmony import */ var _factories_connect_multiple_outputs__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./factories/connect-multiple-outputs */ "./node_modules/standardized-audio-context/build/es2019/factories/connect-multiple-outputs.js");
/* harmony import */ var _factories_connected_native_audio_buffer_source_node_factory__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./factories/connected-native-audio-buffer-source-node-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/connected-native-audio-buffer-source-node-factory.js");
/* harmony import */ var _factories_constant_source_node_constructor__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./factories/constant-source-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-constructor.js");
/* harmony import */ var _factories_constant_source_node_renderer_factory__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./factories/constant-source-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js");
/* harmony import */ var _factories_convert_number_to_unsigned_long__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./factories/convert-number-to-unsigned-long */ "./node_modules/standardized-audio-context/build/es2019/factories/convert-number-to-unsigned-long.js");
/* harmony import */ var _factories_convolver_node_constructor__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./factories/convolver-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/convolver-node-constructor.js");
/* harmony import */ var _factories_convolver_node_renderer_factory__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./factories/convolver-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js");
/* harmony import */ var _factories_create_native_offline_audio_context__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./factories/create-native-offline-audio-context */ "./node_modules/standardized-audio-context/build/es2019/factories/create-native-offline-audio-context.js");
/* harmony import */ var _factories_data_clone_error__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./factories/data-clone-error */ "./node_modules/standardized-audio-context/build/es2019/factories/data-clone-error.js");
/* harmony import */ var _factories_decode_audio_data__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./factories/decode-audio-data */ "./node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js");
/* harmony import */ var _factories_decrement_cycle_counter__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./factories/decrement-cycle-counter */ "./node_modules/standardized-audio-context/build/es2019/factories/decrement-cycle-counter.js");
/* harmony import */ var _factories_delay_node_constructor__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./factories/delay-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/delay-node-constructor.js");
/* harmony import */ var _factories_delay_node_renderer_factory__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./factories/delay-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js");
/* harmony import */ var _factories_delete_active_input_connection_to_audio_node__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./factories/delete-active-input-connection-to-audio-node */ "./node_modules/standardized-audio-context/build/es2019/factories/delete-active-input-connection-to-audio-node.js");
/* harmony import */ var _factories_delete_unrendered_audio_worklet_node__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./factories/delete-unrendered-audio-worklet-node */ "./node_modules/standardized-audio-context/build/es2019/factories/delete-unrendered-audio-worklet-node.js");
/* harmony import */ var _factories_detect_cycles__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./factories/detect-cycles */ "./node_modules/standardized-audio-context/build/es2019/factories/detect-cycles.js");
/* harmony import */ var _factories_disconnect_multiple_outputs__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./factories/disconnect-multiple-outputs */ "./node_modules/standardized-audio-context/build/es2019/factories/disconnect-multiple-outputs.js");
/* harmony import */ var _factories_dynamics_compressor_node_constructor__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./factories/dynamics-compressor-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor.js");
/* harmony import */ var _factories_dynamics_compressor_node_renderer_factory__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./factories/dynamics-compressor-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js");
/* harmony import */ var _factories_encoding_error__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./factories/encoding-error */ "./node_modules/standardized-audio-context/build/es2019/factories/encoding-error.js");
/* harmony import */ var _factories_evaluate_source__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./factories/evaluate-source */ "./node_modules/standardized-audio-context/build/es2019/factories/evaluate-source.js");
/* harmony import */ var _factories_event_target_constructor__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./factories/event-target-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/event-target-constructor.js");
/* harmony import */ var _factories_expose_current_frame_and_current_time__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./factories/expose-current-frame-and-current-time */ "./node_modules/standardized-audio-context/build/es2019/factories/expose-current-frame-and-current-time.js");
/* harmony import */ var _factories_fetch_source__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./factories/fetch-source */ "./node_modules/standardized-audio-context/build/es2019/factories/fetch-source.js");
/* harmony import */ var _factories_gain_node_constructor__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./factories/gain-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/gain-node-constructor.js");
/* harmony import */ var _factories_gain_node_renderer_factory__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./factories/gain-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js");
/* harmony import */ var _factories_get_active_audio_worklet_node_inputs__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./factories/get-active-audio-worklet-node-inputs */ "./node_modules/standardized-audio-context/build/es2019/factories/get-active-audio-worklet-node-inputs.js");
/* harmony import */ var _factories_get_audio_node_renderer__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./factories/get-audio-node-renderer */ "./node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-renderer.js");
/* harmony import */ var _factories_get_audio_node_tail_time__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./factories/get-audio-node-tail-time */ "./node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-tail-time.js");
/* harmony import */ var _factories_get_audio_param_renderer__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./factories/get-audio-param-renderer */ "./node_modules/standardized-audio-context/build/es2019/factories/get-audio-param-renderer.js");
/* harmony import */ var _factories_get_backup_offline_audio_context__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./factories/get-backup-offline-audio-context */ "./node_modules/standardized-audio-context/build/es2019/factories/get-backup-offline-audio-context.js");
/* harmony import */ var _factories_get_native_context__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./factories/get-native-context */ "./node_modules/standardized-audio-context/build/es2019/factories/get-native-context.js");
/* harmony import */ var _factories_get_or_create_backup_offline_audio_context__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./factories/get-or-create-backup-offline-audio-context */ "./node_modules/standardized-audio-context/build/es2019/factories/get-or-create-backup-offline-audio-context.js");
/* harmony import */ var _factories_get_unrendered_audio_worklet_nodes__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./factories/get-unrendered-audio-worklet-nodes */ "./node_modules/standardized-audio-context/build/es2019/factories/get-unrendered-audio-worklet-nodes.js");
/* harmony import */ var _factories_iir_filter_node_constructor__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./factories/iir-filter-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-constructor.js");
/* harmony import */ var _factories_iir_filter_node_renderer_factory__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./factories/iir-filter-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory.js");
/* harmony import */ var _factories_increment_cycle_counter_factory__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./factories/increment-cycle-counter-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/increment-cycle-counter-factory.js");
/* harmony import */ var _factories_index_size_error__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./factories/index-size-error */ "./node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js");
/* harmony import */ var _factories_invalid_access_error__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./factories/invalid-access-error */ "./node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js");
/* harmony import */ var _factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./factories/invalid-state-error */ "./node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js");
/* harmony import */ var _factories_is_any_audio_context__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./factories/is-any-audio-context */ "./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-context.js");
/* harmony import */ var _factories_is_any_audio_node__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./factories/is-any-audio-node */ "./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-node.js");
/* harmony import */ var _factories_is_any_audio_param__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./factories/is-any-audio-param */ "./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-param.js");
/* harmony import */ var _factories_is_any_offline_audio_context__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./factories/is-any-offline-audio-context */ "./node_modules/standardized-audio-context/build/es2019/factories/is-any-offline-audio-context.js");
/* harmony import */ var _factories_is_native_audio_context__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./factories/is-native-audio-context */ "./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-context.js");
/* harmony import */ var _factories_is_native_audio_node__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./factories/is-native-audio-node */ "./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-node.js");
/* harmony import */ var _factories_is_native_audio_param__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./factories/is-native-audio-param */ "./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-param.js");
/* harmony import */ var _factories_is_native_context__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./factories/is-native-context */ "./node_modules/standardized-audio-context/build/es2019/factories/is-native-context.js");
/* harmony import */ var _factories_is_native_offline_audio_context__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./factories/is-native-offline-audio-context */ "./node_modules/standardized-audio-context/build/es2019/factories/is-native-offline-audio-context.js");
/* harmony import */ var _factories_is_secure_context__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./factories/is-secure-context */ "./node_modules/standardized-audio-context/build/es2019/factories/is-secure-context.js");
/* harmony import */ var _factories_is_supported_promise__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./factories/is-supported-promise */ "./node_modules/standardized-audio-context/build/es2019/factories/is-supported-promise.js");
/* harmony import */ var _factories_media_element_audio_source_node_constructor__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./factories/media-element-audio-source-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/media-element-audio-source-node-constructor.js");
/* harmony import */ var _factories_media_stream_audio_destination_node_constructor__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./factories/media-stream-audio-destination-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-destination-node-constructor.js");
/* harmony import */ var _factories_media_stream_audio_source_node_constructor__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./factories/media-stream-audio-source-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-source-node-constructor.js");
/* harmony import */ var _factories_media_stream_track_audio_source_node_constructor__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./factories/media-stream-track-audio-source-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/media-stream-track-audio-source-node-constructor.js");
/* harmony import */ var _factories_minimal_audio_context_constructor__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./factories/minimal-audio-context-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/minimal-audio-context-constructor.js");
/* harmony import */ var _factories_minimal_base_audio_context_constructor__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./factories/minimal-base-audio-context-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/minimal-base-audio-context-constructor.js");
/* harmony import */ var _factories_minimal_offline_audio_context_constructor__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./factories/minimal-offline-audio-context-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/minimal-offline-audio-context-constructor.js");
/* harmony import */ var _factories_monitor_connections__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./factories/monitor-connections */ "./node_modules/standardized-audio-context/build/es2019/factories/monitor-connections.js");
/* harmony import */ var _factories_native_analyser_node_factory__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./factories/native-analyser-node-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-analyser-node-factory.js");
/* harmony import */ var _factories_native_audio_buffer_constructor__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./factories/native-audio-buffer-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-constructor.js");
/* harmony import */ var _factories_native_audio_buffer_source_node_factory__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./factories/native-audio-buffer-source-node-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory.js");
/* harmony import */ var _factories_native_audio_context_constructor__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./factories/native-audio-context-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/native-audio-context-constructor.js");
/* harmony import */ var _factories_native_audio_destination_node__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./factories/native-audio-destination-node */ "./node_modules/standardized-audio-context/build/es2019/factories/native-audio-destination-node.js");
/* harmony import */ var _factories_native_audio_worklet_node_constructor__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./factories/native-audio-worklet-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-constructor.js");
/* harmony import */ var _factories_native_audio_worklet_node_factory__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./factories/native-audio-worklet-node-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory.js");
/* harmony import */ var _factories_native_audio_worklet_node_faker_factory__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./factories/native-audio-worklet-node-faker-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-faker-factory.js");
/* harmony import */ var _factories_native_biquad_filter_node__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./factories/native-biquad-filter-node */ "./node_modules/standardized-audio-context/build/es2019/factories/native-biquad-filter-node.js");
/* harmony import */ var _factories_native_channel_merger_node_factory__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ./factories/native-channel-merger-node-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-channel-merger-node-factory.js");
/* harmony import */ var _factories_native_channel_splitter_node__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ./factories/native-channel-splitter-node */ "./node_modules/standardized-audio-context/build/es2019/factories/native-channel-splitter-node.js");
/* harmony import */ var _factories_native_constant_source_node_factory__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ./factories/native-constant-source-node-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-factory.js");
/* harmony import */ var _factories_native_constant_source_node_faker_factory__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ./factories/native-constant-source-node-faker-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-faker-factory.js");
/* harmony import */ var _factories_native_convolver_node_factory__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ./factories/native-convolver-node-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-factory.js");
/* harmony import */ var _factories_native_delay_node__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ./factories/native-delay-node */ "./node_modules/standardized-audio-context/build/es2019/factories/native-delay-node.js");
/* harmony import */ var _factories_native_dynamics_compressor_node_factory__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ./factories/native-dynamics-compressor-node-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-dynamics-compressor-node-factory.js");
/* harmony import */ var _factories_native_gain_node__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ./factories/native-gain-node */ "./node_modules/standardized-audio-context/build/es2019/factories/native-gain-node.js");
/* harmony import */ var _factories_native_iir_filter_node_factory__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ./factories/native-iir-filter-node-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-factory.js");
/* harmony import */ var _factories_native_iir_filter_node_faker_factory__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ./factories/native-iir-filter-node-faker-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory.js");
/* harmony import */ var _factories_native_media_element_audio_source_node__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ./factories/native-media-element-audio-source-node */ "./node_modules/standardized-audio-context/build/es2019/factories/native-media-element-audio-source-node.js");
/* harmony import */ var _factories_native_media_stream_audio_destination_node__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ./factories/native-media-stream-audio-destination-node */ "./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-destination-node.js");
/* harmony import */ var _factories_native_media_stream_audio_source_node__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ./factories/native-media-stream-audio-source-node */ "./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node.js");
/* harmony import */ var _factories_native_media_stream_track_audio_source_node_factory__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ./factories/native-media-stream-track-audio-source-node-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-track-audio-source-node-factory.js");
/* harmony import */ var _factories_native_offline_audio_context_constructor__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ./factories/native-offline-audio-context-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/native-offline-audio-context-constructor.js");
/* harmony import */ var _factories_native_oscillator_node_factory__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ./factories/native-oscillator-node-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-oscillator-node-factory.js");
/* harmony import */ var _factories_native_panner_node_factory__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ./factories/native-panner-node-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-factory.js");
/* harmony import */ var _factories_native_panner_node_faker_factory__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ./factories/native-panner-node-faker-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-faker-factory.js");
/* harmony import */ var _factories_native_periodic_wave_factory__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(/*! ./factories/native-periodic-wave-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-periodic-wave-factory.js");
/* harmony import */ var _factories_native_script_processor_node__WEBPACK_IMPORTED_MODULE_120__ = __webpack_require__(/*! ./factories/native-script-processor-node */ "./node_modules/standardized-audio-context/build/es2019/factories/native-script-processor-node.js");
/* harmony import */ var _factories_native_stereo_panner_node_factory__WEBPACK_IMPORTED_MODULE_121__ = __webpack_require__(/*! ./factories/native-stereo-panner-node-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-factory.js");
/* harmony import */ var _factories_native_stereo_panner_node_faker_factory__WEBPACK_IMPORTED_MODULE_122__ = __webpack_require__(/*! ./factories/native-stereo-panner-node-faker-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory.js");
/* harmony import */ var _factories_native_wave_shaper_node_factory__WEBPACK_IMPORTED_MODULE_123__ = __webpack_require__(/*! ./factories/native-wave-shaper-node-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-factory.js");
/* harmony import */ var _factories_native_wave_shaper_node_faker_factory__WEBPACK_IMPORTED_MODULE_124__ = __webpack_require__(/*! ./factories/native-wave-shaper-node-faker-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory.js");
/* harmony import */ var _factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__ = __webpack_require__(/*! ./factories/not-supported-error */ "./node_modules/standardized-audio-context/build/es2019/factories/not-supported-error.js");
/* harmony import */ var _factories_offline_audio_context_constructor__WEBPACK_IMPORTED_MODULE_126__ = __webpack_require__(/*! ./factories/offline-audio-context-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/offline-audio-context-constructor.js");
/* harmony import */ var _factories_oscillator_node_constructor__WEBPACK_IMPORTED_MODULE_127__ = __webpack_require__(/*! ./factories/oscillator-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-constructor.js");
/* harmony import */ var _factories_oscillator_node_renderer_factory__WEBPACK_IMPORTED_MODULE_128__ = __webpack_require__(/*! ./factories/oscillator-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js");
/* harmony import */ var _factories_panner_node_constructor__WEBPACK_IMPORTED_MODULE_129__ = __webpack_require__(/*! ./factories/panner-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/panner-node-constructor.js");
/* harmony import */ var _factories_panner_node_renderer_factory__WEBPACK_IMPORTED_MODULE_130__ = __webpack_require__(/*! ./factories/panner-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js");
/* harmony import */ var _factories_periodic_wave_constructor__WEBPACK_IMPORTED_MODULE_131__ = __webpack_require__(/*! ./factories/periodic-wave-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/periodic-wave-constructor.js");
/* harmony import */ var _factories_render_automation__WEBPACK_IMPORTED_MODULE_132__ = __webpack_require__(/*! ./factories/render-automation */ "./node_modules/standardized-audio-context/build/es2019/factories/render-automation.js");
/* harmony import */ var _factories_render_inputs_of_audio_node__WEBPACK_IMPORTED_MODULE_133__ = __webpack_require__(/*! ./factories/render-inputs-of-audio-node */ "./node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node.js");
/* harmony import */ var _factories_render_inputs_of_audio_param__WEBPACK_IMPORTED_MODULE_134__ = __webpack_require__(/*! ./factories/render-inputs-of-audio-param */ "./node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js");
/* harmony import */ var _factories_render_native_offline_audio_context__WEBPACK_IMPORTED_MODULE_135__ = __webpack_require__(/*! ./factories/render-native-offline-audio-context */ "./node_modules/standardized-audio-context/build/es2019/factories/render-native-offline-audio-context.js");
/* harmony import */ var _factories_set_active_audio_worklet_node_inputs__WEBPACK_IMPORTED_MODULE_136__ = __webpack_require__(/*! ./factories/set-active-audio-worklet-node-inputs */ "./node_modules/standardized-audio-context/build/es2019/factories/set-active-audio-worklet-node-inputs.js");
/* harmony import */ var _factories_set_audio_node_tail_time__WEBPACK_IMPORTED_MODULE_137__ = __webpack_require__(/*! ./factories/set-audio-node-tail-time */ "./node_modules/standardized-audio-context/build/es2019/factories/set-audio-node-tail-time.js");
/* harmony import */ var _factories_start_rendering__WEBPACK_IMPORTED_MODULE_138__ = __webpack_require__(/*! ./factories/start-rendering */ "./node_modules/standardized-audio-context/build/es2019/factories/start-rendering.js");
/* harmony import */ var _factories_stereo_panner_node_constructor__WEBPACK_IMPORTED_MODULE_139__ = __webpack_require__(/*! ./factories/stereo-panner-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-constructor.js");
/* harmony import */ var _factories_stereo_panner_node_renderer_factory__WEBPACK_IMPORTED_MODULE_140__ = __webpack_require__(/*! ./factories/stereo-panner-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js");
/* harmony import */ var _factories_test_audio_buffer_constructor_support__WEBPACK_IMPORTED_MODULE_141__ = __webpack_require__(/*! ./factories/test-audio-buffer-constructor-support */ "./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-constructor-support.js");
/* harmony import */ var _factories_test_audio_buffer_copy_channel_methods_subarray_support__WEBPACK_IMPORTED_MODULE_142__ = __webpack_require__(/*! ./factories/test-audio-buffer-copy-channel-methods-subarray-support */ "./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-copy-channel-methods-subarray-support.js");
/* harmony import */ var _factories_test_audio_context_close_method_support__WEBPACK_IMPORTED_MODULE_143__ = __webpack_require__(/*! ./factories/test-audio-context-close-method-support */ "./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-close-method-support.js");
/* harmony import */ var _factories_test_audio_context_decode_audio_data_method_type_error_support__WEBPACK_IMPORTED_MODULE_144__ = __webpack_require__(/*! ./factories/test-audio-context-decode-audio-data-method-type-error-support */ "./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-decode-audio-data-method-type-error-support.js");
/* harmony import */ var _factories_test_audio_context_options_support__WEBPACK_IMPORTED_MODULE_145__ = __webpack_require__(/*! ./factories/test-audio-context-options-support */ "./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-options-support.js");
/* harmony import */ var _factories_test_audio_node_connect_method_support__WEBPACK_IMPORTED_MODULE_146__ = __webpack_require__(/*! ./factories/test-audio-node-connect-method-support */ "./node_modules/standardized-audio-context/build/es2019/factories/test-audio-node-connect-method-support.js");
/* harmony import */ var _factories_test_audio_worklet_processor_no_outputs_support__WEBPACK_IMPORTED_MODULE_147__ = __webpack_require__(/*! ./factories/test-audio-worklet-processor-no-outputs-support */ "./node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js");
/* harmony import */ var _factories_test_audio_worklet_processor_post_message_support__WEBPACK_IMPORTED_MODULE_148__ = __webpack_require__(/*! ./factories/test-audio-worklet-processor-post-message-support */ "./node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-post-message-support.js");
/* harmony import */ var _factories_test_channel_merger_node_channel_count_support__WEBPACK_IMPORTED_MODULE_149__ = __webpack_require__(/*! ./factories/test-channel-merger-node-channel-count-support */ "./node_modules/standardized-audio-context/build/es2019/factories/test-channel-merger-node-channel-count-support.js");
/* harmony import */ var _factories_test_constant_source_node_accurate_scheduling_support__WEBPACK_IMPORTED_MODULE_150__ = __webpack_require__(/*! ./factories/test-constant-source-node-accurate-scheduling-support */ "./node_modules/standardized-audio-context/build/es2019/factories/test-constant-source-node-accurate-scheduling-support.js");
/* harmony import */ var _factories_test_convolver_node_buffer_reassignability_support__WEBPACK_IMPORTED_MODULE_151__ = __webpack_require__(/*! ./factories/test-convolver-node-buffer-reassignability-support */ "./node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-buffer-reassignability-support.js");
/* harmony import */ var _factories_test_convolver_node_channel_count_support__WEBPACK_IMPORTED_MODULE_152__ = __webpack_require__(/*! ./factories/test-convolver-node-channel-count-support */ "./node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-channel-count-support.js");
/* harmony import */ var _factories_test_is_secure_context_support__WEBPACK_IMPORTED_MODULE_153__ = __webpack_require__(/*! ./factories/test-is-secure-context-support */ "./node_modules/standardized-audio-context/build/es2019/factories/test-is-secure-context-support.js");
/* harmony import */ var _factories_test_media_stream_audio_source_node_media_stream_without_audio_track_support__WEBPACK_IMPORTED_MODULE_154__ = __webpack_require__(/*! ./factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support */ "./node_modules/standardized-audio-context/build/es2019/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js");
/* harmony import */ var _factories_test_offline_audio_context_current_time_support__WEBPACK_IMPORTED_MODULE_155__ = __webpack_require__(/*! ./factories/test-offline-audio-context-current-time-support */ "./node_modules/standardized-audio-context/build/es2019/factories/test-offline-audio-context-current-time-support.js");
/* harmony import */ var _factories_test_stereo_panner_node_default_value_support__WEBPACK_IMPORTED_MODULE_156__ = __webpack_require__(/*! ./factories/test-stereo-panner-node-default-value-support */ "./node_modules/standardized-audio-context/build/es2019/factories/test-stereo-panner-node-default-value-support.js");
/* harmony import */ var _factories_unknown_error__WEBPACK_IMPORTED_MODULE_157__ = __webpack_require__(/*! ./factories/unknown-error */ "./node_modules/standardized-audio-context/build/es2019/factories/unknown-error.js");
/* harmony import */ var _factories_wave_shaper_node_constructor__WEBPACK_IMPORTED_MODULE_158__ = __webpack_require__(/*! ./factories/wave-shaper-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor.js");
/* harmony import */ var _factories_wave_shaper_node_renderer_factory__WEBPACK_IMPORTED_MODULE_159__ = __webpack_require__(/*! ./factories/wave-shaper-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js");
/* harmony import */ var _factories_window__WEBPACK_IMPORTED_MODULE_160__ = __webpack_require__(/*! ./factories/window */ "./node_modules/standardized-audio-context/build/es2019/factories/window.js");
/* harmony import */ var _factories_wrap_audio_buffer_copy_channel_methods__WEBPACK_IMPORTED_MODULE_161__ = __webpack_require__(/*! ./factories/wrap-audio-buffer-copy-channel-methods */ "./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods.js");
/* harmony import */ var _factories_wrap_audio_buffer_copy_channel_methods_out_of_bounds__WEBPACK_IMPORTED_MODULE_162__ = __webpack_require__(/*! ./factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds */ "./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js");
/* harmony import */ var _factories_wrap_audio_buffer_source_node_stop_method_nullified_buffer__WEBPACK_IMPORTED_MODULE_163__ = __webpack_require__(/*! ./factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer */ "./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js");
/* harmony import */ var _factories_wrap_channel_merger_node__WEBPACK_IMPORTED_MODULE_164__ = __webpack_require__(/*! ./factories/wrap-channel-merger-node */ "./node_modules/standardized-audio-context/build/es2019/factories/wrap-channel-merger-node.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_165__ = __webpack_require__(/*! ./globals */ "./node_modules/standardized-audio-context/build/es2019/globals.js");
/* harmony import */ var _helpers_connect_native_audio_node_to_native_audio_node__WEBPACK_IMPORTED_MODULE_166__ = __webpack_require__(/*! ./helpers/connect-native-audio-node-to-native-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js");
/* harmony import */ var _helpers_disconnect_native_audio_node_from_native_audio_node__WEBPACK_IMPORTED_MODULE_167__ = __webpack_require__(/*! ./helpers/disconnect-native-audio-node-from-native-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js");
/* harmony import */ var _helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_168__ = __webpack_require__(/*! ./helpers/get-audio-node-connections */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js");
/* harmony import */ var _helpers_get_audio_param_connections__WEBPACK_IMPORTED_MODULE_169__ = __webpack_require__(/*! ./helpers/get-audio-param-connections */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js");
/* harmony import */ var _helpers_get_event_listeners_of_audio_node__WEBPACK_IMPORTED_MODULE_170__ = __webpack_require__(/*! ./helpers/get-event-listeners-of-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js");
/* harmony import */ var _helpers_get_first_sample__WEBPACK_IMPORTED_MODULE_171__ = __webpack_require__(/*! ./helpers/get-first-sample */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-first-sample.js");
/* harmony import */ var _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__ = __webpack_require__(/*! ./helpers/get-native-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js");
/* harmony import */ var _helpers_get_native_audio_param__WEBPACK_IMPORTED_MODULE_173__ = __webpack_require__(/*! ./helpers/get-native-audio-param */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js");
/* harmony import */ var _helpers_get_value_for_key__WEBPACK_IMPORTED_MODULE_174__ = __webpack_require__(/*! ./helpers/get-value-for-key */ "./node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js");
/* harmony import */ var _helpers_insert_element_in_set__WEBPACK_IMPORTED_MODULE_175__ = __webpack_require__(/*! ./helpers/insert-element-in-set */ "./node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js");
/* harmony import */ var _helpers_is_active_audio_node__WEBPACK_IMPORTED_MODULE_176__ = __webpack_require__(/*! ./helpers/is-active-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js");
/* harmony import */ var _helpers_is_dc_curve__WEBPACK_IMPORTED_MODULE_177__ = __webpack_require__(/*! ./helpers/is-dc-curve */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-dc-curve.js");
/* harmony import */ var _helpers_is_part_of_a_cycle__WEBPACK_IMPORTED_MODULE_178__ = __webpack_require__(/*! ./helpers/is-part-of-a-cycle */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js");
/* harmony import */ var _helpers_is_passive_audio_node__WEBPACK_IMPORTED_MODULE_179__ = __webpack_require__(/*! ./helpers/is-passive-audio-node */ "./node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js");
/* harmony import */ var _helpers_overwrite_accessors__WEBPACK_IMPORTED_MODULE_180__ = __webpack_require__(/*! ./helpers/overwrite-accessors */ "./node_modules/standardized-audio-context/build/es2019/helpers/overwrite-accessors.js");
/* harmony import */ var _helpers_pick_element_from_set__WEBPACK_IMPORTED_MODULE_181__ = __webpack_require__(/*! ./helpers/pick-element-from-set */ "./node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js");
/* harmony import */ var _helpers_sanitize_audio_worklet_node_options__WEBPACK_IMPORTED_MODULE_182__ = __webpack_require__(/*! ./helpers/sanitize-audio-worklet-node-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/sanitize-audio-worklet-node-options.js");
/* harmony import */ var _helpers_sanitize_channel_splitter_options__WEBPACK_IMPORTED_MODULE_183__ = __webpack_require__(/*! ./helpers/sanitize-channel-splitter-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/sanitize-channel-splitter-options.js");
/* harmony import */ var _helpers_sanitize_periodic_wave_options__WEBPACK_IMPORTED_MODULE_184__ = __webpack_require__(/*! ./helpers/sanitize-periodic-wave-options */ "./node_modules/standardized-audio-context/build/es2019/helpers/sanitize-periodic-wave-options.js");
/* harmony import */ var _helpers_set_value_at_time_until_possible__WEBPACK_IMPORTED_MODULE_185__ = __webpack_require__(/*! ./helpers/set-value-at-time-until-possible */ "./node_modules/standardized-audio-context/build/es2019/helpers/set-value-at-time-until-possible.js");
/* harmony import */ var _helpers_test_audio_buffer_copy_channel_methods_out_of_bounds_support__WEBPACK_IMPORTED_MODULE_186__ = __webpack_require__(/*! ./helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js");
/* harmony import */ var _helpers_test_audio_buffer_source_node_start_method_consecutive_calls_support__WEBPACK_IMPORTED_MODULE_187__ = __webpack_require__(/*! ./helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support.js");
/* harmony import */ var _helpers_test_audio_buffer_source_node_start_method_offset_clamping_support__WEBPACK_IMPORTED_MODULE_188__ = __webpack_require__(/*! ./helpers/test-audio-buffer-source-node-start-method-offset-clamping-support */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-offset-clamping-support.js");
/* harmony import */ var _helpers_test_audio_buffer_source_node_stop_method_nullified_buffer_support__WEBPACK_IMPORTED_MODULE_189__ = __webpack_require__(/*! ./helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js");
/* harmony import */ var _helpers_test_audio_scheduled_source_node_start_method_negative_parameters_support__WEBPACK_IMPORTED_MODULE_190__ = __webpack_require__(/*! ./helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support.js");
/* harmony import */ var _helpers_test_audio_scheduled_source_node_stop_method_consecutive_calls_support__WEBPACK_IMPORTED_MODULE_191__ = __webpack_require__(/*! ./helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js");
/* harmony import */ var _helpers_test_audio_scheduled_source_node_stop_method_negative_parameters_support__WEBPACK_IMPORTED_MODULE_192__ = __webpack_require__(/*! ./helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js");
/* harmony import */ var _helpers_test_audio_worklet_node_options_clonability__WEBPACK_IMPORTED_MODULE_193__ = __webpack_require__(/*! ./helpers/test-audio-worklet-node-options-clonability */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-worklet-node-options-clonability.js");
/* harmony import */ var _helpers_test_dom_exception_constructor_support__WEBPACK_IMPORTED_MODULE_194__ = __webpack_require__(/*! ./helpers/test-dom-exception-constructor-support */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-dom-exception-constructor-support.js");
/* harmony import */ var _helpers_test_promise_support__WEBPACK_IMPORTED_MODULE_195__ = __webpack_require__(/*! ./helpers/test-promise-support */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js");
/* harmony import */ var _helpers_test_transferables_support__WEBPACK_IMPORTED_MODULE_196__ = __webpack_require__(/*! ./helpers/test-transferables-support */ "./node_modules/standardized-audio-context/build/es2019/helpers/test-transferables-support.js");
/* harmony import */ var _helpers_wrap_audio_buffer_source_node_start_method_offset_clamping__WEBPACK_IMPORTED_MODULE_197__ = __webpack_require__(/*! ./helpers/wrap-audio-buffer-source-node-start-method-offset-clamping */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js");
/* harmony import */ var _helpers_wrap_audio_scheduled_source_node_stop_method_consecutive_calls__WEBPACK_IMPORTED_MODULE_198__ = __webpack_require__(/*! ./helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js");
/* harmony import */ var _helpers_wrap_event_listener__WEBPACK_IMPORTED_MODULE_199__ = __webpack_require__(/*! ./helpers/wrap-event-listener */ "./node_modules/standardized-audio-context/build/es2019/helpers/wrap-event-listener.js");
/* harmony import */ var _interfaces_index__WEBPACK_IMPORTED_MODULE_200__ = __webpack_require__(/*! ./interfaces/index */ "./node_modules/standardized-audio-context/build/es2019/interfaces/index.js");
/* harmony import */ var _types_index__WEBPACK_IMPORTED_MODULE_201__ = __webpack_require__(/*! ./types/index */ "./node_modules/standardized-audio-context/build/es2019/types/index.js");








































































































































































































/*
 * @todo Explicitly referencing the barrel file seems to be necessary when enabling the
 * isolatedModules compiler option.
 */


const addActiveInputConnectionToAudioNode = (0,_factories_add_active_input_connection_to_audio_node__WEBPACK_IMPORTED_MODULE_2__.createAddActiveInputConnectionToAudioNode)(_helpers_insert_element_in_set__WEBPACK_IMPORTED_MODULE_175__.insertElementInSet);
const addPassiveInputConnectionToAudioNode = (0,_factories_add_passive_input_connection_to_audio_node__WEBPACK_IMPORTED_MODULE_7__.createAddPassiveInputConnectionToAudioNode)(_helpers_insert_element_in_set__WEBPACK_IMPORTED_MODULE_175__.insertElementInSet);
const deleteActiveInputConnectionToAudioNode = (0,_factories_delete_active_input_connection_to_audio_node__WEBPACK_IMPORTED_MODULE_46__.createDeleteActiveInputConnectionToAudioNode)(_helpers_pick_element_from_set__WEBPACK_IMPORTED_MODULE_181__.pickElementFromSet);
const audioNodeTailTimeStore = new WeakMap();
const getAudioNodeTailTime = (0,_factories_get_audio_node_tail_time__WEBPACK_IMPORTED_MODULE_61__.createGetAudioNodeTailTime)(audioNodeTailTimeStore);
const cacheTestResult = (0,_factories_cache_test_result__WEBPACK_IMPORTED_MODULE_27__.createCacheTestResult)(new Map(), new WeakMap());
const window = (0,_factories_window__WEBPACK_IMPORTED_MODULE_160__.createWindow)();
const createNativeAnalyserNode = (0,_factories_native_analyser_node_factory__WEBPACK_IMPORTED_MODULE_92__.createNativeAnalyserNodeFactory)(cacheTestResult, _factories_index_size_error__WEBPACK_IMPORTED_MODULE_70__.createIndexSizeError);
const getAudioNodeRenderer = (0,_factories_get_audio_node_renderer__WEBPACK_IMPORTED_MODULE_60__.createGetAudioNodeRenderer)(_helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_168__.getAudioNodeConnections);
const renderInputsOfAudioNode = (0,_factories_render_inputs_of_audio_node__WEBPACK_IMPORTED_MODULE_133__.createRenderInputsOfAudioNode)(_helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_168__.getAudioNodeConnections, getAudioNodeRenderer, _helpers_is_part_of_a_cycle__WEBPACK_IMPORTED_MODULE_178__.isPartOfACycle);
const createAnalyserNodeRenderer = (0,_factories_analyser_node_renderer_factory__WEBPACK_IMPORTED_MODULE_11__.createAnalyserNodeRendererFactory)(createNativeAnalyserNode, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, renderInputsOfAudioNode);
const getNativeContext = (0,_factories_get_native_context__WEBPACK_IMPORTED_MODULE_64__.createGetNativeContext)(_globals__WEBPACK_IMPORTED_MODULE_165__.CONTEXT_STORE);
const nativeOfflineAudioContextConstructor = (0,_factories_native_offline_audio_context_constructor__WEBPACK_IMPORTED_MODULE_115__.createNativeOfflineAudioContextConstructor)(window);
const isNativeOfflineAudioContext = (0,_factories_is_native_offline_audio_context__WEBPACK_IMPORTED_MODULE_81__.createIsNativeOfflineAudioContext)(nativeOfflineAudioContextConstructor);
const audioParamAudioNodeStore = new WeakMap();
const eventTargetConstructor = (0,_factories_event_target_constructor__WEBPACK_IMPORTED_MODULE_54__.createEventTargetConstructor)(_helpers_wrap_event_listener__WEBPACK_IMPORTED_MODULE_199__.wrapEventListener);
const nativeAudioContextConstructor = (0,_factories_native_audio_context_constructor__WEBPACK_IMPORTED_MODULE_95__.createNativeAudioContextConstructor)(window);
const isNativeAudioContext = (0,_factories_is_native_audio_context__WEBPACK_IMPORTED_MODULE_77__.createIsNativeAudioContext)(nativeAudioContextConstructor);
const isNativeAudioNode = (0,_factories_is_native_audio_node__WEBPACK_IMPORTED_MODULE_78__.createIsNativeAudioNode)(window);
const isNativeAudioParam = (0,_factories_is_native_audio_param__WEBPACK_IMPORTED_MODULE_79__.createIsNativeAudioParam)(window);
const nativeAudioWorkletNodeConstructor = (0,_factories_native_audio_worklet_node_constructor__WEBPACK_IMPORTED_MODULE_97__.createNativeAudioWorkletNodeConstructor)(window);
const audioNodeConstructor = (0,_factories_audio_node_constructor__WEBPACK_IMPORTED_MODULE_19__.createAudioNodeConstructor)((0,_factories_add_audio_node_connections__WEBPACK_IMPORTED_MODULE_3__.createAddAudioNodeConnections)(_globals__WEBPACK_IMPORTED_MODULE_165__.AUDIO_NODE_CONNECTIONS_STORE), (0,_factories_add_connection_to_audio_node__WEBPACK_IMPORTED_MODULE_6__.createAddConnectionToAudioNode)(addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, _helpers_connect_native_audio_node_to_native_audio_node__WEBPACK_IMPORTED_MODULE_166__.connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, _helpers_disconnect_native_audio_node_from_native_audio_node__WEBPACK_IMPORTED_MODULE_167__.disconnectNativeAudioNodeFromNativeAudioNode, _helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_168__.getAudioNodeConnections, getAudioNodeTailTime, _helpers_get_event_listeners_of_audio_node__WEBPACK_IMPORTED_MODULE_170__.getEventListenersOfAudioNode, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, _helpers_insert_element_in_set__WEBPACK_IMPORTED_MODULE_175__.insertElementInSet, _helpers_is_active_audio_node__WEBPACK_IMPORTED_MODULE_176__.isActiveAudioNode, _helpers_is_part_of_a_cycle__WEBPACK_IMPORTED_MODULE_178__.isPartOfACycle, _helpers_is_passive_audio_node__WEBPACK_IMPORTED_MODULE_179__.isPassiveAudioNode), cacheTestResult, (0,_factories_increment_cycle_counter_factory__WEBPACK_IMPORTED_MODULE_69__.createIncrementCycleCounterFactory)(_globals__WEBPACK_IMPORTED_MODULE_165__.CYCLE_COUNTERS, _helpers_disconnect_native_audio_node_from_native_audio_node__WEBPACK_IMPORTED_MODULE_167__.disconnectNativeAudioNodeFromNativeAudioNode, _helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_168__.getAudioNodeConnections, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, _helpers_get_native_audio_param__WEBPACK_IMPORTED_MODULE_173__.getNativeAudioParam, _helpers_is_active_audio_node__WEBPACK_IMPORTED_MODULE_176__.isActiveAudioNode), _factories_index_size_error__WEBPACK_IMPORTED_MODULE_70__.createIndexSizeError, _factories_invalid_access_error__WEBPACK_IMPORTED_MODULE_71__.createInvalidAccessError, _factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__.createNotSupportedError, (0,_factories_decrement_cycle_counter__WEBPACK_IMPORTED_MODULE_43__.createDecrementCycleCounter)(_helpers_connect_native_audio_node_to_native_audio_node__WEBPACK_IMPORTED_MODULE_166__.connectNativeAudioNodeToNativeAudioNode, _globals__WEBPACK_IMPORTED_MODULE_165__.CYCLE_COUNTERS, _helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_168__.getAudioNodeConnections, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, _helpers_get_native_audio_param__WEBPACK_IMPORTED_MODULE_173__.getNativeAudioParam, getNativeContext, _helpers_is_active_audio_node__WEBPACK_IMPORTED_MODULE_176__.isActiveAudioNode, isNativeOfflineAudioContext), (0,_factories_detect_cycles__WEBPACK_IMPORTED_MODULE_48__.createDetectCycles)(audioParamAudioNodeStore, _helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_168__.getAudioNodeConnections, _helpers_get_value_for_key__WEBPACK_IMPORTED_MODULE_174__.getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor);
const analyserNodeConstructor = (0,_factories_analyser_node_constructor__WEBPACK_IMPORTED_MODULE_10__.createAnalyserNodeConstructor)(audioNodeConstructor, createAnalyserNodeRenderer, _factories_index_size_error__WEBPACK_IMPORTED_MODULE_70__.createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);

const audioBufferStore = new WeakSet();
const nativeAudioBufferConstructor = (0,_factories_native_audio_buffer_constructor__WEBPACK_IMPORTED_MODULE_93__.createNativeAudioBufferConstructor)(window);
const convertNumberToUnsignedLong = (0,_factories_convert_number_to_unsigned_long__WEBPACK_IMPORTED_MODULE_37__.createConvertNumberToUnsignedLong)(new Uint32Array(1));
const wrapAudioBufferCopyChannelMethods = (0,_factories_wrap_audio_buffer_copy_channel_methods__WEBPACK_IMPORTED_MODULE_161__.createWrapAudioBufferCopyChannelMethods)(convertNumberToUnsignedLong, _factories_index_size_error__WEBPACK_IMPORTED_MODULE_70__.createIndexSizeError);
const wrapAudioBufferCopyChannelMethodsOutOfBounds = (0,_factories_wrap_audio_buffer_copy_channel_methods_out_of_bounds__WEBPACK_IMPORTED_MODULE_162__.createWrapAudioBufferCopyChannelMethodsOutOfBounds)(convertNumberToUnsignedLong);
const audioBufferConstructor = (0,_factories_audio_buffer_constructor__WEBPACK_IMPORTED_MODULE_12__.createAudioBufferConstructor)(audioBufferStore, cacheTestResult, _factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__.createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, (0,_factories_test_audio_buffer_constructor_support__WEBPACK_IMPORTED_MODULE_141__.createTestAudioBufferConstructorSupport)(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);

const addSilentConnection = (0,_factories_add_silent_connection__WEBPACK_IMPORTED_MODULE_8__.createAddSilentConnection)(_factories_native_gain_node__WEBPACK_IMPORTED_MODULE_108__.createNativeGainNode);
const renderInputsOfAudioParam = (0,_factories_render_inputs_of_audio_param__WEBPACK_IMPORTED_MODULE_134__.createRenderInputsOfAudioParam)(getAudioNodeRenderer, _helpers_get_audio_param_connections__WEBPACK_IMPORTED_MODULE_169__.getAudioParamConnections, _helpers_is_part_of_a_cycle__WEBPACK_IMPORTED_MODULE_178__.isPartOfACycle);
const connectAudioParam = (0,_factories_connect_audio_param__WEBPACK_IMPORTED_MODULE_32__.createConnectAudioParam)(renderInputsOfAudioParam);
const createNativeAudioBufferSourceNode = (0,_factories_native_audio_buffer_source_node_factory__WEBPACK_IMPORTED_MODULE_94__.createNativeAudioBufferSourceNodeFactory)(addSilentConnection, cacheTestResult, _helpers_test_audio_buffer_source_node_start_method_consecutive_calls_support__WEBPACK_IMPORTED_MODULE_187__.testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, _helpers_test_audio_buffer_source_node_start_method_offset_clamping_support__WEBPACK_IMPORTED_MODULE_188__.testAudioBufferSourceNodeStartMethodOffsetClampingSupport, _helpers_test_audio_buffer_source_node_stop_method_nullified_buffer_support__WEBPACK_IMPORTED_MODULE_189__.testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, _helpers_test_audio_scheduled_source_node_start_method_negative_parameters_support__WEBPACK_IMPORTED_MODULE_190__.testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, _helpers_test_audio_scheduled_source_node_stop_method_consecutive_calls_support__WEBPACK_IMPORTED_MODULE_191__.testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, _helpers_test_audio_scheduled_source_node_stop_method_negative_parameters_support__WEBPACK_IMPORTED_MODULE_192__.testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, _helpers_wrap_audio_buffer_source_node_start_method_offset_clamping__WEBPACK_IMPORTED_MODULE_197__.wrapAudioBufferSourceNodeStartMethodOffsetClamping, (0,_factories_wrap_audio_buffer_source_node_stop_method_nullified_buffer__WEBPACK_IMPORTED_MODULE_163__.createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer)(_helpers_overwrite_accessors__WEBPACK_IMPORTED_MODULE_180__.overwriteAccessors), _helpers_wrap_audio_scheduled_source_node_stop_method_consecutive_calls__WEBPACK_IMPORTED_MODULE_198__.wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);
const renderAutomation = (0,_factories_render_automation__WEBPACK_IMPORTED_MODULE_132__.createRenderAutomation)((0,_factories_get_audio_param_renderer__WEBPACK_IMPORTED_MODULE_62__.createGetAudioParamRenderer)(_helpers_get_audio_param_connections__WEBPACK_IMPORTED_MODULE_169__.getAudioParamConnections), renderInputsOfAudioParam);
const createAudioBufferSourceNodeRenderer = (0,_factories_audio_buffer_source_node_renderer_factory__WEBPACK_IMPORTED_MODULE_14__.createAudioBufferSourceNodeRendererFactory)(connectAudioParam, createNativeAudioBufferSourceNode, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const createAudioParam = (0,_factories_audio_param_factory__WEBPACK_IMPORTED_MODULE_20__.createAudioParamFactory)((0,_factories_add_audio_param_connections__WEBPACK_IMPORTED_MODULE_4__.createAddAudioParamConnections)(_globals__WEBPACK_IMPORTED_MODULE_165__.AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, _globals__WEBPACK_IMPORTED_MODULE_165__.AUDIO_PARAM_STORE, _factories_audio_param_renderer__WEBPACK_IMPORTED_MODULE_21__.createAudioParamRenderer, automation_events__WEBPACK_IMPORTED_MODULE_0__.createCancelAndHoldAutomationEvent, automation_events__WEBPACK_IMPORTED_MODULE_0__.createCancelScheduledValuesAutomationEvent, automation_events__WEBPACK_IMPORTED_MODULE_0__.createExponentialRampToValueAutomationEvent, automation_events__WEBPACK_IMPORTED_MODULE_0__.createLinearRampToValueAutomationEvent, automation_events__WEBPACK_IMPORTED_MODULE_0__.createSetTargetAutomationEvent, automation_events__WEBPACK_IMPORTED_MODULE_0__.createSetValueAutomationEvent, automation_events__WEBPACK_IMPORTED_MODULE_0__.createSetValueCurveAutomationEvent, nativeAudioContextConstructor, _helpers_set_value_at_time_until_possible__WEBPACK_IMPORTED_MODULE_185__.setValueAtTimeUntilPossible);
const audioBufferSourceNodeConstructor = (0,_factories_audio_buffer_source_node_constructor__WEBPACK_IMPORTED_MODULE_13__.createAudioBufferSourceNodeConstructor)(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, _factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_72__.createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, _helpers_wrap_event_listener__WEBPACK_IMPORTED_MODULE_199__.wrapEventListener);

const audioDestinationNodeConstructor = (0,_factories_audio_destination_node_constructor__WEBPACK_IMPORTED_MODULE_16__.createAudioDestinationNodeConstructor)(audioNodeConstructor, _factories_audio_destination_node_renderer_factory__WEBPACK_IMPORTED_MODULE_17__.createAudioDestinationNodeRenderer, _factories_index_size_error__WEBPACK_IMPORTED_MODULE_70__.createIndexSizeError, _factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_72__.createInvalidStateError, (0,_factories_native_audio_destination_node__WEBPACK_IMPORTED_MODULE_96__.createNativeAudioDestinationNodeFactory)(_factories_native_gain_node__WEBPACK_IMPORTED_MODULE_108__.createNativeGainNode, _helpers_overwrite_accessors__WEBPACK_IMPORTED_MODULE_180__.overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);
const createBiquadFilterNodeRenderer = (0,_factories_biquad_filter_node_renderer_factory__WEBPACK_IMPORTED_MODULE_26__.createBiquadFilterNodeRendererFactory)(connectAudioParam, _factories_native_biquad_filter_node__WEBPACK_IMPORTED_MODULE_100__.createNativeBiquadFilterNode, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const setAudioNodeTailTime = (0,_factories_set_audio_node_tail_time__WEBPACK_IMPORTED_MODULE_137__.createSetAudioNodeTailTime)(audioNodeTailTimeStore);
const biquadFilterNodeConstructor = (0,_factories_biquad_filter_node_constructor__WEBPACK_IMPORTED_MODULE_25__.createBiquadFilterNodeConstructor)(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, _factories_invalid_access_error__WEBPACK_IMPORTED_MODULE_71__.createInvalidAccessError, _factories_native_biquad_filter_node__WEBPACK_IMPORTED_MODULE_100__.createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const monitorConnections = (0,_factories_monitor_connections__WEBPACK_IMPORTED_MODULE_91__.createMonitorConnections)(_helpers_insert_element_in_set__WEBPACK_IMPORTED_MODULE_175__.insertElementInSet, isNativeAudioNode);
const wrapChannelMergerNode = (0,_factories_wrap_channel_merger_node__WEBPACK_IMPORTED_MODULE_164__.createWrapChannelMergerNode)(_factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_72__.createInvalidStateError, monitorConnections);
const createNativeChannelMergerNode = (0,_factories_native_channel_merger_node_factory__WEBPACK_IMPORTED_MODULE_101__.createNativeChannelMergerNodeFactory)(nativeAudioContextConstructor, wrapChannelMergerNode);
const createChannelMergerNodeRenderer = (0,_factories_channel_merger_node_renderer_factory__WEBPACK_IMPORTED_MODULE_29__.createChannelMergerNodeRendererFactory)(createNativeChannelMergerNode, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, renderInputsOfAudioNode);
const channelMergerNodeConstructor = (0,_factories_channel_merger_node_constructor__WEBPACK_IMPORTED_MODULE_28__.createChannelMergerNodeConstructor)(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);
const createChannelSplitterNodeRenderer = (0,_factories_channel_splitter_node_renderer_factory__WEBPACK_IMPORTED_MODULE_31__.createChannelSplitterNodeRendererFactory)(_factories_native_channel_splitter_node__WEBPACK_IMPORTED_MODULE_102__.createNativeChannelSplitterNode, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, renderInputsOfAudioNode);
const channelSplitterNodeConstructor = (0,_factories_channel_splitter_node_constructor__WEBPACK_IMPORTED_MODULE_30__.createChannelSplitterNodeConstructor)(audioNodeConstructor, createChannelSplitterNodeRenderer, _factories_native_channel_splitter_node__WEBPACK_IMPORTED_MODULE_102__.createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, _helpers_sanitize_channel_splitter_options__WEBPACK_IMPORTED_MODULE_183__.sanitizeChannelSplitterOptions);
const createNativeConstantSourceNodeFaker = (0,_factories_native_constant_source_node_faker_factory__WEBPACK_IMPORTED_MODULE_104__.createNativeConstantSourceNodeFakerFactory)(addSilentConnection, createNativeAudioBufferSourceNode, _factories_native_gain_node__WEBPACK_IMPORTED_MODULE_108__.createNativeGainNode, monitorConnections);
const createNativeConstantSourceNode = (0,_factories_native_constant_source_node_factory__WEBPACK_IMPORTED_MODULE_103__.createNativeConstantSourceNodeFactory)(addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, _helpers_test_audio_scheduled_source_node_start_method_negative_parameters_support__WEBPACK_IMPORTED_MODULE_190__.testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, _helpers_test_audio_scheduled_source_node_stop_method_negative_parameters_support__WEBPACK_IMPORTED_MODULE_192__.testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);
const createConstantSourceNodeRenderer = (0,_factories_constant_source_node_renderer_factory__WEBPACK_IMPORTED_MODULE_36__.createConstantSourceNodeRendererFactory)(connectAudioParam, createNativeConstantSourceNode, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const constantSourceNodeConstructor = (0,_factories_constant_source_node_constructor__WEBPACK_IMPORTED_MODULE_35__.createConstantSourceNodeConstructor)(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, _helpers_wrap_event_listener__WEBPACK_IMPORTED_MODULE_199__.wrapEventListener);
const createNativeConvolverNode = (0,_factories_native_convolver_node_factory__WEBPACK_IMPORTED_MODULE_105__.createNativeConvolverNodeFactory)(_factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__.createNotSupportedError, _helpers_overwrite_accessors__WEBPACK_IMPORTED_MODULE_180__.overwriteAccessors);
const createConvolverNodeRenderer = (0,_factories_convolver_node_renderer_factory__WEBPACK_IMPORTED_MODULE_39__.createConvolverNodeRendererFactory)(createNativeConvolverNode, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, renderInputsOfAudioNode);
const convolverNodeConstructor = (0,_factories_convolver_node_constructor__WEBPACK_IMPORTED_MODULE_38__.createConvolverNodeConstructor)(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createDelayNodeRenderer = (0,_factories_delay_node_renderer_factory__WEBPACK_IMPORTED_MODULE_45__.createDelayNodeRendererFactory)(connectAudioParam, _factories_native_delay_node__WEBPACK_IMPORTED_MODULE_106__.createNativeDelayNode, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const delayNodeConstructor = (0,_factories_delay_node_constructor__WEBPACK_IMPORTED_MODULE_44__.createDelayNodeConstructor)(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, _factories_native_delay_node__WEBPACK_IMPORTED_MODULE_106__.createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createNativeDynamicsCompressorNode = (0,_factories_native_dynamics_compressor_node_factory__WEBPACK_IMPORTED_MODULE_107__.createNativeDynamicsCompressorNodeFactory)(_factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__.createNotSupportedError);
const createDynamicsCompressorNodeRenderer = (0,_factories_dynamics_compressor_node_renderer_factory__WEBPACK_IMPORTED_MODULE_51__.createDynamicsCompressorNodeRendererFactory)(connectAudioParam, createNativeDynamicsCompressorNode, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const dynamicsCompressorNodeConstructor = (0,_factories_dynamics_compressor_node_constructor__WEBPACK_IMPORTED_MODULE_50__.createDynamicsCompressorNodeConstructor)(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, _factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__.createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createGainNodeRenderer = (0,_factories_gain_node_renderer_factory__WEBPACK_IMPORTED_MODULE_58__.createGainNodeRendererFactory)(connectAudioParam, _factories_native_gain_node__WEBPACK_IMPORTED_MODULE_108__.createNativeGainNode, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const gainNodeConstructor = (0,_factories_gain_node_constructor__WEBPACK_IMPORTED_MODULE_57__.createGainNodeConstructor)(audioNodeConstructor, createAudioParam, createGainNodeRenderer, _factories_native_gain_node__WEBPACK_IMPORTED_MODULE_108__.createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);
const createNativeIIRFilterNodeFaker = (0,_factories_native_iir_filter_node_faker_factory__WEBPACK_IMPORTED_MODULE_110__.createNativeIIRFilterNodeFakerFactory)(_factories_invalid_access_error__WEBPACK_IMPORTED_MODULE_71__.createInvalidAccessError, _factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_72__.createInvalidStateError, _factories_native_script_processor_node__WEBPACK_IMPORTED_MODULE_120__.createNativeScriptProcessorNode, _factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__.createNotSupportedError);
const renderNativeOfflineAudioContext = (0,_factories_render_native_offline_audio_context__WEBPACK_IMPORTED_MODULE_135__.createRenderNativeOfflineAudioContext)(cacheTestResult, _factories_native_gain_node__WEBPACK_IMPORTED_MODULE_108__.createNativeGainNode, _factories_native_script_processor_node__WEBPACK_IMPORTED_MODULE_120__.createNativeScriptProcessorNode, (0,_factories_test_offline_audio_context_current_time_support__WEBPACK_IMPORTED_MODULE_155__.createTestOfflineAudioContextCurrentTimeSupport)(_factories_native_gain_node__WEBPACK_IMPORTED_MODULE_108__.createNativeGainNode, nativeOfflineAudioContextConstructor));
const createIIRFilterNodeRenderer = (0,_factories_iir_filter_node_renderer_factory__WEBPACK_IMPORTED_MODULE_68__.createIIRFilterNodeRendererFactory)(createNativeAudioBufferSourceNode, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const createNativeIIRFilterNode = (0,_factories_native_iir_filter_node_factory__WEBPACK_IMPORTED_MODULE_109__.createNativeIIRFilterNodeFactory)(createNativeIIRFilterNodeFaker);
const iIRFilterNodeConstructor = (0,_factories_iir_filter_node_constructor__WEBPACK_IMPORTED_MODULE_67__.createIIRFilterNodeConstructor)(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createAudioListener = (0,_factories_audio_listener_factory__WEBPACK_IMPORTED_MODULE_18__.createAudioListenerFactory)(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, _factories_native_script_processor_node__WEBPACK_IMPORTED_MODULE_120__.createNativeScriptProcessorNode, _factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__.createNotSupportedError, _helpers_get_first_sample__WEBPACK_IMPORTED_MODULE_171__.getFirstSample, isNativeOfflineAudioContext, _helpers_overwrite_accessors__WEBPACK_IMPORTED_MODULE_180__.overwriteAccessors);
const unrenderedAudioWorkletNodeStore = new WeakMap();
const minimalBaseAudioContextConstructor = (0,_factories_minimal_base_audio_context_constructor__WEBPACK_IMPORTED_MODULE_89__.createMinimalBaseAudioContextConstructor)(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, _helpers_wrap_event_listener__WEBPACK_IMPORTED_MODULE_199__.wrapEventListener);
const createNativeOscillatorNode = (0,_factories_native_oscillator_node_factory__WEBPACK_IMPORTED_MODULE_116__.createNativeOscillatorNodeFactory)(addSilentConnection, cacheTestResult, _helpers_test_audio_scheduled_source_node_start_method_negative_parameters_support__WEBPACK_IMPORTED_MODULE_190__.testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, _helpers_test_audio_scheduled_source_node_stop_method_consecutive_calls_support__WEBPACK_IMPORTED_MODULE_191__.testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, _helpers_test_audio_scheduled_source_node_stop_method_negative_parameters_support__WEBPACK_IMPORTED_MODULE_192__.testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, _helpers_wrap_audio_scheduled_source_node_stop_method_consecutive_calls__WEBPACK_IMPORTED_MODULE_198__.wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);
const createOscillatorNodeRenderer = (0,_factories_oscillator_node_renderer_factory__WEBPACK_IMPORTED_MODULE_128__.createOscillatorNodeRendererFactory)(connectAudioParam, createNativeOscillatorNode, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const oscillatorNodeConstructor = (0,_factories_oscillator_node_constructor__WEBPACK_IMPORTED_MODULE_127__.createOscillatorNodeConstructor)(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, _helpers_wrap_event_listener__WEBPACK_IMPORTED_MODULE_199__.wrapEventListener);
const createConnectedNativeAudioBufferSourceNode = (0,_factories_connected_native_audio_buffer_source_node_factory__WEBPACK_IMPORTED_MODULE_34__.createConnectedNativeAudioBufferSourceNodeFactory)(createNativeAudioBufferSourceNode);
const createNativeWaveShaperNodeFaker = (0,_factories_native_wave_shaper_node_faker_factory__WEBPACK_IMPORTED_MODULE_124__.createNativeWaveShaperNodeFakerFactory)(createConnectedNativeAudioBufferSourceNode, _factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_72__.createInvalidStateError, _factories_native_gain_node__WEBPACK_IMPORTED_MODULE_108__.createNativeGainNode, _helpers_is_dc_curve__WEBPACK_IMPORTED_MODULE_177__.isDCCurve, monitorConnections);
const createNativeWaveShaperNode = (0,_factories_native_wave_shaper_node_factory__WEBPACK_IMPORTED_MODULE_123__.createNativeWaveShaperNodeFactory)(createConnectedNativeAudioBufferSourceNode, _factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_72__.createInvalidStateError, createNativeWaveShaperNodeFaker, _helpers_is_dc_curve__WEBPACK_IMPORTED_MODULE_177__.isDCCurve, monitorConnections, nativeAudioContextConstructor, _helpers_overwrite_accessors__WEBPACK_IMPORTED_MODULE_180__.overwriteAccessors);
const createNativePannerNodeFaker = (0,_factories_native_panner_node_faker_factory__WEBPACK_IMPORTED_MODULE_118__.createNativePannerNodeFakerFactory)(_helpers_connect_native_audio_node_to_native_audio_node__WEBPACK_IMPORTED_MODULE_166__.connectNativeAudioNodeToNativeAudioNode, _factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_72__.createInvalidStateError, createNativeChannelMergerNode, _factories_native_gain_node__WEBPACK_IMPORTED_MODULE_108__.createNativeGainNode, _factories_native_script_processor_node__WEBPACK_IMPORTED_MODULE_120__.createNativeScriptProcessorNode, createNativeWaveShaperNode, _factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__.createNotSupportedError, _helpers_disconnect_native_audio_node_from_native_audio_node__WEBPACK_IMPORTED_MODULE_167__.disconnectNativeAudioNodeFromNativeAudioNode, _helpers_get_first_sample__WEBPACK_IMPORTED_MODULE_171__.getFirstSample, monitorConnections);
const createNativePannerNode = (0,_factories_native_panner_node_factory__WEBPACK_IMPORTED_MODULE_117__.createNativePannerNodeFactory)(createNativePannerNodeFaker);
const createPannerNodeRenderer = (0,_factories_panner_node_renderer_factory__WEBPACK_IMPORTED_MODULE_130__.createPannerNodeRendererFactory)(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, _factories_native_gain_node__WEBPACK_IMPORTED_MODULE_108__.createNativeGainNode, createNativePannerNode, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const pannerNodeConstructor = (0,_factories_panner_node_constructor__WEBPACK_IMPORTED_MODULE_129__.createPannerNodeConstructor)(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createNativePeriodicWave = (0,_factories_native_periodic_wave_factory__WEBPACK_IMPORTED_MODULE_119__.createNativePeriodicWaveFactory)(_factories_index_size_error__WEBPACK_IMPORTED_MODULE_70__.createIndexSizeError);
const periodicWaveConstructor = (0,_factories_periodic_wave_constructor__WEBPACK_IMPORTED_MODULE_131__.createPeriodicWaveConstructor)(createNativePeriodicWave, getNativeContext, new WeakSet(), _helpers_sanitize_periodic_wave_options__WEBPACK_IMPORTED_MODULE_184__.sanitizePeriodicWaveOptions);
const nativeStereoPannerNodeFakerFactory = (0,_factories_native_stereo_panner_node_faker_factory__WEBPACK_IMPORTED_MODULE_122__.createNativeStereoPannerNodeFakerFactory)(createNativeChannelMergerNode, _factories_native_channel_splitter_node__WEBPACK_IMPORTED_MODULE_102__.createNativeChannelSplitterNode, _factories_native_gain_node__WEBPACK_IMPORTED_MODULE_108__.createNativeGainNode, createNativeWaveShaperNode, _factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__.createNotSupportedError, monitorConnections);
const createNativeStereoPannerNode = (0,_factories_native_stereo_panner_node_factory__WEBPACK_IMPORTED_MODULE_121__.createNativeStereoPannerNodeFactory)(nativeStereoPannerNodeFakerFactory, _factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__.createNotSupportedError);
const createStereoPannerNodeRenderer = (0,_factories_stereo_panner_node_renderer_factory__WEBPACK_IMPORTED_MODULE_140__.createStereoPannerNodeRendererFactory)(connectAudioParam, createNativeStereoPannerNode, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const stereoPannerNodeConstructor = (0,_factories_stereo_panner_node_constructor__WEBPACK_IMPORTED_MODULE_139__.createStereoPannerNodeConstructor)(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);
const createWaveShaperNodeRenderer = (0,_factories_wave_shaper_node_renderer_factory__WEBPACK_IMPORTED_MODULE_159__.createWaveShaperNodeRendererFactory)(createNativeWaveShaperNode, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, renderInputsOfAudioNode);
const waveShaperNodeConstructor = (0,_factories_wave_shaper_node_constructor__WEBPACK_IMPORTED_MODULE_158__.createWaveShaperNodeConstructor)(audioNodeConstructor, _factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_72__.createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const isSecureContext = (0,_factories_is_secure_context__WEBPACK_IMPORTED_MODULE_82__.createIsSecureContext)(window);
const exposeCurrentFrameAndCurrentTime = (0,_factories_expose_current_frame_and_current_time__WEBPACK_IMPORTED_MODULE_55__.createExposeCurrentFrameAndCurrentTime)(window);
const backupOfflineAudioContextStore = new WeakMap();
const getOrCreateBackupOfflineAudioContext = (0,_factories_get_or_create_backup_offline_audio_context__WEBPACK_IMPORTED_MODULE_65__.createGetOrCreateBackupOfflineAudioContext)(backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor);
// The addAudioWorkletModule() function is only available in a SecureContext.
const addAudioWorkletModule = isSecureContext
    ? (0,_factories_add_audio_worklet_module__WEBPACK_IMPORTED_MODULE_5__.createAddAudioWorkletModule)(cacheTestResult, _factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__.createNotSupportedError, (0,_factories_evaluate_source__WEBPACK_IMPORTED_MODULE_53__.createEvaluateSource)(window), exposeCurrentFrameAndCurrentTime, (0,_factories_fetch_source__WEBPACK_IMPORTED_MODULE_56__.createFetchSource)(_factories_abort_error__WEBPACK_IMPORTED_MODULE_1__.createAbortError), getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, new WeakMap(), new WeakMap(), (0,_factories_test_audio_worklet_processor_post_message_support__WEBPACK_IMPORTED_MODULE_148__.createTestAudioWorkletProcessorPostMessageSupport)(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), 
    // @todo window is guaranteed to be defined because isSecureContext checks that as well.
    window)
    : undefined;
const isNativeContext = (0,_factories_is_native_context__WEBPACK_IMPORTED_MODULE_80__.createIsNativeContext)(isNativeAudioContext, isNativeOfflineAudioContext);
const decodeAudioData = (0,_factories_decode_audio_data__WEBPACK_IMPORTED_MODULE_42__.createDecodeAudioData)(audioBufferStore, cacheTestResult, _factories_data_clone_error__WEBPACK_IMPORTED_MODULE_41__.createDataCloneError, _factories_encoding_error__WEBPACK_IMPORTED_MODULE_52__.createEncodingError, new WeakSet(), getNativeContext, isNativeContext, _helpers_test_audio_buffer_copy_channel_methods_out_of_bounds_support__WEBPACK_IMPORTED_MODULE_186__.testAudioBufferCopyChannelMethodsOutOfBoundsSupport, _helpers_test_promise_support__WEBPACK_IMPORTED_MODULE_195__.testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
const baseAudioContextConstructor = (0,_factories_base_audio_context_constructor__WEBPACK_IMPORTED_MODULE_24__.createBaseAudioContextConstructor)(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);
const mediaElementAudioSourceNodeConstructor = (0,_factories_media_element_audio_source_node_constructor__WEBPACK_IMPORTED_MODULE_84__.createMediaElementAudioSourceNodeConstructor)(audioNodeConstructor, _factories_native_media_element_audio_source_node__WEBPACK_IMPORTED_MODULE_111__.createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);
const mediaStreamAudioDestinationNodeConstructor = (0,_factories_media_stream_audio_destination_node_constructor__WEBPACK_IMPORTED_MODULE_85__.createMediaStreamAudioDestinationNodeConstructor)(audioNodeConstructor, _factories_native_media_stream_audio_destination_node__WEBPACK_IMPORTED_MODULE_112__.createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);
const mediaStreamAudioSourceNodeConstructor = (0,_factories_media_stream_audio_source_node_constructor__WEBPACK_IMPORTED_MODULE_86__.createMediaStreamAudioSourceNodeConstructor)(audioNodeConstructor, _factories_native_media_stream_audio_source_node__WEBPACK_IMPORTED_MODULE_113__.createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);
const createNativeMediaStreamTrackAudioSourceNode = (0,_factories_native_media_stream_track_audio_source_node_factory__WEBPACK_IMPORTED_MODULE_114__.createNativeMediaStreamTrackAudioSourceNodeFactory)(_factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_72__.createInvalidStateError, isNativeOfflineAudioContext);
const mediaStreamTrackAudioSourceNodeConstructor = (0,_factories_media_stream_track_audio_source_node_constructor__WEBPACK_IMPORTED_MODULE_87__.createMediaStreamTrackAudioSourceNodeConstructor)(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);
const audioContextConstructor = (0,_factories_audio_context_constructor__WEBPACK_IMPORTED_MODULE_15__.createAudioContextConstructor)(baseAudioContextConstructor, _factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_72__.createInvalidStateError, _factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__.createNotSupportedError, _factories_unknown_error__WEBPACK_IMPORTED_MODULE_157__.createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);

const getUnrenderedAudioWorkletNodes = (0,_factories_get_unrendered_audio_worklet_nodes__WEBPACK_IMPORTED_MODULE_66__.createGetUnrenderedAudioWorkletNodes)(unrenderedAudioWorkletNodeStore);
const addUnrenderedAudioWorkletNode = (0,_factories_add_unrendered_audio_worklet_node__WEBPACK_IMPORTED_MODULE_9__.createAddUnrenderedAudioWorkletNode)(getUnrenderedAudioWorkletNodes);
const connectMultipleOutputs = (0,_factories_connect_multiple_outputs__WEBPACK_IMPORTED_MODULE_33__.createConnectMultipleOutputs)(_factories_index_size_error__WEBPACK_IMPORTED_MODULE_70__.createIndexSizeError);
const deleteUnrenderedAudioWorkletNode = (0,_factories_delete_unrendered_audio_worklet_node__WEBPACK_IMPORTED_MODULE_47__.createDeleteUnrenderedAudioWorkletNode)(getUnrenderedAudioWorkletNodes);
const disconnectMultipleOutputs = (0,_factories_disconnect_multiple_outputs__WEBPACK_IMPORTED_MODULE_49__.createDisconnectMultipleOutputs)(_factories_index_size_error__WEBPACK_IMPORTED_MODULE_70__.createIndexSizeError);
const activeAudioWorkletNodeInputsStore = new WeakMap();
const getActiveAudioWorkletNodeInputs = (0,_factories_get_active_audio_worklet_node_inputs__WEBPACK_IMPORTED_MODULE_59__.createGetActiveAudioWorkletNodeInputs)(activeAudioWorkletNodeInputsStore, _helpers_get_value_for_key__WEBPACK_IMPORTED_MODULE_174__.getValueForKey);
const createNativeAudioWorkletNodeFaker = (0,_factories_native_audio_worklet_node_faker_factory__WEBPACK_IMPORTED_MODULE_99__.createNativeAudioWorkletNodeFakerFactory)(connectMultipleOutputs, _factories_index_size_error__WEBPACK_IMPORTED_MODULE_70__.createIndexSizeError, _factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_72__.createInvalidStateError, createNativeChannelMergerNode, _factories_native_channel_splitter_node__WEBPACK_IMPORTED_MODULE_102__.createNativeChannelSplitterNode, createNativeConstantSourceNode, _factories_native_gain_node__WEBPACK_IMPORTED_MODULE_108__.createNativeGainNode, _factories_native_script_processor_node__WEBPACK_IMPORTED_MODULE_120__.createNativeScriptProcessorNode, _factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__.createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections);
const createNativeAudioWorkletNode = (0,_factories_native_audio_worklet_node_factory__WEBPACK_IMPORTED_MODULE_98__.createNativeAudioWorkletNodeFactory)(_factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_72__.createInvalidStateError, createNativeAudioWorkletNodeFaker, _factories_native_gain_node__WEBPACK_IMPORTED_MODULE_108__.createNativeGainNode, _factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__.createNotSupportedError, monitorConnections);
const createAudioWorkletNodeRenderer = (0,_factories_audio_worklet_node_renderer_factory__WEBPACK_IMPORTED_MODULE_23__.createAudioWorkletNodeRendererFactory)(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, _factories_native_channel_splitter_node__WEBPACK_IMPORTED_MODULE_102__.createNativeChannelSplitterNode, createNativeConstantSourceNode, _factories_native_gain_node__WEBPACK_IMPORTED_MODULE_108__.createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, _helpers_get_native_audio_node__WEBPACK_IMPORTED_MODULE_172__.getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const getBackupOfflineAudioContext = (0,_factories_get_backup_offline_audio_context__WEBPACK_IMPORTED_MODULE_63__.createGetBackupOfflineAudioContext)(backupOfflineAudioContextStore);
const setActiveAudioWorkletNodeInputs = (0,_factories_set_active_audio_worklet_node_inputs__WEBPACK_IMPORTED_MODULE_136__.createSetActiveAudioWorkletNodeInputs)(activeAudioWorkletNodeInputsStore);
// The AudioWorkletNode constructor is only available in a SecureContext.
const audioWorkletNodeConstructor = isSecureContext
    ? (0,_factories_audio_worklet_node_constructor__WEBPACK_IMPORTED_MODULE_22__.createAudioWorkletNodeConstructor)(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, _helpers_get_audio_node_connections__WEBPACK_IMPORTED_MODULE_168__.getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, _helpers_sanitize_audio_worklet_node_options__WEBPACK_IMPORTED_MODULE_182__.sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, _helpers_test_audio_worklet_node_options_clonability__WEBPACK_IMPORTED_MODULE_193__.testAudioWorkletNodeOptionsClonability, _helpers_wrap_event_listener__WEBPACK_IMPORTED_MODULE_199__.wrapEventListener)
    : undefined;














const minimalAudioContextConstructor = (0,_factories_minimal_audio_context_constructor__WEBPACK_IMPORTED_MODULE_88__.createMinimalAudioContextConstructor)(_factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_72__.createInvalidStateError, _factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__.createNotSupportedError, _factories_unknown_error__WEBPACK_IMPORTED_MODULE_157__.createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);

const createNativeOfflineAudioContext = (0,_factories_create_native_offline_audio_context__WEBPACK_IMPORTED_MODULE_40__.createCreateNativeOfflineAudioContext)(_factories_not_supported_error__WEBPACK_IMPORTED_MODULE_125__.createNotSupportedError, nativeOfflineAudioContextConstructor);
const startRendering = (0,_factories_start_rendering__WEBPACK_IMPORTED_MODULE_138__.createStartRendering)(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, _helpers_test_audio_buffer_copy_channel_methods_out_of_bounds_support__WEBPACK_IMPORTED_MODULE_186__.testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
const minimalOfflineAudioContextConstructor = (0,_factories_minimal_offline_audio_context_constructor__WEBPACK_IMPORTED_MODULE_90__.createMinimalOfflineAudioContextConstructor)(cacheTestResult, _factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_72__.createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);

const offlineAudioContextConstructor = (0,_factories_offline_audio_context_constructor__WEBPACK_IMPORTED_MODULE_126__.createOfflineAudioContextConstructor)(baseAudioContextConstructor, cacheTestResult, _factories_invalid_state_error__WEBPACK_IMPORTED_MODULE_72__.createInvalidStateError, createNativeOfflineAudioContext, startRendering);






const isAnyAudioContext = (0,_factories_is_any_audio_context__WEBPACK_IMPORTED_MODULE_73__.createIsAnyAudioContext)(_globals__WEBPACK_IMPORTED_MODULE_165__.CONTEXT_STORE, isNativeAudioContext);
const isAnyAudioNode = (0,_factories_is_any_audio_node__WEBPACK_IMPORTED_MODULE_74__.createIsAnyAudioNode)(_globals__WEBPACK_IMPORTED_MODULE_165__.AUDIO_NODE_STORE, isNativeAudioNode);
const isAnyAudioParam = (0,_factories_is_any_audio_param__WEBPACK_IMPORTED_MODULE_75__.createIsAnyAudioParam)(_globals__WEBPACK_IMPORTED_MODULE_165__.AUDIO_PARAM_STORE, isNativeAudioParam);
const isAnyOfflineAudioContext = (0,_factories_is_any_offline_audio_context__WEBPACK_IMPORTED_MODULE_76__.createIsAnyOfflineAudioContext)(_globals__WEBPACK_IMPORTED_MODULE_165__.CONTEXT_STORE, isNativeOfflineAudioContext);
const isSupported = () => (0,_factories_is_supported_promise__WEBPACK_IMPORTED_MODULE_83__.createIsSupportedPromise)(cacheTestResult, (0,_factories_test_audio_buffer_copy_channel_methods_subarray_support__WEBPACK_IMPORTED_MODULE_142__.createTestAudioBufferCopyChannelMethodsSubarraySupport)(nativeOfflineAudioContextConstructor), (0,_factories_test_audio_context_close_method_support__WEBPACK_IMPORTED_MODULE_143__.createTestAudioContextCloseMethodSupport)(nativeAudioContextConstructor), (0,_factories_test_audio_context_decode_audio_data_method_type_error_support__WEBPACK_IMPORTED_MODULE_144__.createTestAudioContextDecodeAudioDataMethodTypeErrorSupport)(nativeOfflineAudioContextConstructor), (0,_factories_test_audio_context_options_support__WEBPACK_IMPORTED_MODULE_145__.createTestAudioContextOptionsSupport)(nativeAudioContextConstructor), (0,_factories_test_audio_node_connect_method_support__WEBPACK_IMPORTED_MODULE_146__.createTestAudioNodeConnectMethodSupport)(nativeOfflineAudioContextConstructor), (0,_factories_test_audio_worklet_processor_no_outputs_support__WEBPACK_IMPORTED_MODULE_147__.createTestAudioWorkletProcessorNoOutputsSupport)(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), (0,_factories_test_channel_merger_node_channel_count_support__WEBPACK_IMPORTED_MODULE_149__.createTestChannelMergerNodeChannelCountSupport)(nativeOfflineAudioContextConstructor), (0,_factories_test_constant_source_node_accurate_scheduling_support__WEBPACK_IMPORTED_MODULE_150__.createTestConstantSourceNodeAccurateSchedulingSupport)(nativeOfflineAudioContextConstructor), (0,_factories_test_convolver_node_buffer_reassignability_support__WEBPACK_IMPORTED_MODULE_151__.createTestConvolverNodeBufferReassignabilitySupport)(nativeOfflineAudioContextConstructor), (0,_factories_test_convolver_node_channel_count_support__WEBPACK_IMPORTED_MODULE_152__.createTestConvolverNodeChannelCountSupport)(nativeOfflineAudioContextConstructor), _helpers_test_dom_exception_constructor_support__WEBPACK_IMPORTED_MODULE_194__.testDomExceptionConstructorSupport, (0,_factories_test_is_secure_context_support__WEBPACK_IMPORTED_MODULE_153__.createTestIsSecureContextSupport)(window), (0,_factories_test_media_stream_audio_source_node_media_stream_without_audio_track_support__WEBPACK_IMPORTED_MODULE_154__.createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)(nativeAudioContextConstructor), (0,_factories_test_stereo_panner_node_default_value_support__WEBPACK_IMPORTED_MODULE_156__.createTestStereoPannerNodeDefaultValueSupport)(nativeOfflineAudioContextConstructor), _helpers_test_transferables_support__WEBPACK_IMPORTED_MODULE_196__.testTransferablesSupport);
//# sourceMappingURL=module.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/read-only-map.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/read-only-map.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ReadOnlyMap: () => (/* binding */ ReadOnlyMap)
/* harmony export */ });
class ReadOnlyMap {
    constructor(parameters) {
        this._map = new Map(parameters);
    }
    get size() {
        return this._map.size;
    }
    entries() {
        return this._map.entries();
    }
    forEach(callback, thisArg = null) {
        return this._map.forEach((value, key) => callback.call(thisArg, value, key, this));
    }
    get(name) {
        return this._map.get(name);
    }
    has(name) {
        return this._map.has(name);
    }
    keys() {
        return this._map.keys();
    }
    values() {
        return this._map.values();
    }
}
//# sourceMappingURL=read-only-map.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/abort-error-factory.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/abort-error-factory.js ***!
  \*******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=abort-error-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/active-audio-worklet-node-inputs-store.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/active-audio-worklet-node-inputs-store.js ***!
  \**************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=active-audio-worklet-node-inputs-store.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/active-input-connection.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/active-input-connection.js ***!
  \***********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=active-input-connection.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/add-active-input-connection-to-audio-node-factory.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/add-active-input-connection-to-audio-node-factory.js ***!
  \*************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=add-active-input-connection-to-audio-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/add-active-input-connection-to-audio-node-function.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/add-active-input-connection-to-audio-node-function.js ***!
  \**************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=add-active-input-connection-to-audio-node-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-factory.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-factory.js ***!
  \**********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=add-audio-node-connections-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-function.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-function.js ***!
  \***********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=add-audio-node-connections-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-factory.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-factory.js ***!
  \***********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=add-audio-param-connections-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-function.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-function.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=add-audio-param-connections-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-factory.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-factory.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=add-audio-worklet-module-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-function.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-function.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=add-audio-worklet-module-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/add-connection-to-audio-node-factory.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/add-connection-to-audio-node-factory.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=add-connection-to-audio-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/add-connection-to-audio-node-function.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/add-connection-to-audio-node-function.js ***!
  \*************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=add-connection-to-audio-node-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/add-passive-input-connection-to-audio-node-factory.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/add-passive-input-connection-to-audio-node-factory.js ***!
  \**************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=add-passive-input-connection-to-audio-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/add-passive-input-connection-to-audio-node-function.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/add-passive-input-connection-to-audio-node-function.js ***!
  \***************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=add-passive-input-connection-to-audio-node-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-factory.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-factory.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=add-silent-connection-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-function.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-function.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=add-silent-connection-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-factory.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-factory.js ***!
  \*****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=add-unrendered-audio-worklet-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-function.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-function.js ***!
  \******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=add-unrendered-audio-worklet-node-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor-factory.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor-factory.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=analyser-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=analyser-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory-factory.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory-factory.js ***!
  \**************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=analyser-node-renderer-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=analyser-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/any-audio-buffer.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/any-audio-buffer.js ***!
  \****************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=any-audio-buffer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/any-context.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/any-context.js ***!
  \***********************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=any-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor-factory.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor-factory.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-buffer-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor.js ***!
  \************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-buffer-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor-factory.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor-factory.js ***!
  \********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-buffer-source-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-buffer-source-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory-factory.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory-factory.js ***!
  \*************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-buffer-source-node-renderer-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory.js ***!
  \*****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-buffer-source-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-buffer-source-node-renderer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-store.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-store.js ***!
  \******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-buffer-store.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor-factory.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor-factory.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-context-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-context-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-context-latency-category.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-context-latency-category.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-context-latency-category.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-context-state.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-context-state.js ***!
  \*******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-context-state.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor-factory.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor-factory.js ***!
  \******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-destination-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor.js ***!
  \**********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-destination-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-renderer-factory.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-renderer-factory.js ***!
  \***************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-destination-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory-factory.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory-factory.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-listener-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory.js ***!
  \**********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-listener-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-node-connections-store.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-node-connections-store.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-node-connections-store.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-node-connections.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-node-connections.js ***!
  \**********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-node-connections.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor-factory.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor-factory.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor.js ***!
  \**********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-node-output-connection.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-node-output-connection.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-node-output-connection.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-node-renderer.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-node-renderer.js ***!
  \*******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-node-renderer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-node-store.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-node-store.js ***!
  \****************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-node-store.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-node-tail-time-store.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-node-tail-time-store.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-node-tail-time-store.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-audio-node-store.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-param-audio-node-store.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-param-audio-node-store.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-connections-store.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-param-connections-store.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-param-connections-store.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-connections.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-param-connections.js ***!
  \***********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-param-connections.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-factory-factory.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-param-factory-factory.js ***!
  \***************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-param-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-factory.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-param-factory.js ***!
  \*******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-param-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-map.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-param-map.js ***!
  \***************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-param-map.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-output-connection.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-param-output-connection.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-param-output-connection.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-renderer-factory.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-param-renderer-factory.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-param-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-store.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-param-store.js ***!
  \*****************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-param-store.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor-factory.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor-factory.js ***!
  \**************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-worklet-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-worklet-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory-factory.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory-factory.js ***!
  \*******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-worklet-node-renderer-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory.js ***!
  \***********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=audio-worklet-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/backup-offline-audio-context-store.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/backup-offline-audio-context-store.js ***!
  \**********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=backup-offline-audio-context-store.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor-factory.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor-factory.js ***!
  \**************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=base-audio-context-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=base-audio-context-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor-factory.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor-factory.js ***!
  \**************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=biquad-filter-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=biquad-filter-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory-factory.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory-factory.js ***!
  \*******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=biquad-filter-node-renderer-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory.js ***!
  \***********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=biquad-filter-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/biquad-filter-type.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/biquad-filter-type.js ***!
  \******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=biquad-filter-type.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/cache-test-result-factory.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/cache-test-result-factory.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=cache-test-result-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/cache-test-result-function.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/cache-test-result-function.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=cache-test-result-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/channel-count-mode.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/channel-count-mode.js ***!
  \******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=channel-count-mode.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/channel-interpretation.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/channel-interpretation.js ***!
  \**********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=channel-interpretation.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor-factory.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor-factory.js ***!
  \***************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=channel-merger-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor.js ***!
  \*******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=channel-merger-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory-factory.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory-factory.js ***!
  \********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=channel-merger-node-renderer-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=channel-merger-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor-factory.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor-factory.js ***!
  \*****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=channel-splitter-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=channel-splitter-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory-factory.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory-factory.js ***!
  \**********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=channel-splitter-node-renderer-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory.js ***!
  \**************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=channel-splitter-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-factory.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-factory.js ***!
  \***************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=connect-audio-param-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-function.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-function.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=connect-audio-param-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-factory.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-factory.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=connect-multiple-outputs-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-function.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-function.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=connect-multiple-outputs-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/connect-native-audio-node-to-native-audio-node-function.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/connect-native-audio-node-to-native-audio-node-function.js ***!
  \*******************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=connect-native-audio-node-to-native-audio-node-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory-factory.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory-factory.js ***!
  \*********************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=connected-native-audio-buffer-source-node-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory.js ***!
  \*************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=connected-native-audio-buffer-source-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor-factory.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor-factory.js ***!
  \****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=constant-source-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=constant-source-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory-factory.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory-factory.js ***!
  \*********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=constant-source-node-renderer-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory.js ***!
  \*************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=constant-source-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=constant-source-node-renderer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/constructor.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/constructor.js ***!
  \***********************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/context-store.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/context-store.js ***!
  \*************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=context-store.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/context.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/context.js ***!
  \*******************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-factory.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-factory.js ***!
  \***************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=convert-number-to-unsigned-long-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-function.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-function.js ***!
  \****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=convert-number-to-unsigned-long-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor-factory.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor-factory.js ***!
  \**********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=convolver-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=convolver-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory-factory.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory-factory.js ***!
  \***************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=convolver-node-renderer-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory.js ***!
  \*******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=convolver-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-factory.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-factory.js ***!
  \*******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=create-native-offline-audio-context-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-function.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-function.js ***!
  \********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=create-native-offline-audio-context-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/cycle-counters.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/cycle-counters.js ***!
  \**************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=cycle-counters.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/data-clone-error-factory.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/data-clone-error-factory.js ***!
  \************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=data-clone-error-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-factory.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-factory.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=decode-audio-data-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-function.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-function.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=decode-audio-data-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/decode-error-callback.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/decode-error-callback.js ***!
  \*********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=decode-error-callback.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/decode-success-callback.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/decode-success-callback.js ***!
  \***********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=decode-success-callback.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-factory.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-factory.js ***!
  \*******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=decrement-cycle-counter-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-function.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-function.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=decrement-cycle-counter-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor-factory.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor-factory.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=delay-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor.js ***!
  \**********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=delay-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory-factory.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory-factory.js ***!
  \***********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=delay-node-renderer-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory.js ***!
  \***************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=delay-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/delete-active-input-connection-to-audio-node-factory.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/delete-active-input-connection-to-audio-node-factory.js ***!
  \****************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=delete-active-input-connection-to-audio-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/delete-active-input-connection-to-audio-node-function.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/delete-active-input-connection-to-audio-node-function.js ***!
  \*****************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=delete-active-input-connection-to-audio-node-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-factory.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-factory.js ***!
  \********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=delete-unrendered-audio-worklet-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-function.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-function.js ***!
  \*********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=delete-unrendered-audio-worklet-node-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/detect-cycles-factory.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/detect-cycles-factory.js ***!
  \*********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=detect-cycles-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/detect-cycles-function.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/detect-cycles-function.js ***!
  \**********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=detect-cycles-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-factory.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-factory.js ***!
  \***********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=disconnect-multiple-outputs-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-function.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-function.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=disconnect-multiple-outputs-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/disconnect-native-audio-node-from-native-audio-node-function.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/disconnect-native-audio-node-from-native-audio-node-function.js ***!
  \************************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=disconnect-native-audio-node-from-native-audio-node-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/distance-model-type.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/distance-model-type.js ***!
  \*******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=distance-model-type.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor-factory.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor-factory.js ***!
  \********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=dynamics-compressor-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=dynamics-compressor-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory-factory.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory-factory.js ***!
  \*************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=dynamics-compressor-node-renderer-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory.js ***!
  \*****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=dynamics-compressor-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/encoding-error-factory.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/encoding-error-factory.js ***!
  \**********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=encoding-error-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/error-event-handler.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/error-event-handler.js ***!
  \*******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=error-event-handler.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/evaluate-audio-worklet-global-scope-function.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/evaluate-audio-worklet-global-scope-function.js ***!
  \********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=evaluate-audio-worklet-global-scope-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/evaluate-source-factory.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/evaluate-source-factory.js ***!
  \***********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=evaluate-source-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/evaluate-source-function.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/evaluate-source-function.js ***!
  \************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=evaluate-source-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/event-handler.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/event-handler.js ***!
  \*************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=event-handler.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/event-target-constructor-factory.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/event-target-constructor-factory.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=event-target-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/event-target-constructor.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/event-target-constructor.js ***!
  \************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=event-target-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-factory.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-factory.js ***!
  \*********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=expose-current-frame-and-current-time-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-function.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-function.js ***!
  \**********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=expose-current-frame-and-current-time-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/fetch-source-factory.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/fetch-source-factory.js ***!
  \********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=fetch-source-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/fetch-source-function.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/fetch-source-function.js ***!
  \*********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=fetch-source-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor-factory.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor-factory.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=gain-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor.js ***!
  \*********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=gain-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory-factory.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory-factory.js ***!
  \**********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=gain-node-renderer-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=gain-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-active-audio-worklet-node-inputs-factory.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-active-audio-worklet-node-inputs-factory.js ***!
  \********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-active-audio-worklet-node-inputs-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-active-audio-worklet-node-inputs-function.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-active-audio-worklet-node-inputs-function.js ***!
  \*********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-active-audio-worklet-node-inputs-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-audio-node-connections-function.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-audio-node-connections-function.js ***!
  \***********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-audio-node-connections-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-factory.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-factory.js ***!
  \*******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-audio-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-function.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-function.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-audio-node-renderer-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-audio-node-tail-time-factory.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-audio-node-tail-time-factory.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-audio-node-tail-time-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-audio-node-tail-time-function.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-audio-node-tail-time-function.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-audio-node-tail-time-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-audio-param-connections-function.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-audio-param-connections-function.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-audio-param-connections-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-factory.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-factory.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-audio-param-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-function.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-function.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-audio-param-renderer-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-backup-offline-audio-context-factory.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-backup-offline-audio-context-factory.js ***!
  \****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-backup-offline-audio-context-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-backup-offline-audio-context-function.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-backup-offline-audio-context-function.js ***!
  \*****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-backup-offline-audio-context-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-event-listeners-of-audio-node-function.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-event-listeners-of-audio-node-function.js ***!
  \******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-event-listeners-of-audio-node-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-first-sample-function.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-first-sample-function.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-first-sample-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-native-audio-node-function.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-native-audio-node-function.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-native-audio-node-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-native-audio-param-function.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-native-audio-param-function.js ***!
  \*******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-native-audio-param-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-native-context-factory.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-native-context-factory.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-native-context-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-native-context-function.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-native-context-function.js ***!
  \***************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-native-context-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-or-create-backup-offline-audio-context-factory.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-or-create-backup-offline-audio-context-factory.js ***!
  \**************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-or-create-backup-offline-audio-context-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-or-create-backup-offline-audio-context-function.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-or-create-backup-offline-audio-context-function.js ***!
  \***************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-or-create-backup-offline-audio-context-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-factory.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-factory.js ***!
  \******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-unrendered-audio-worklet-nodes-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-function.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-function.js ***!
  \*******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-unrendered-audio-worklet-nodes-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/get-value-for-key-function.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/get-value-for-key-function.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=get-value-for-key-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor-factory.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor-factory.js ***!
  \***********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=iir-filter-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor.js ***!
  \***************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=iir-filter-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory-factory.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory-factory.js ***!
  \****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=iir-filter-node-renderer-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=iir-filter-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory-factory.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory-factory.js ***!
  \***************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=increment-cycle-counter-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory.js ***!
  \*******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=increment-cycle-counter-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-function.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-function.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=increment-cycle-counter-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/index-size-error-factory.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/index-size-error-factory.js ***!
  \************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=index-size-error-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony import */ var _abort_error_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abort-error-factory */ "./node_modules/standardized-audio-context/build/es2019/types/abort-error-factory.js");
/* harmony import */ var _active_audio_worklet_node_inputs_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./active-audio-worklet-node-inputs-store */ "./node_modules/standardized-audio-context/build/es2019/types/active-audio-worklet-node-inputs-store.js");
/* harmony import */ var _active_input_connection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./active-input-connection */ "./node_modules/standardized-audio-context/build/es2019/types/active-input-connection.js");
/* harmony import */ var _add_active_input_connection_to_audio_node_factory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./add-active-input-connection-to-audio-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/add-active-input-connection-to-audio-node-factory.js");
/* harmony import */ var _add_active_input_connection_to_audio_node_function__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./add-active-input-connection-to-audio-node-function */ "./node_modules/standardized-audio-context/build/es2019/types/add-active-input-connection-to-audio-node-function.js");
/* harmony import */ var _add_audio_node_connections_factory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./add-audio-node-connections-factory */ "./node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-factory.js");
/* harmony import */ var _add_audio_node_connections_function__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./add-audio-node-connections-function */ "./node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-function.js");
/* harmony import */ var _add_audio_param_connections_factory__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./add-audio-param-connections-factory */ "./node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-factory.js");
/* harmony import */ var _add_audio_param_connections_function__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./add-audio-param-connections-function */ "./node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-function.js");
/* harmony import */ var _add_audio_worklet_module_factory__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./add-audio-worklet-module-factory */ "./node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-factory.js");
/* harmony import */ var _add_audio_worklet_module_function__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./add-audio-worklet-module-function */ "./node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-function.js");
/* harmony import */ var _add_connection_to_audio_node_factory__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./add-connection-to-audio-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/add-connection-to-audio-node-factory.js");
/* harmony import */ var _add_connection_to_audio_node_function__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./add-connection-to-audio-node-function */ "./node_modules/standardized-audio-context/build/es2019/types/add-connection-to-audio-node-function.js");
/* harmony import */ var _add_passive_input_connection_to_audio_node_factory__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./add-passive-input-connection-to-audio-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/add-passive-input-connection-to-audio-node-factory.js");
/* harmony import */ var _add_passive_input_connection_to_audio_node_function__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./add-passive-input-connection-to-audio-node-function */ "./node_modules/standardized-audio-context/build/es2019/types/add-passive-input-connection-to-audio-node-function.js");
/* harmony import */ var _add_silent_connection_factory__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./add-silent-connection-factory */ "./node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-factory.js");
/* harmony import */ var _add_silent_connection_function__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./add-silent-connection-function */ "./node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-function.js");
/* harmony import */ var _add_unrendered_audio_worklet_node_factory__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./add-unrendered-audio-worklet-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-factory.js");
/* harmony import */ var _add_unrendered_audio_worklet_node_function__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./add-unrendered-audio-worklet-node-function */ "./node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-function.js");
/* harmony import */ var _analyser_node_constructor__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./analyser-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor.js");
/* harmony import */ var _analyser_node_constructor_factory__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./analyser-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor-factory.js");
/* harmony import */ var _analyser_node_renderer_factory__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./analyser-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory.js");
/* harmony import */ var _analyser_node_renderer_factory_factory__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./analyser-node-renderer-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory-factory.js");
/* harmony import */ var _any_audio_buffer__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./any-audio-buffer */ "./node_modules/standardized-audio-context/build/es2019/types/any-audio-buffer.js");
/* harmony import */ var _any_context__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./any-context */ "./node_modules/standardized-audio-context/build/es2019/types/any-context.js");
/* harmony import */ var _audio_buffer_constructor__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./audio-buffer-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor.js");
/* harmony import */ var _audio_buffer_constructor_factory__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./audio-buffer-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor-factory.js");
/* harmony import */ var _audio_buffer_source_node_constructor__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./audio-buffer-source-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor.js");
/* harmony import */ var _audio_buffer_source_node_constructor_factory__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./audio-buffer-source-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor-factory.js");
/* harmony import */ var _audio_buffer_source_node_renderer__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./audio-buffer-source-node-renderer */ "./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer.js");
/* harmony import */ var _audio_buffer_source_node_renderer_factory__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./audio-buffer-source-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory.js");
/* harmony import */ var _audio_buffer_source_node_renderer_factory_factory__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./audio-buffer-source-node-renderer-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory-factory.js");
/* harmony import */ var _audio_buffer_store__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./audio-buffer-store */ "./node_modules/standardized-audio-context/build/es2019/types/audio-buffer-store.js");
/* harmony import */ var _audio_context_constructor__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./audio-context-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor.js");
/* harmony import */ var _audio_context_constructor_factory__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./audio-context-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor-factory.js");
/* harmony import */ var _audio_context_latency_category__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./audio-context-latency-category */ "./node_modules/standardized-audio-context/build/es2019/types/audio-context-latency-category.js");
/* harmony import */ var _audio_context_state__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./audio-context-state */ "./node_modules/standardized-audio-context/build/es2019/types/audio-context-state.js");
/* harmony import */ var _audio_destination_node_constructor__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./audio-destination-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor.js");
/* harmony import */ var _audio_destination_node_constructor_factory__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./audio-destination-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor-factory.js");
/* harmony import */ var _audio_destination_node_renderer_factory__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./audio-destination-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-renderer-factory.js");
/* harmony import */ var _audio_listener_factory__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./audio-listener-factory */ "./node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory.js");
/* harmony import */ var _audio_listener_factory_factory__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./audio-listener-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory-factory.js");
/* harmony import */ var _audio_node_connections__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./audio-node-connections */ "./node_modules/standardized-audio-context/build/es2019/types/audio-node-connections.js");
/* harmony import */ var _audio_node_connections_store__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./audio-node-connections-store */ "./node_modules/standardized-audio-context/build/es2019/types/audio-node-connections-store.js");
/* harmony import */ var _audio_node_constructor__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./audio-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor.js");
/* harmony import */ var _audio_node_constructor_factory__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./audio-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor-factory.js");
/* harmony import */ var _audio_node_output_connection__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./audio-node-output-connection */ "./node_modules/standardized-audio-context/build/es2019/types/audio-node-output-connection.js");
/* harmony import */ var _audio_node_renderer__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./audio-node-renderer */ "./node_modules/standardized-audio-context/build/es2019/types/audio-node-renderer.js");
/* harmony import */ var _audio_node_store__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./audio-node-store */ "./node_modules/standardized-audio-context/build/es2019/types/audio-node-store.js");
/* harmony import */ var _audio_node_tail_time_store__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./audio-node-tail-time-store */ "./node_modules/standardized-audio-context/build/es2019/types/audio-node-tail-time-store.js");
/* harmony import */ var _audio_param_audio_node_store__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./audio-param-audio-node-store */ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-audio-node-store.js");
/* harmony import */ var _audio_param_connections__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./audio-param-connections */ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-connections.js");
/* harmony import */ var _audio_param_connections_store__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./audio-param-connections-store */ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-connections-store.js");
/* harmony import */ var _audio_param_factory__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./audio-param-factory */ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-factory.js");
/* harmony import */ var _audio_param_factory_factory__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./audio-param-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-factory-factory.js");
/* harmony import */ var _audio_param_map__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./audio-param-map */ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-map.js");
/* harmony import */ var _audio_param_output_connection__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./audio-param-output-connection */ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-output-connection.js");
/* harmony import */ var _audio_param_renderer_factory__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./audio-param-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-renderer-factory.js");
/* harmony import */ var _audio_param_store__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./audio-param-store */ "./node_modules/standardized-audio-context/build/es2019/types/audio-param-store.js");
/* harmony import */ var _audio_worklet_node_constructor__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./audio-worklet-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor.js");
/* harmony import */ var _audio_worklet_node_constructor_factory__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./audio-worklet-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor-factory.js");
/* harmony import */ var _audio_worklet_node_renderer_factory__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./audio-worklet-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory.js");
/* harmony import */ var _audio_worklet_node_renderer_factory_factory__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./audio-worklet-node-renderer-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory-factory.js");
/* harmony import */ var _backup_offline_audio_context_store__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./backup-offline-audio-context-store */ "./node_modules/standardized-audio-context/build/es2019/types/backup-offline-audio-context-store.js");
/* harmony import */ var _base_audio_context_constructor__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./base-audio-context-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor.js");
/* harmony import */ var _base_audio_context_constructor_factory__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./base-audio-context-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor-factory.js");
/* harmony import */ var _biquad_filter_node_constructor__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./biquad-filter-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor.js");
/* harmony import */ var _biquad_filter_node_constructor_factory__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./biquad-filter-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor-factory.js");
/* harmony import */ var _biquad_filter_node_renderer_factory__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./biquad-filter-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory.js");
/* harmony import */ var _biquad_filter_node_renderer_factory_factory__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./biquad-filter-node-renderer-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory-factory.js");
/* harmony import */ var _biquad_filter_type__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./biquad-filter-type */ "./node_modules/standardized-audio-context/build/es2019/types/biquad-filter-type.js");
/* harmony import */ var _channel_count_mode__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./channel-count-mode */ "./node_modules/standardized-audio-context/build/es2019/types/channel-count-mode.js");
/* harmony import */ var _channel_interpretation__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./channel-interpretation */ "./node_modules/standardized-audio-context/build/es2019/types/channel-interpretation.js");
/* harmony import */ var _channel_merger_node_constructor__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./channel-merger-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor.js");
/* harmony import */ var _channel_merger_node_constructor_factory__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./channel-merger-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor-factory.js");
/* harmony import */ var _channel_merger_node_renderer_factory__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./channel-merger-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory.js");
/* harmony import */ var _channel_merger_node_renderer_factory_factory__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./channel-merger-node-renderer-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory-factory.js");
/* harmony import */ var _channel_splitter_node_constructor__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./channel-splitter-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor.js");
/* harmony import */ var _channel_splitter_node_constructor_factory__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./channel-splitter-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor-factory.js");
/* harmony import */ var _channel_splitter_node_renderer_factory__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./channel-splitter-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory.js");
/* harmony import */ var _channel_splitter_node_renderer_factory_factory__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./channel-splitter-node-renderer-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory-factory.js");
/* harmony import */ var _cache_test_result_factory__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./cache-test-result-factory */ "./node_modules/standardized-audio-context/build/es2019/types/cache-test-result-factory.js");
/* harmony import */ var _cache_test_result_function__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./cache-test-result-function */ "./node_modules/standardized-audio-context/build/es2019/types/cache-test-result-function.js");
/* harmony import */ var _connect_audio_param_factory__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./connect-audio-param-factory */ "./node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-factory.js");
/* harmony import */ var _connect_audio_param_function__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./connect-audio-param-function */ "./node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-function.js");
/* harmony import */ var _connect_multiple_outputs_factory__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./connect-multiple-outputs-factory */ "./node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-factory.js");
/* harmony import */ var _connect_multiple_outputs_function__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./connect-multiple-outputs-function */ "./node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-function.js");
/* harmony import */ var _connect_native_audio_node_to_native_audio_node_function__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./connect-native-audio-node-to-native-audio-node-function */ "./node_modules/standardized-audio-context/build/es2019/types/connect-native-audio-node-to-native-audio-node-function.js");
/* harmony import */ var _connected_native_audio_buffer_source_node_factory__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./connected-native-audio-buffer-source-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory.js");
/* harmony import */ var _connected_native_audio_buffer_source_node_factory_factory__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./connected-native-audio-buffer-source-node-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory-factory.js");
/* harmony import */ var _constant_source_node_constructor__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./constant-source-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor.js");
/* harmony import */ var _constant_source_node_constructor_factory__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./constant-source-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor-factory.js");
/* harmony import */ var _constant_source_node_renderer__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./constant-source-node-renderer */ "./node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer.js");
/* harmony import */ var _constant_source_node_renderer_factory__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./constant-source-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory.js");
/* harmony import */ var _constant_source_node_renderer_factory_factory__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./constant-source-node-renderer-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory-factory.js");
/* harmony import */ var _constructor__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./constructor */ "./node_modules/standardized-audio-context/build/es2019/types/constructor.js");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./context */ "./node_modules/standardized-audio-context/build/es2019/types/context.js");
/* harmony import */ var _context_store__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./context-store */ "./node_modules/standardized-audio-context/build/es2019/types/context-store.js");
/* harmony import */ var _convert_number_to_unsigned_long_factory__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./convert-number-to-unsigned-long-factory */ "./node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-factory.js");
/* harmony import */ var _convert_number_to_unsigned_long_function__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./convert-number-to-unsigned-long-function */ "./node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-function.js");
/* harmony import */ var _convolver_node_constructor__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./convolver-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor.js");
/* harmony import */ var _convolver_node_constructor_factory__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ./convolver-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor-factory.js");
/* harmony import */ var _convolver_node_renderer_factory__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ./convolver-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory.js");
/* harmony import */ var _convolver_node_renderer_factory_factory__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ./convolver-node-renderer-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory-factory.js");
/* harmony import */ var _create_native_offline_audio_context_factory__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ./create-native-offline-audio-context-factory */ "./node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-factory.js");
/* harmony import */ var _create_native_offline_audio_context_function__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ./create-native-offline-audio-context-function */ "./node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-function.js");
/* harmony import */ var _cycle_counters__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ./cycle-counters */ "./node_modules/standardized-audio-context/build/es2019/types/cycle-counters.js");
/* harmony import */ var _data_clone_error_factory__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ./data-clone-error-factory */ "./node_modules/standardized-audio-context/build/es2019/types/data-clone-error-factory.js");
/* harmony import */ var _decode_audio_data_factory__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ./decode-audio-data-factory */ "./node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-factory.js");
/* harmony import */ var _decode_audio_data_function__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ./decode-audio-data-function */ "./node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-function.js");
/* harmony import */ var _decode_error_callback__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ./decode-error-callback */ "./node_modules/standardized-audio-context/build/es2019/types/decode-error-callback.js");
/* harmony import */ var _decode_success_callback__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ./decode-success-callback */ "./node_modules/standardized-audio-context/build/es2019/types/decode-success-callback.js");
/* harmony import */ var _decrement_cycle_counter_factory__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ./decrement-cycle-counter-factory */ "./node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-factory.js");
/* harmony import */ var _decrement_cycle_counter_function__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ./decrement-cycle-counter-function */ "./node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-function.js");
/* harmony import */ var _delay_node_constructor__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ./delay-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor.js");
/* harmony import */ var _delay_node_constructor_factory__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ./delay-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor-factory.js");
/* harmony import */ var _delay_node_renderer_factory__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ./delay-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory.js");
/* harmony import */ var _delay_node_renderer_factory_factory__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ./delay-node-renderer-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory-factory.js");
/* harmony import */ var _delete_active_input_connection_to_audio_node_factory__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ./delete-active-input-connection-to-audio-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/delete-active-input-connection-to-audio-node-factory.js");
/* harmony import */ var _delete_active_input_connection_to_audio_node_function__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(/*! ./delete-active-input-connection-to-audio-node-function */ "./node_modules/standardized-audio-context/build/es2019/types/delete-active-input-connection-to-audio-node-function.js");
/* harmony import */ var _delete_unrendered_audio_worklet_node_factory__WEBPACK_IMPORTED_MODULE_120__ = __webpack_require__(/*! ./delete-unrendered-audio-worklet-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-factory.js");
/* harmony import */ var _delete_unrendered_audio_worklet_node_function__WEBPACK_IMPORTED_MODULE_121__ = __webpack_require__(/*! ./delete-unrendered-audio-worklet-node-function */ "./node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-function.js");
/* harmony import */ var _detect_cycles_factory__WEBPACK_IMPORTED_MODULE_122__ = __webpack_require__(/*! ./detect-cycles-factory */ "./node_modules/standardized-audio-context/build/es2019/types/detect-cycles-factory.js");
/* harmony import */ var _detect_cycles_function__WEBPACK_IMPORTED_MODULE_123__ = __webpack_require__(/*! ./detect-cycles-function */ "./node_modules/standardized-audio-context/build/es2019/types/detect-cycles-function.js");
/* harmony import */ var _disconnect_multiple_outputs_factory__WEBPACK_IMPORTED_MODULE_124__ = __webpack_require__(/*! ./disconnect-multiple-outputs-factory */ "./node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-factory.js");
/* harmony import */ var _disconnect_multiple_outputs_function__WEBPACK_IMPORTED_MODULE_125__ = __webpack_require__(/*! ./disconnect-multiple-outputs-function */ "./node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-function.js");
/* harmony import */ var _disconnect_native_audio_node_from_native_audio_node_function__WEBPACK_IMPORTED_MODULE_126__ = __webpack_require__(/*! ./disconnect-native-audio-node-from-native-audio-node-function */ "./node_modules/standardized-audio-context/build/es2019/types/disconnect-native-audio-node-from-native-audio-node-function.js");
/* harmony import */ var _distance_model_type__WEBPACK_IMPORTED_MODULE_127__ = __webpack_require__(/*! ./distance-model-type */ "./node_modules/standardized-audio-context/build/es2019/types/distance-model-type.js");
/* harmony import */ var _dynamics_compressor_node_constructor__WEBPACK_IMPORTED_MODULE_128__ = __webpack_require__(/*! ./dynamics-compressor-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor.js");
/* harmony import */ var _dynamics_compressor_node_constructor_factory__WEBPACK_IMPORTED_MODULE_129__ = __webpack_require__(/*! ./dynamics-compressor-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor-factory.js");
/* harmony import */ var _dynamics_compressor_node_renderer_factory__WEBPACK_IMPORTED_MODULE_130__ = __webpack_require__(/*! ./dynamics-compressor-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory.js");
/* harmony import */ var _dynamics_compressor_node_renderer_factory_factory__WEBPACK_IMPORTED_MODULE_131__ = __webpack_require__(/*! ./dynamics-compressor-node-renderer-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory-factory.js");
/* harmony import */ var _encoding_error_factory__WEBPACK_IMPORTED_MODULE_132__ = __webpack_require__(/*! ./encoding-error-factory */ "./node_modules/standardized-audio-context/build/es2019/types/encoding-error-factory.js");
/* harmony import */ var _error_event_handler__WEBPACK_IMPORTED_MODULE_133__ = __webpack_require__(/*! ./error-event-handler */ "./node_modules/standardized-audio-context/build/es2019/types/error-event-handler.js");
/* harmony import */ var _evaluate_audio_worklet_global_scope_function__WEBPACK_IMPORTED_MODULE_134__ = __webpack_require__(/*! ./evaluate-audio-worklet-global-scope-function */ "./node_modules/standardized-audio-context/build/es2019/types/evaluate-audio-worklet-global-scope-function.js");
/* harmony import */ var _evaluate_source_factory__WEBPACK_IMPORTED_MODULE_135__ = __webpack_require__(/*! ./evaluate-source-factory */ "./node_modules/standardized-audio-context/build/es2019/types/evaluate-source-factory.js");
/* harmony import */ var _evaluate_source_function__WEBPACK_IMPORTED_MODULE_136__ = __webpack_require__(/*! ./evaluate-source-function */ "./node_modules/standardized-audio-context/build/es2019/types/evaluate-source-function.js");
/* harmony import */ var _event_handler__WEBPACK_IMPORTED_MODULE_137__ = __webpack_require__(/*! ./event-handler */ "./node_modules/standardized-audio-context/build/es2019/types/event-handler.js");
/* harmony import */ var _event_target_constructor__WEBPACK_IMPORTED_MODULE_138__ = __webpack_require__(/*! ./event-target-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/event-target-constructor.js");
/* harmony import */ var _event_target_constructor_factory__WEBPACK_IMPORTED_MODULE_139__ = __webpack_require__(/*! ./event-target-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/event-target-constructor-factory.js");
/* harmony import */ var _expose_current_frame_and_current_time_factory__WEBPACK_IMPORTED_MODULE_140__ = __webpack_require__(/*! ./expose-current-frame-and-current-time-factory */ "./node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-factory.js");
/* harmony import */ var _expose_current_frame_and_current_time_function__WEBPACK_IMPORTED_MODULE_141__ = __webpack_require__(/*! ./expose-current-frame-and-current-time-function */ "./node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-function.js");
/* harmony import */ var _fetch_source_factory__WEBPACK_IMPORTED_MODULE_142__ = __webpack_require__(/*! ./fetch-source-factory */ "./node_modules/standardized-audio-context/build/es2019/types/fetch-source-factory.js");
/* harmony import */ var _fetch_source_function__WEBPACK_IMPORTED_MODULE_143__ = __webpack_require__(/*! ./fetch-source-function */ "./node_modules/standardized-audio-context/build/es2019/types/fetch-source-function.js");
/* harmony import */ var _gain_node_constructor__WEBPACK_IMPORTED_MODULE_144__ = __webpack_require__(/*! ./gain-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor.js");
/* harmony import */ var _gain_node_constructor_factory__WEBPACK_IMPORTED_MODULE_145__ = __webpack_require__(/*! ./gain-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor-factory.js");
/* harmony import */ var _gain_node_renderer_factory__WEBPACK_IMPORTED_MODULE_146__ = __webpack_require__(/*! ./gain-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory.js");
/* harmony import */ var _gain_node_renderer_factory_factory__WEBPACK_IMPORTED_MODULE_147__ = __webpack_require__(/*! ./gain-node-renderer-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory-factory.js");
/* harmony import */ var _get_active_audio_worklet_node_inputs_factory__WEBPACK_IMPORTED_MODULE_148__ = __webpack_require__(/*! ./get-active-audio-worklet-node-inputs-factory */ "./node_modules/standardized-audio-context/build/es2019/types/get-active-audio-worklet-node-inputs-factory.js");
/* harmony import */ var _get_active_audio_worklet_node_inputs_function__WEBPACK_IMPORTED_MODULE_149__ = __webpack_require__(/*! ./get-active-audio-worklet-node-inputs-function */ "./node_modules/standardized-audio-context/build/es2019/types/get-active-audio-worklet-node-inputs-function.js");
/* harmony import */ var _get_audio_node_connections_function__WEBPACK_IMPORTED_MODULE_150__ = __webpack_require__(/*! ./get-audio-node-connections-function */ "./node_modules/standardized-audio-context/build/es2019/types/get-audio-node-connections-function.js");
/* harmony import */ var _get_audio_node_renderer_factory__WEBPACK_IMPORTED_MODULE_151__ = __webpack_require__(/*! ./get-audio-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-factory.js");
/* harmony import */ var _get_audio_node_renderer_function__WEBPACK_IMPORTED_MODULE_152__ = __webpack_require__(/*! ./get-audio-node-renderer-function */ "./node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-function.js");
/* harmony import */ var _get_audio_node_tail_time_factory__WEBPACK_IMPORTED_MODULE_153__ = __webpack_require__(/*! ./get-audio-node-tail-time-factory */ "./node_modules/standardized-audio-context/build/es2019/types/get-audio-node-tail-time-factory.js");
/* harmony import */ var _get_audio_node_tail_time_function__WEBPACK_IMPORTED_MODULE_154__ = __webpack_require__(/*! ./get-audio-node-tail-time-function */ "./node_modules/standardized-audio-context/build/es2019/types/get-audio-node-tail-time-function.js");
/* harmony import */ var _get_audio_param_connections_function__WEBPACK_IMPORTED_MODULE_155__ = __webpack_require__(/*! ./get-audio-param-connections-function */ "./node_modules/standardized-audio-context/build/es2019/types/get-audio-param-connections-function.js");
/* harmony import */ var _get_audio_param_renderer_factory__WEBPACK_IMPORTED_MODULE_156__ = __webpack_require__(/*! ./get-audio-param-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-factory.js");
/* harmony import */ var _get_audio_param_renderer_function__WEBPACK_IMPORTED_MODULE_157__ = __webpack_require__(/*! ./get-audio-param-renderer-function */ "./node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-function.js");
/* harmony import */ var _get_backup_offline_audio_context_factory__WEBPACK_IMPORTED_MODULE_158__ = __webpack_require__(/*! ./get-backup-offline-audio-context-factory */ "./node_modules/standardized-audio-context/build/es2019/types/get-backup-offline-audio-context-factory.js");
/* harmony import */ var _get_backup_offline_audio_context_function__WEBPACK_IMPORTED_MODULE_159__ = __webpack_require__(/*! ./get-backup-offline-audio-context-function */ "./node_modules/standardized-audio-context/build/es2019/types/get-backup-offline-audio-context-function.js");
/* harmony import */ var _get_event_listeners_of_audio_node_function__WEBPACK_IMPORTED_MODULE_160__ = __webpack_require__(/*! ./get-event-listeners-of-audio-node-function */ "./node_modules/standardized-audio-context/build/es2019/types/get-event-listeners-of-audio-node-function.js");
/* harmony import */ var _get_first_sample_function__WEBPACK_IMPORTED_MODULE_161__ = __webpack_require__(/*! ./get-first-sample-function */ "./node_modules/standardized-audio-context/build/es2019/types/get-first-sample-function.js");
/* harmony import */ var _get_native_audio_node_function__WEBPACK_IMPORTED_MODULE_162__ = __webpack_require__(/*! ./get-native-audio-node-function */ "./node_modules/standardized-audio-context/build/es2019/types/get-native-audio-node-function.js");
/* harmony import */ var _get_native_audio_param_function__WEBPACK_IMPORTED_MODULE_163__ = __webpack_require__(/*! ./get-native-audio-param-function */ "./node_modules/standardized-audio-context/build/es2019/types/get-native-audio-param-function.js");
/* harmony import */ var _get_native_context_factory__WEBPACK_IMPORTED_MODULE_164__ = __webpack_require__(/*! ./get-native-context-factory */ "./node_modules/standardized-audio-context/build/es2019/types/get-native-context-factory.js");
/* harmony import */ var _get_native_context_function__WEBPACK_IMPORTED_MODULE_165__ = __webpack_require__(/*! ./get-native-context-function */ "./node_modules/standardized-audio-context/build/es2019/types/get-native-context-function.js");
/* harmony import */ var _get_or_create_backup_offline_audio_context_factory__WEBPACK_IMPORTED_MODULE_166__ = __webpack_require__(/*! ./get-or-create-backup-offline-audio-context-factory */ "./node_modules/standardized-audio-context/build/es2019/types/get-or-create-backup-offline-audio-context-factory.js");
/* harmony import */ var _get_or_create_backup_offline_audio_context_function__WEBPACK_IMPORTED_MODULE_167__ = __webpack_require__(/*! ./get-or-create-backup-offline-audio-context-function */ "./node_modules/standardized-audio-context/build/es2019/types/get-or-create-backup-offline-audio-context-function.js");
/* harmony import */ var _get_unrendered_audio_worklet_nodes_factory__WEBPACK_IMPORTED_MODULE_168__ = __webpack_require__(/*! ./get-unrendered-audio-worklet-nodes-factory */ "./node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-factory.js");
/* harmony import */ var _get_unrendered_audio_worklet_nodes_function__WEBPACK_IMPORTED_MODULE_169__ = __webpack_require__(/*! ./get-unrendered-audio-worklet-nodes-function */ "./node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-function.js");
/* harmony import */ var _get_value_for_key_function__WEBPACK_IMPORTED_MODULE_170__ = __webpack_require__(/*! ./get-value-for-key-function */ "./node_modules/standardized-audio-context/build/es2019/types/get-value-for-key-function.js");
/* harmony import */ var _iir_filter_node_constructor__WEBPACK_IMPORTED_MODULE_171__ = __webpack_require__(/*! ./iir-filter-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor.js");
/* harmony import */ var _iir_filter_node_constructor_factory__WEBPACK_IMPORTED_MODULE_172__ = __webpack_require__(/*! ./iir-filter-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor-factory.js");
/* harmony import */ var _iir_filter_node_renderer_factory__WEBPACK_IMPORTED_MODULE_173__ = __webpack_require__(/*! ./iir-filter-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory.js");
/* harmony import */ var _iir_filter_node_renderer_factory_factory__WEBPACK_IMPORTED_MODULE_174__ = __webpack_require__(/*! ./iir-filter-node-renderer-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory-factory.js");
/* harmony import */ var _increment_cycle_counter_factory__WEBPACK_IMPORTED_MODULE_175__ = __webpack_require__(/*! ./increment-cycle-counter-factory */ "./node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory.js");
/* harmony import */ var _increment_cycle_counter_factory_factory__WEBPACK_IMPORTED_MODULE_176__ = __webpack_require__(/*! ./increment-cycle-counter-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory-factory.js");
/* harmony import */ var _increment_cycle_counter_function__WEBPACK_IMPORTED_MODULE_177__ = __webpack_require__(/*! ./increment-cycle-counter-function */ "./node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-function.js");
/* harmony import */ var _index_size_error_factory__WEBPACK_IMPORTED_MODULE_178__ = __webpack_require__(/*! ./index-size-error-factory */ "./node_modules/standardized-audio-context/build/es2019/types/index-size-error-factory.js");
/* harmony import */ var _insert_element_in_set_function__WEBPACK_IMPORTED_MODULE_179__ = __webpack_require__(/*! ./insert-element-in-set-function */ "./node_modules/standardized-audio-context/build/es2019/types/insert-element-in-set-function.js");
/* harmony import */ var _internal_state_event_listener__WEBPACK_IMPORTED_MODULE_180__ = __webpack_require__(/*! ./internal-state-event-listener */ "./node_modules/standardized-audio-context/build/es2019/types/internal-state-event-listener.js");
/* harmony import */ var _invalid_access_error_factory__WEBPACK_IMPORTED_MODULE_181__ = __webpack_require__(/*! ./invalid-access-error-factory */ "./node_modules/standardized-audio-context/build/es2019/types/invalid-access-error-factory.js");
/* harmony import */ var _invalid_state_error_factory__WEBPACK_IMPORTED_MODULE_182__ = __webpack_require__(/*! ./invalid-state-error-factory */ "./node_modules/standardized-audio-context/build/es2019/types/invalid-state-error-factory.js");
/* harmony import */ var _is_active_audio_node_function__WEBPACK_IMPORTED_MODULE_183__ = __webpack_require__(/*! ./is-active-audio-node-function */ "./node_modules/standardized-audio-context/build/es2019/types/is-active-audio-node-function.js");
/* harmony import */ var _is_any_audio_context_factory__WEBPACK_IMPORTED_MODULE_184__ = __webpack_require__(/*! ./is-any-audio-context-factory */ "./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-factory.js");
/* harmony import */ var _is_any_audio_context_function__WEBPACK_IMPORTED_MODULE_185__ = __webpack_require__(/*! ./is-any-audio-context-function */ "./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-function.js");
/* harmony import */ var _is_any_audio_node_factory__WEBPACK_IMPORTED_MODULE_186__ = __webpack_require__(/*! ./is-any-audio-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-factory.js");
/* harmony import */ var _is_any_audio_node_function__WEBPACK_IMPORTED_MODULE_187__ = __webpack_require__(/*! ./is-any-audio-node-function */ "./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-function.js");
/* harmony import */ var _is_any_audio_param_factory__WEBPACK_IMPORTED_MODULE_188__ = __webpack_require__(/*! ./is-any-audio-param-factory */ "./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-factory.js");
/* harmony import */ var _is_any_audio_param_function__WEBPACK_IMPORTED_MODULE_189__ = __webpack_require__(/*! ./is-any-audio-param-function */ "./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-function.js");
/* harmony import */ var _is_any_offline_audio_context_factory__WEBPACK_IMPORTED_MODULE_190__ = __webpack_require__(/*! ./is-any-offline-audio-context-factory */ "./node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-factory.js");
/* harmony import */ var _is_any_offline_audio_context_function__WEBPACK_IMPORTED_MODULE_191__ = __webpack_require__(/*! ./is-any-offline-audio-context-function */ "./node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-function.js");
/* harmony import */ var _is_dc_curve_function__WEBPACK_IMPORTED_MODULE_192__ = __webpack_require__(/*! ./is-dc-curve-function */ "./node_modules/standardized-audio-context/build/es2019/types/is-dc-curve-function.js");
/* harmony import */ var _is_native_audio_context_factory__WEBPACK_IMPORTED_MODULE_193__ = __webpack_require__(/*! ./is-native-audio-context-factory */ "./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-factory.js");
/* harmony import */ var _is_native_audio_context_function__WEBPACK_IMPORTED_MODULE_194__ = __webpack_require__(/*! ./is-native-audio-context-function */ "./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-function.js");
/* harmony import */ var _is_native_audio_node_factory__WEBPACK_IMPORTED_MODULE_195__ = __webpack_require__(/*! ./is-native-audio-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-factory.js");
/* harmony import */ var _is_native_audio_node_function__WEBPACK_IMPORTED_MODULE_196__ = __webpack_require__(/*! ./is-native-audio-node-function */ "./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-function.js");
/* harmony import */ var _is_native_audio_param_factory__WEBPACK_IMPORTED_MODULE_197__ = __webpack_require__(/*! ./is-native-audio-param-factory */ "./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-factory.js");
/* harmony import */ var _is_native_audio_param_function__WEBPACK_IMPORTED_MODULE_198__ = __webpack_require__(/*! ./is-native-audio-param-function */ "./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-function.js");
/* harmony import */ var _is_native_context_factory__WEBPACK_IMPORTED_MODULE_199__ = __webpack_require__(/*! ./is-native-context-factory */ "./node_modules/standardized-audio-context/build/es2019/types/is-native-context-factory.js");
/* harmony import */ var _is_native_context_function__WEBPACK_IMPORTED_MODULE_200__ = __webpack_require__(/*! ./is-native-context-function */ "./node_modules/standardized-audio-context/build/es2019/types/is-native-context-function.js");
/* harmony import */ var _is_native_offline_audio_context_factory__WEBPACK_IMPORTED_MODULE_201__ = __webpack_require__(/*! ./is-native-offline-audio-context-factory */ "./node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-factory.js");
/* harmony import */ var _is_native_offline_audio_context_function__WEBPACK_IMPORTED_MODULE_202__ = __webpack_require__(/*! ./is-native-offline-audio-context-function */ "./node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-function.js");
/* harmony import */ var _is_part_of_a_cycle_function__WEBPACK_IMPORTED_MODULE_203__ = __webpack_require__(/*! ./is-part-of-a-cycle-function */ "./node_modules/standardized-audio-context/build/es2019/types/is-part-of-a-cycle-function.js");
/* harmony import */ var _is_passive_audio_node_function__WEBPACK_IMPORTED_MODULE_204__ = __webpack_require__(/*! ./is-passive-audio-node-function */ "./node_modules/standardized-audio-context/build/es2019/types/is-passive-audio-node-function.js");
/* harmony import */ var _is_secure_context_factory__WEBPACK_IMPORTED_MODULE_205__ = __webpack_require__(/*! ./is-secure-context-factory */ "./node_modules/standardized-audio-context/build/es2019/types/is-secure-context-factory.js");
/* harmony import */ var _is_supported_promise_factory__WEBPACK_IMPORTED_MODULE_206__ = __webpack_require__(/*! ./is-supported-promise-factory */ "./node_modules/standardized-audio-context/build/es2019/types/is-supported-promise-factory.js");
/* harmony import */ var _media_element_audio_source_node_constructor__WEBPACK_IMPORTED_MODULE_207__ = __webpack_require__(/*! ./media-element-audio-source-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor.js");
/* harmony import */ var _media_element_audio_source_node_constructor_factory__WEBPACK_IMPORTED_MODULE_208__ = __webpack_require__(/*! ./media-element-audio-source-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor-factory.js");
/* harmony import */ var _media_stream_audio_destination_node_constructor__WEBPACK_IMPORTED_MODULE_209__ = __webpack_require__(/*! ./media-stream-audio-destination-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor.js");
/* harmony import */ var _media_stream_audio_destination_node_constructor_factory__WEBPACK_IMPORTED_MODULE_210__ = __webpack_require__(/*! ./media-stream-audio-destination-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor-factory.js");
/* harmony import */ var _media_stream_audio_source_node_constructor__WEBPACK_IMPORTED_MODULE_211__ = __webpack_require__(/*! ./media-stream-audio-source-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor.js");
/* harmony import */ var _media_stream_audio_source_node_constructor_factory__WEBPACK_IMPORTED_MODULE_212__ = __webpack_require__(/*! ./media-stream-audio-source-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor-factory.js");
/* harmony import */ var _media_stream_track_audio_source_node_constructor__WEBPACK_IMPORTED_MODULE_213__ = __webpack_require__(/*! ./media-stream-track-audio-source-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor.js");
/* harmony import */ var _media_stream_track_audio_source_node_constructor_factory__WEBPACK_IMPORTED_MODULE_214__ = __webpack_require__(/*! ./media-stream-track-audio-source-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor-factory.js");
/* harmony import */ var _minimal_audio_context_constructor__WEBPACK_IMPORTED_MODULE_215__ = __webpack_require__(/*! ./minimal-audio-context-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor.js");
/* harmony import */ var _minimal_audio_context_constructor_factory__WEBPACK_IMPORTED_MODULE_216__ = __webpack_require__(/*! ./minimal-audio-context-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor-factory.js");
/* harmony import */ var _minimal_base_audio_context_constructor__WEBPACK_IMPORTED_MODULE_217__ = __webpack_require__(/*! ./minimal-base-audio-context-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor.js");
/* harmony import */ var _minimal_base_audio_context_constructor_factory__WEBPACK_IMPORTED_MODULE_218__ = __webpack_require__(/*! ./minimal-base-audio-context-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor-factory.js");
/* harmony import */ var _minimal_offline_audio_context_constructor__WEBPACK_IMPORTED_MODULE_219__ = __webpack_require__(/*! ./minimal-offline-audio-context-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor.js");
/* harmony import */ var _minimal_offline_audio_context_constructor_factory__WEBPACK_IMPORTED_MODULE_220__ = __webpack_require__(/*! ./minimal-offline-audio-context-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor-factory.js");
/* harmony import */ var _monitor_connections_factory__WEBPACK_IMPORTED_MODULE_221__ = __webpack_require__(/*! ./monitor-connections-factory */ "./node_modules/standardized-audio-context/build/es2019/types/monitor-connections-factory.js");
/* harmony import */ var _monitor_connections_function__WEBPACK_IMPORTED_MODULE_222__ = __webpack_require__(/*! ./monitor-connections-function */ "./node_modules/standardized-audio-context/build/es2019/types/monitor-connections-function.js");
/* harmony import */ var _native_analyser_node__WEBPACK_IMPORTED_MODULE_223__ = __webpack_require__(/*! ./native-analyser-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-analyser-node.js");
/* harmony import */ var _native_analyser_node_factory__WEBPACK_IMPORTED_MODULE_224__ = __webpack_require__(/*! ./native-analyser-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory.js");
/* harmony import */ var _native_analyser_node_factory_factory__WEBPACK_IMPORTED_MODULE_225__ = __webpack_require__(/*! ./native-analyser-node-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory-factory.js");
/* harmony import */ var _native_audio_buffer__WEBPACK_IMPORTED_MODULE_226__ = __webpack_require__(/*! ./native-audio-buffer */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer.js");
/* harmony import */ var _native_audio_buffer_constructor__WEBPACK_IMPORTED_MODULE_227__ = __webpack_require__(/*! ./native-audio-buffer-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor.js");
/* harmony import */ var _native_audio_buffer_constructor_factory__WEBPACK_IMPORTED_MODULE_228__ = __webpack_require__(/*! ./native-audio-buffer-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor-factory.js");
/* harmony import */ var _native_audio_buffer_source_node__WEBPACK_IMPORTED_MODULE_229__ = __webpack_require__(/*! ./native-audio-buffer-source-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node.js");
/* harmony import */ var _native_audio_buffer_source_node_factory__WEBPACK_IMPORTED_MODULE_230__ = __webpack_require__(/*! ./native-audio-buffer-source-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory.js");
/* harmony import */ var _native_audio_buffer_source_node_factory_factory__WEBPACK_IMPORTED_MODULE_231__ = __webpack_require__(/*! ./native-audio-buffer-source-node-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory-factory.js");
/* harmony import */ var _native_audio_context__WEBPACK_IMPORTED_MODULE_232__ = __webpack_require__(/*! ./native-audio-context */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-context.js");
/* harmony import */ var _native_audio_context_constructor__WEBPACK_IMPORTED_MODULE_233__ = __webpack_require__(/*! ./native-audio-context-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor.js");
/* harmony import */ var _native_audio_context_constructor_factory__WEBPACK_IMPORTED_MODULE_234__ = __webpack_require__(/*! ./native-audio-context-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor-factory.js");
/* harmony import */ var _native_audio_destination_node__WEBPACK_IMPORTED_MODULE_235__ = __webpack_require__(/*! ./native-audio-destination-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node.js");
/* harmony import */ var _native_audio_destination_node_factory__WEBPACK_IMPORTED_MODULE_236__ = __webpack_require__(/*! ./native-audio-destination-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory.js");
/* harmony import */ var _native_audio_destination_node_factory_factory__WEBPACK_IMPORTED_MODULE_237__ = __webpack_require__(/*! ./native-audio-destination-node-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory-factory.js");
/* harmony import */ var _native_audio_listener__WEBPACK_IMPORTED_MODULE_238__ = __webpack_require__(/*! ./native-audio-listener */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-listener.js");
/* harmony import */ var _native_audio_node__WEBPACK_IMPORTED_MODULE_239__ = __webpack_require__(/*! ./native-audio-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-node.js");
/* harmony import */ var _native_audio_param__WEBPACK_IMPORTED_MODULE_240__ = __webpack_require__(/*! ./native-audio-param */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-param.js");
/* harmony import */ var _native_audio_param_map__WEBPACK_IMPORTED_MODULE_241__ = __webpack_require__(/*! ./native-audio-param-map */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-param-map.js");
/* harmony import */ var _native_audio_worklet__WEBPACK_IMPORTED_MODULE_242__ = __webpack_require__(/*! ./native-audio-worklet */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet.js");
/* harmony import */ var _native_audio_worklet_node__WEBPACK_IMPORTED_MODULE_243__ = __webpack_require__(/*! ./native-audio-worklet-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node.js");
/* harmony import */ var _native_audio_worklet_node_constructor__WEBPACK_IMPORTED_MODULE_244__ = __webpack_require__(/*! ./native-audio-worklet-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor.js");
/* harmony import */ var _native_audio_worklet_node_constructor_factory__WEBPACK_IMPORTED_MODULE_245__ = __webpack_require__(/*! ./native-audio-worklet-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor-factory.js");
/* harmony import */ var _native_audio_worklet_node_factory__WEBPACK_IMPORTED_MODULE_246__ = __webpack_require__(/*! ./native-audio-worklet-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory.js");
/* harmony import */ var _native_audio_worklet_node_factory_factory__WEBPACK_IMPORTED_MODULE_247__ = __webpack_require__(/*! ./native-audio-worklet-node-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory-factory.js");
/* harmony import */ var _native_audio_worklet_node_faker_factory__WEBPACK_IMPORTED_MODULE_248__ = __webpack_require__(/*! ./native-audio-worklet-node-faker-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory.js");
/* harmony import */ var _native_audio_worklet_node_faker_factory_factory__WEBPACK_IMPORTED_MODULE_249__ = __webpack_require__(/*! ./native-audio-worklet-node-faker-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory-factory.js");
/* harmony import */ var _native_audio_worklet_node_options__WEBPACK_IMPORTED_MODULE_250__ = __webpack_require__(/*! ./native-audio-worklet-node-options */ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-options.js");
/* harmony import */ var _native_biquad_filter_node__WEBPACK_IMPORTED_MODULE_251__ = __webpack_require__(/*! ./native-biquad-filter-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node.js");
/* harmony import */ var _native_biquad_filter_node_factory__WEBPACK_IMPORTED_MODULE_252__ = __webpack_require__(/*! ./native-biquad-filter-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node-factory.js");
/* harmony import */ var _native_channel_merger_node__WEBPACK_IMPORTED_MODULE_253__ = __webpack_require__(/*! ./native-channel-merger-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node.js");
/* harmony import */ var _native_channel_merger_node_factory__WEBPACK_IMPORTED_MODULE_254__ = __webpack_require__(/*! ./native-channel-merger-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory.js");
/* harmony import */ var _native_channel_merger_node_factory_factory__WEBPACK_IMPORTED_MODULE_255__ = __webpack_require__(/*! ./native-channel-merger-node-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory-factory.js");
/* harmony import */ var _native_channel_splitter_node__WEBPACK_IMPORTED_MODULE_256__ = __webpack_require__(/*! ./native-channel-splitter-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node.js");
/* harmony import */ var _native_channel_splitter_node_factory__WEBPACK_IMPORTED_MODULE_257__ = __webpack_require__(/*! ./native-channel-splitter-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node-factory.js");
/* harmony import */ var _native_constant_source_node__WEBPACK_IMPORTED_MODULE_258__ = __webpack_require__(/*! ./native-constant-source-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node.js");
/* harmony import */ var _native_constant_source_node_factory__WEBPACK_IMPORTED_MODULE_259__ = __webpack_require__(/*! ./native-constant-source-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory.js");
/* harmony import */ var _native_constant_source_node_factory_factory__WEBPACK_IMPORTED_MODULE_260__ = __webpack_require__(/*! ./native-constant-source-node-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory-factory.js");
/* harmony import */ var _native_constant_source_node_faker_factory__WEBPACK_IMPORTED_MODULE_261__ = __webpack_require__(/*! ./native-constant-source-node-faker-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory.js");
/* harmony import */ var _native_constant_source_node_faker_factory_factory__WEBPACK_IMPORTED_MODULE_262__ = __webpack_require__(/*! ./native-constant-source-node-faker-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory-factory.js");
/* harmony import */ var _native_context__WEBPACK_IMPORTED_MODULE_263__ = __webpack_require__(/*! ./native-context */ "./node_modules/standardized-audio-context/build/es2019/types/native-context.js");
/* harmony import */ var _native_convolver_node__WEBPACK_IMPORTED_MODULE_264__ = __webpack_require__(/*! ./native-convolver-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-convolver-node.js");
/* harmony import */ var _native_convolver_node_factory__WEBPACK_IMPORTED_MODULE_265__ = __webpack_require__(/*! ./native-convolver-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory.js");
/* harmony import */ var _native_convolver_node_factory_factory__WEBPACK_IMPORTED_MODULE_266__ = __webpack_require__(/*! ./native-convolver-node-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory-factory.js");
/* harmony import */ var _native_delay_node_factory__WEBPACK_IMPORTED_MODULE_267__ = __webpack_require__(/*! ./native-delay-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-delay-node-factory.js");
/* harmony import */ var _native_delay_node__WEBPACK_IMPORTED_MODULE_268__ = __webpack_require__(/*! ./native-delay-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-delay-node.js");
/* harmony import */ var _native_dynamics_compressor_node__WEBPACK_IMPORTED_MODULE_269__ = __webpack_require__(/*! ./native-dynamics-compressor-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node.js");
/* harmony import */ var _native_dynamics_compressor_node_factory__WEBPACK_IMPORTED_MODULE_270__ = __webpack_require__(/*! ./native-dynamics-compressor-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory.js");
/* harmony import */ var _native_dynamics_compressor_node_factory_factory__WEBPACK_IMPORTED_MODULE_271__ = __webpack_require__(/*! ./native-dynamics-compressor-node-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory-factory.js");
/* harmony import */ var _native_event_target__WEBPACK_IMPORTED_MODULE_272__ = __webpack_require__(/*! ./native-event-target */ "./node_modules/standardized-audio-context/build/es2019/types/native-event-target.js");
/* harmony import */ var _native_gain_node__WEBPACK_IMPORTED_MODULE_273__ = __webpack_require__(/*! ./native-gain-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-gain-node.js");
/* harmony import */ var _native_gain_node_factory__WEBPACK_IMPORTED_MODULE_274__ = __webpack_require__(/*! ./native-gain-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-gain-node-factory.js");
/* harmony import */ var _native_iir_filter_node__WEBPACK_IMPORTED_MODULE_275__ = __webpack_require__(/*! ./native-iir-filter-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node.js");
/* harmony import */ var _native_iir_filter_node_factory__WEBPACK_IMPORTED_MODULE_276__ = __webpack_require__(/*! ./native-iir-filter-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory.js");
/* harmony import */ var _native_iir_filter_node_factory_factory__WEBPACK_IMPORTED_MODULE_277__ = __webpack_require__(/*! ./native-iir-filter-node-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory-factory.js");
/* harmony import */ var _native_iir_filter_node_faker_factory__WEBPACK_IMPORTED_MODULE_278__ = __webpack_require__(/*! ./native-iir-filter-node-faker-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory.js");
/* harmony import */ var _native_iir_filter_node_faker_factory_factory__WEBPACK_IMPORTED_MODULE_279__ = __webpack_require__(/*! ./native-iir-filter-node-faker-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory-factory.js");
/* harmony import */ var _native_media_element_audio_source_node__WEBPACK_IMPORTED_MODULE_280__ = __webpack_require__(/*! ./native-media-element-audio-source-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node.js");
/* harmony import */ var _native_media_element_audio_source_node_factory__WEBPACK_IMPORTED_MODULE_281__ = __webpack_require__(/*! ./native-media-element-audio-source-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node-factory.js");
/* harmony import */ var _native_media_stream_audio_destination_node__WEBPACK_IMPORTED_MODULE_282__ = __webpack_require__(/*! ./native-media-stream-audio-destination-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node.js");
/* harmony import */ var _native_media_stream_audio_destination_node_factory__WEBPACK_IMPORTED_MODULE_283__ = __webpack_require__(/*! ./native-media-stream-audio-destination-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node-factory.js");
/* harmony import */ var _native_media_stream_audio_source_node__WEBPACK_IMPORTED_MODULE_284__ = __webpack_require__(/*! ./native-media-stream-audio-source-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node.js");
/* harmony import */ var _native_media_stream_audio_source_node_factory__WEBPACK_IMPORTED_MODULE_285__ = __webpack_require__(/*! ./native-media-stream-audio-source-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node-factory.js");
/* harmony import */ var _native_media_stream_track_audio_source_node__WEBPACK_IMPORTED_MODULE_286__ = __webpack_require__(/*! ./native-media-stream-track-audio-source-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node.js");
/* harmony import */ var _native_media_stream_track_audio_source_node_factory__WEBPACK_IMPORTED_MODULE_287__ = __webpack_require__(/*! ./native-media-stream-track-audio-source-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory.js");
/* harmony import */ var _native_media_stream_track_audio_source_node_factory_factory__WEBPACK_IMPORTED_MODULE_288__ = __webpack_require__(/*! ./native-media-stream-track-audio-source-node-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory-factory.js");
/* harmony import */ var _native_offline_audio_context__WEBPACK_IMPORTED_MODULE_289__ = __webpack_require__(/*! ./native-offline-audio-context */ "./node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context.js");
/* harmony import */ var _native_offline_audio_context_constructor__WEBPACK_IMPORTED_MODULE_290__ = __webpack_require__(/*! ./native-offline-audio-context-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor.js");
/* harmony import */ var _native_offline_audio_context_constructor_factory__WEBPACK_IMPORTED_MODULE_291__ = __webpack_require__(/*! ./native-offline-audio-context-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor-factory.js");
/* harmony import */ var _native_oscillator_node__WEBPACK_IMPORTED_MODULE_292__ = __webpack_require__(/*! ./native-oscillator-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node.js");
/* harmony import */ var _native_oscillator_node_factory__WEBPACK_IMPORTED_MODULE_293__ = __webpack_require__(/*! ./native-oscillator-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory.js");
/* harmony import */ var _native_oscillator_node_factory_factory__WEBPACK_IMPORTED_MODULE_294__ = __webpack_require__(/*! ./native-oscillator-node-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory-factory.js");
/* harmony import */ var _native_panner_node__WEBPACK_IMPORTED_MODULE_295__ = __webpack_require__(/*! ./native-panner-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-panner-node.js");
/* harmony import */ var _native_panner_node_factory__WEBPACK_IMPORTED_MODULE_296__ = __webpack_require__(/*! ./native-panner-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory.js");
/* harmony import */ var _native_panner_node_factory_factory__WEBPACK_IMPORTED_MODULE_297__ = __webpack_require__(/*! ./native-panner-node-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory-factory.js");
/* harmony import */ var _native_panner_node_faker_factory__WEBPACK_IMPORTED_MODULE_298__ = __webpack_require__(/*! ./native-panner-node-faker-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory.js");
/* harmony import */ var _native_panner_node_faker_factory_factory__WEBPACK_IMPORTED_MODULE_299__ = __webpack_require__(/*! ./native-panner-node-faker-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory-factory.js");
/* harmony import */ var _native_periodic_wave__WEBPACK_IMPORTED_MODULE_300__ = __webpack_require__(/*! ./native-periodic-wave */ "./node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave.js");
/* harmony import */ var _native_periodic_wave_factory__WEBPACK_IMPORTED_MODULE_301__ = __webpack_require__(/*! ./native-periodic-wave-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory.js");
/* harmony import */ var _native_periodic_wave_factory_factory__WEBPACK_IMPORTED_MODULE_302__ = __webpack_require__(/*! ./native-periodic-wave-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory-factory.js");
/* harmony import */ var _native_script_processor_node__WEBPACK_IMPORTED_MODULE_303__ = __webpack_require__(/*! ./native-script-processor-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node.js");
/* harmony import */ var _native_script_processor_node_factory__WEBPACK_IMPORTED_MODULE_304__ = __webpack_require__(/*! ./native-script-processor-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node-factory.js");
/* harmony import */ var _native_stereo_panner_node__WEBPACK_IMPORTED_MODULE_305__ = __webpack_require__(/*! ./native-stereo-panner-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node.js");
/* harmony import */ var _native_stereo_panner_node_factory__WEBPACK_IMPORTED_MODULE_306__ = __webpack_require__(/*! ./native-stereo-panner-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory.js");
/* harmony import */ var _native_stereo_panner_node_factory_factory__WEBPACK_IMPORTED_MODULE_307__ = __webpack_require__(/*! ./native-stereo-panner-node-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory-factory.js");
/* harmony import */ var _native_stereo_panner_node_faker_factory__WEBPACK_IMPORTED_MODULE_308__ = __webpack_require__(/*! ./native-stereo-panner-node-faker-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory.js");
/* harmony import */ var _native_stereo_panner_node_faker_factory_factory__WEBPACK_IMPORTED_MODULE_309__ = __webpack_require__(/*! ./native-stereo-panner-node-faker-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory-factory.js");
/* harmony import */ var _native_wave_shaper_node__WEBPACK_IMPORTED_MODULE_310__ = __webpack_require__(/*! ./native-wave-shaper-node */ "./node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node.js");
/* harmony import */ var _native_wave_shaper_node_factory__WEBPACK_IMPORTED_MODULE_311__ = __webpack_require__(/*! ./native-wave-shaper-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory.js");
/* harmony import */ var _native_wave_shaper_node_factory_factory__WEBPACK_IMPORTED_MODULE_312__ = __webpack_require__(/*! ./native-wave-shaper-node-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory-factory.js");
/* harmony import */ var _native_wave_shaper_node_faker_factory__WEBPACK_IMPORTED_MODULE_313__ = __webpack_require__(/*! ./native-wave-shaper-node-faker-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory.js");
/* harmony import */ var _native_wave_shaper_node_faker_factory_factory__WEBPACK_IMPORTED_MODULE_314__ = __webpack_require__(/*! ./native-wave-shaper-node-faker-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory-factory.js");
/* harmony import */ var _not_supported_error_factory__WEBPACK_IMPORTED_MODULE_315__ = __webpack_require__(/*! ./not-supported-error-factory */ "./node_modules/standardized-audio-context/build/es2019/types/not-supported-error-factory.js");
/* harmony import */ var _offline_audio_context_constructor_factory__WEBPACK_IMPORTED_MODULE_316__ = __webpack_require__(/*! ./offline-audio-context-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/offline-audio-context-constructor-factory.js");
/* harmony import */ var _oscillator_node_constructor__WEBPACK_IMPORTED_MODULE_317__ = __webpack_require__(/*! ./oscillator-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor.js");
/* harmony import */ var _oscillator_node_constructor_factory__WEBPACK_IMPORTED_MODULE_318__ = __webpack_require__(/*! ./oscillator-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor-factory.js");
/* harmony import */ var _oscillator_node_renderer__WEBPACK_IMPORTED_MODULE_319__ = __webpack_require__(/*! ./oscillator-node-renderer */ "./node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer.js");
/* harmony import */ var _oscillator_node_renderer_factory__WEBPACK_IMPORTED_MODULE_320__ = __webpack_require__(/*! ./oscillator-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory.js");
/* harmony import */ var _oscillator_node_renderer_factory_factory__WEBPACK_IMPORTED_MODULE_321__ = __webpack_require__(/*! ./oscillator-node-renderer-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory-factory.js");
/* harmony import */ var _oscillator_type__WEBPACK_IMPORTED_MODULE_322__ = __webpack_require__(/*! ./oscillator-type */ "./node_modules/standardized-audio-context/build/es2019/types/oscillator-type.js");
/* harmony import */ var _output_connection__WEBPACK_IMPORTED_MODULE_323__ = __webpack_require__(/*! ./output-connection */ "./node_modules/standardized-audio-context/build/es2019/types/output-connection.js");
/* harmony import */ var _over_sample_type__WEBPACK_IMPORTED_MODULE_324__ = __webpack_require__(/*! ./over-sample-type */ "./node_modules/standardized-audio-context/build/es2019/types/over-sample-type.js");
/* harmony import */ var _overwrite_accessors_function__WEBPACK_IMPORTED_MODULE_325__ = __webpack_require__(/*! ./overwrite-accessors-function */ "./node_modules/standardized-audio-context/build/es2019/types/overwrite-accessors-function.js");
/* harmony import */ var _panner_node_constructor__WEBPACK_IMPORTED_MODULE_326__ = __webpack_require__(/*! ./panner-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor.js");
/* harmony import */ var _panner_node_constructor_factory__WEBPACK_IMPORTED_MODULE_327__ = __webpack_require__(/*! ./panner-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor-factory.js");
/* harmony import */ var _panner_node_renderer_factory__WEBPACK_IMPORTED_MODULE_328__ = __webpack_require__(/*! ./panner-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory.js");
/* harmony import */ var _panner_node_renderer_factory_factory__WEBPACK_IMPORTED_MODULE_329__ = __webpack_require__(/*! ./panner-node-renderer-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory-factory.js");
/* harmony import */ var _panning_model_type__WEBPACK_IMPORTED_MODULE_330__ = __webpack_require__(/*! ./panning-model-type */ "./node_modules/standardized-audio-context/build/es2019/types/panning-model-type.js");
/* harmony import */ var _passive_audio_node_input_connection__WEBPACK_IMPORTED_MODULE_331__ = __webpack_require__(/*! ./passive-audio-node-input-connection */ "./node_modules/standardized-audio-context/build/es2019/types/passive-audio-node-input-connection.js");
/* harmony import */ var _passive_audio_param_input_connection__WEBPACK_IMPORTED_MODULE_332__ = __webpack_require__(/*! ./passive-audio-param-input-connection */ "./node_modules/standardized-audio-context/build/es2019/types/passive-audio-param-input-connection.js");
/* harmony import */ var _periodic_wave_constructor__WEBPACK_IMPORTED_MODULE_333__ = __webpack_require__(/*! ./periodic-wave-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor.js");
/* harmony import */ var _periodic_wave_constructor_factory__WEBPACK_IMPORTED_MODULE_334__ = __webpack_require__(/*! ./periodic-wave-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor-factory.js");
/* harmony import */ var _pick_element_from_set_function__WEBPACK_IMPORTED_MODULE_335__ = __webpack_require__(/*! ./pick-element-from-set-function */ "./node_modules/standardized-audio-context/build/es2019/types/pick-element-from-set-function.js");
/* harmony import */ var _render_automation_factory__WEBPACK_IMPORTED_MODULE_336__ = __webpack_require__(/*! ./render-automation-factory */ "./node_modules/standardized-audio-context/build/es2019/types/render-automation-factory.js");
/* harmony import */ var _render_automation_function__WEBPACK_IMPORTED_MODULE_337__ = __webpack_require__(/*! ./render-automation-function */ "./node_modules/standardized-audio-context/build/es2019/types/render-automation-function.js");
/* harmony import */ var _render_inputs_of_audio_node_factory__WEBPACK_IMPORTED_MODULE_338__ = __webpack_require__(/*! ./render-inputs-of-audio-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-factory.js");
/* harmony import */ var _render_inputs_of_audio_node_function__WEBPACK_IMPORTED_MODULE_339__ = __webpack_require__(/*! ./render-inputs-of-audio-node-function */ "./node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-function.js");
/* harmony import */ var _render_inputs_of_audio_param_factory__WEBPACK_IMPORTED_MODULE_340__ = __webpack_require__(/*! ./render-inputs-of-audio-param-factory */ "./node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-factory.js");
/* harmony import */ var _render_inputs_of_audio_param_function__WEBPACK_IMPORTED_MODULE_341__ = __webpack_require__(/*! ./render-inputs-of-audio-param-function */ "./node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-function.js");
/* harmony import */ var _render_native_offline_audio_context_factory__WEBPACK_IMPORTED_MODULE_342__ = __webpack_require__(/*! ./render-native-offline-audio-context-factory */ "./node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-factory.js");
/* harmony import */ var _render_native_offline_audio_context_function__WEBPACK_IMPORTED_MODULE_343__ = __webpack_require__(/*! ./render-native-offline-audio-context-function */ "./node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-function.js");
/* harmony import */ var _sanitize_audio_worklet_node_options_function__WEBPACK_IMPORTED_MODULE_344__ = __webpack_require__(/*! ./sanitize-audio-worklet-node-options-function */ "./node_modules/standardized-audio-context/build/es2019/types/sanitize-audio-worklet-node-options-function.js");
/* harmony import */ var _sanitize_channel_splitter_options_function__WEBPACK_IMPORTED_MODULE_345__ = __webpack_require__(/*! ./sanitize-channel-splitter-options-function */ "./node_modules/standardized-audio-context/build/es2019/types/sanitize-channel-splitter-options-function.js");
/* harmony import */ var _sanitize_periodic_wave_options_function__WEBPACK_IMPORTED_MODULE_346__ = __webpack_require__(/*! ./sanitize-periodic-wave-options-function */ "./node_modules/standardized-audio-context/build/es2019/types/sanitize-periodic-wave-options-function.js");
/* harmony import */ var _set_active_audio_worklet_node_inputs_factory__WEBPACK_IMPORTED_MODULE_347__ = __webpack_require__(/*! ./set-active-audio-worklet-node-inputs-factory */ "./node_modules/standardized-audio-context/build/es2019/types/set-active-audio-worklet-node-inputs-factory.js");
/* harmony import */ var _set_active_audio_worklet_node_inputs_function__WEBPACK_IMPORTED_MODULE_348__ = __webpack_require__(/*! ./set-active-audio-worklet-node-inputs-function */ "./node_modules/standardized-audio-context/build/es2019/types/set-active-audio-worklet-node-inputs-function.js");
/* harmony import */ var _set_audio_node_tail_time_factory__WEBPACK_IMPORTED_MODULE_349__ = __webpack_require__(/*! ./set-audio-node-tail-time-factory */ "./node_modules/standardized-audio-context/build/es2019/types/set-audio-node-tail-time-factory.js");
/* harmony import */ var _set_audio_node_tail_time_function__WEBPACK_IMPORTED_MODULE_350__ = __webpack_require__(/*! ./set-audio-node-tail-time-function */ "./node_modules/standardized-audio-context/build/es2019/types/set-audio-node-tail-time-function.js");
/* harmony import */ var _set_value_at_time_until_possible_function__WEBPACK_IMPORTED_MODULE_351__ = __webpack_require__(/*! ./set-value-at-time-until-possible-function */ "./node_modules/standardized-audio-context/build/es2019/types/set-value-at-time-until-possible-function.js");
/* harmony import */ var _start_rendering_factory__WEBPACK_IMPORTED_MODULE_352__ = __webpack_require__(/*! ./start-rendering-factory */ "./node_modules/standardized-audio-context/build/es2019/types/start-rendering-factory.js");
/* harmony import */ var _start_rendering_function__WEBPACK_IMPORTED_MODULE_353__ = __webpack_require__(/*! ./start-rendering-function */ "./node_modules/standardized-audio-context/build/es2019/types/start-rendering-function.js");
/* harmony import */ var _stereo_panner_node_constructor__WEBPACK_IMPORTED_MODULE_354__ = __webpack_require__(/*! ./stereo-panner-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor.js");
/* harmony import */ var _stereo_panner_node_constructor_factory__WEBPACK_IMPORTED_MODULE_355__ = __webpack_require__(/*! ./stereo-panner-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor-factory.js");
/* harmony import */ var _stereo_panner_node_renderer_factory_factory__WEBPACK_IMPORTED_MODULE_356__ = __webpack_require__(/*! ./stereo-panner-node-renderer-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory-factory.js");
/* harmony import */ var _stereo_panner_node_renderer_factory__WEBPACK_IMPORTED_MODULE_357__ = __webpack_require__(/*! ./stereo-panner-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory.js");
/* harmony import */ var _test_audio_buffer_copy_channel_methods_subarray_support_factory__WEBPACK_IMPORTED_MODULE_358__ = __webpack_require__(/*! ./test-audio-buffer-copy-channel-methods-subarray-support-factory */ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-copy-channel-methods-subarray-support-factory.js");
/* harmony import */ var _test_audio_buffer_constructor_support_factory__WEBPACK_IMPORTED_MODULE_359__ = __webpack_require__(/*! ./test-audio-buffer-constructor-support-factory */ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-constructor-support-factory.js");
/* harmony import */ var _test_audio_context_close_method_support_factory__WEBPACK_IMPORTED_MODULE_360__ = __webpack_require__(/*! ./test-audio-context-close-method-support-factory */ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-context-close-method-support-factory.js");
/* harmony import */ var _test_audio_context_decode_audio_data_method_type_error_support_factory__WEBPACK_IMPORTED_MODULE_361__ = __webpack_require__(/*! ./test-audio-context-decode-audio-data-method-type-error-support-factory */ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-context-decode-audio-data-method-type-error-support-factory.js");
/* harmony import */ var _test_audio_context_options_support_factory__WEBPACK_IMPORTED_MODULE_362__ = __webpack_require__(/*! ./test-audio-context-options-support-factory */ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-context-options-support-factory.js");
/* harmony import */ var _test_audio_node_connect_method_support_factory__WEBPACK_IMPORTED_MODULE_363__ = __webpack_require__(/*! ./test-audio-node-connect-method-support-factory */ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-node-connect-method-support-factory.js");
/* harmony import */ var _test_audio_worklet_node_options_clonability_function__WEBPACK_IMPORTED_MODULE_364__ = __webpack_require__(/*! ./test-audio-worklet-node-options-clonability-function */ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-node-options-clonability-function.js");
/* harmony import */ var _test_audio_worklet_processor_no_outputs_support_factory__WEBPACK_IMPORTED_MODULE_365__ = __webpack_require__(/*! ./test-audio-worklet-processor-no-outputs-support-factory */ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-processor-no-outputs-support-factory.js");
/* harmony import */ var _test_audio_worklet_processor_post_message_support_factory__WEBPACK_IMPORTED_MODULE_366__ = __webpack_require__(/*! ./test-audio-worklet-processor-post-message-support-factory */ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-processor-post-message-support-factory.js");
/* harmony import */ var _test_channel_merger_node_channel_count_support_factory__WEBPACK_IMPORTED_MODULE_367__ = __webpack_require__(/*! ./test-channel-merger-node-channel-count-support-factory */ "./node_modules/standardized-audio-context/build/es2019/types/test-channel-merger-node-channel-count-support-factory.js");
/* harmony import */ var _test_constant_source_node_accurate_scheduling_support_factory__WEBPACK_IMPORTED_MODULE_368__ = __webpack_require__(/*! ./test-constant-source-node-accurate-scheduling-support-factory */ "./node_modules/standardized-audio-context/build/es2019/types/test-constant-source-node-accurate-scheduling-support-factory.js");
/* harmony import */ var _test_convolver_node_buffer_reassignability_support_factory__WEBPACK_IMPORTED_MODULE_369__ = __webpack_require__(/*! ./test-convolver-node-buffer-reassignability-support-factory */ "./node_modules/standardized-audio-context/build/es2019/types/test-convolver-node-buffer-reassignability-support-factory.js");
/* harmony import */ var _test_convolver_node_channel_count_support_factory__WEBPACK_IMPORTED_MODULE_370__ = __webpack_require__(/*! ./test-convolver-node-channel-count-support-factory */ "./node_modules/standardized-audio-context/build/es2019/types/test-convolver-node-channel-count-support-factory.js");
/* harmony import */ var _test_is_secure_context_support_factory__WEBPACK_IMPORTED_MODULE_371__ = __webpack_require__(/*! ./test-is-secure-context-support-factory */ "./node_modules/standardized-audio-context/build/es2019/types/test-is-secure-context-support-factory.js");
/* harmony import */ var _test_media_stream_audio_source_node_media_stream_without_audio_track_support__WEBPACK_IMPORTED_MODULE_372__ = __webpack_require__(/*! ./test-media-stream-audio-source-node-media-stream-without-audio-track-support */ "./node_modules/standardized-audio-context/build/es2019/types/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js");
/* harmony import */ var _test_offline_audio_context_current_time_support_factory__WEBPACK_IMPORTED_MODULE_373__ = __webpack_require__(/*! ./test-offline-audio-context-current-time-support-factory */ "./node_modules/standardized-audio-context/build/es2019/types/test-offline-audio-context-current-time-support-factory.js");
/* harmony import */ var _test_stereo_panner_node_default_value_support_factory__WEBPACK_IMPORTED_MODULE_374__ = __webpack_require__(/*! ./test-stereo-panner-node-default-value-support-factory */ "./node_modules/standardized-audio-context/build/es2019/types/test-stereo-panner-node-default-value-support-factory.js");
/* harmony import */ var _unknown_error_factory__WEBPACK_IMPORTED_MODULE_375__ = __webpack_require__(/*! ./unknown-error-factory */ "./node_modules/standardized-audio-context/build/es2019/types/unknown-error-factory.js");
/* harmony import */ var _unrendered_audio_worklet_node_store__WEBPACK_IMPORTED_MODULE_376__ = __webpack_require__(/*! ./unrendered-audio-worklet-node-store */ "./node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-node-store.js");
/* harmony import */ var _unrendered_audio_worklet_nodes__WEBPACK_IMPORTED_MODULE_377__ = __webpack_require__(/*! ./unrendered-audio-worklet-nodes */ "./node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-nodes.js");
/* harmony import */ var _wave_shaper_node_constructor__WEBPACK_IMPORTED_MODULE_378__ = __webpack_require__(/*! ./wave-shaper-node-constructor */ "./node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor.js");
/* harmony import */ var _wave_shaper_node_constructor_factory__WEBPACK_IMPORTED_MODULE_379__ = __webpack_require__(/*! ./wave-shaper-node-constructor-factory */ "./node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor-factory.js");
/* harmony import */ var _wave_shaper_node_renderer_factory_factory__WEBPACK_IMPORTED_MODULE_380__ = __webpack_require__(/*! ./wave-shaper-node-renderer-factory-factory */ "./node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory-factory.js");
/* harmony import */ var _wave_shaper_node_renderer_factory__WEBPACK_IMPORTED_MODULE_381__ = __webpack_require__(/*! ./wave-shaper-node-renderer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory.js");
/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_382__ = __webpack_require__(/*! ./window */ "./node_modules/standardized-audio-context/build/es2019/types/window.js");
/* harmony import */ var _window_factory__WEBPACK_IMPORTED_MODULE_383__ = __webpack_require__(/*! ./window-factory */ "./node_modules/standardized-audio-context/build/es2019/types/window-factory.js");
/* harmony import */ var _wrap_audio_buffer_copy_channel_methods_factory__WEBPACK_IMPORTED_MODULE_384__ = __webpack_require__(/*! ./wrap-audio-buffer-copy-channel-methods-factory */ "./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-factory.js");
/* harmony import */ var _wrap_audio_buffer_copy_channel_methods_function__WEBPACK_IMPORTED_MODULE_385__ = __webpack_require__(/*! ./wrap-audio-buffer-copy-channel-methods-function */ "./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-function.js");
/* harmony import */ var _wrap_audio_buffer_copy_channel_methods_out_of_bounds_factory__WEBPACK_IMPORTED_MODULE_386__ = __webpack_require__(/*! ./wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory */ "./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory.js");
/* harmony import */ var _wrap_audio_buffer_copy_channel_methods_out_of_bounds_function__WEBPACK_IMPORTED_MODULE_387__ = __webpack_require__(/*! ./wrap-audio-buffer-copy-channel-methods-out-of-bounds-function */ "./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-function.js");
/* harmony import */ var _wrap_audio_buffer_source_node_start_method_offset_clamping_function__WEBPACK_IMPORTED_MODULE_388__ = __webpack_require__(/*! ./wrap-audio-buffer-source-node-start-method-offset-clamping-function */ "./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-start-method-offset-clamping-function.js");
/* harmony import */ var _wrap_audio_buffer_source_node_stop_method_nullified_buffer_factory__WEBPACK_IMPORTED_MODULE_389__ = __webpack_require__(/*! ./wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory */ "./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory.js");
/* harmony import */ var _wrap_audio_buffer_source_node_stop_method_nullified_buffer_function__WEBPACK_IMPORTED_MODULE_390__ = __webpack_require__(/*! ./wrap-audio-buffer-source-node-stop-method-nullified-buffer-function */ "./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-function.js");
/* harmony import */ var _wrap_audio_scheduled_source_node_stop_method_consecutive_calls_function__WEBPACK_IMPORTED_MODULE_391__ = __webpack_require__(/*! ./wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function */ "./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function.js");
/* harmony import */ var _wrap_channel_merger_node_factory__WEBPACK_IMPORTED_MODULE_392__ = __webpack_require__(/*! ./wrap-channel-merger-node-factory */ "./node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-factory.js");
/* harmony import */ var _wrap_channel_merger_node_function__WEBPACK_IMPORTED_MODULE_393__ = __webpack_require__(/*! ./wrap-channel-merger-node-function */ "./node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-function.js");
/* harmony import */ var _wrap_event_listener_function__WEBPACK_IMPORTED_MODULE_394__ = __webpack_require__(/*! ./wrap-event-listener-function */ "./node_modules/standardized-audio-context/build/es2019/types/wrap-event-listener-function.js");











































































































































































































































































































































































































//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/insert-element-in-set-function.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/insert-element-in-set-function.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=insert-element-in-set-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/internal-state-event-listener.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/internal-state-event-listener.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=internal-state-event-listener.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/invalid-access-error-factory.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/invalid-access-error-factory.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=invalid-access-error-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/invalid-state-error-factory.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/invalid-state-error-factory.js ***!
  \***************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=invalid-state-error-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-active-audio-node-function.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-active-audio-node-function.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-active-audio-node-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-factory.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-factory.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-any-audio-context-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-function.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-function.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-any-audio-context-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-factory.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-factory.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-any-audio-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-function.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-function.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-any-audio-node-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-factory.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-factory.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-any-audio-param-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-function.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-function.js ***!
  \***************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-any-audio-param-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-factory.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-factory.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-any-offline-audio-context-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-function.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-function.js ***!
  \*************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-any-offline-audio-context-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-dc-curve-function.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-dc-curve-function.js ***!
  \********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-dc-curve-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-factory.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-factory.js ***!
  \*******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-native-audio-context-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-function.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-function.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-native-audio-context-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-factory.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-factory.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-native-audio-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-function.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-function.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-native-audio-node-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-factory.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-factory.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-native-audio-param-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-function.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-function.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-native-audio-param-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-native-context-factory.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-native-context-factory.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-native-context-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-native-context-function.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-native-context-function.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-native-context-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-factory.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-factory.js ***!
  \***************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-native-offline-audio-context-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-function.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-function.js ***!
  \****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-native-offline-audio-context-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-part-of-a-cycle-function.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-part-of-a-cycle-function.js ***!
  \***************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-part-of-a-cycle-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-passive-audio-node-function.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-passive-audio-node-function.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-passive-audio-node-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-secure-context-factory.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-secure-context-factory.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-secure-context-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/is-supported-promise-factory.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/is-supported-promise-factory.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=is-supported-promise-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor-factory.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor-factory.js ***!
  \***************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=media-element-audio-source-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor.js ***!
  \*******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=media-element-audio-source-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor-factory.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor-factory.js ***!
  \*******************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=media-stream-audio-destination-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor.js ***!
  \***********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=media-stream-audio-destination-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor-factory.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor-factory.js ***!
  \**************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=media-stream-audio-source-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor.js ***!
  \******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=media-stream-audio-source-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor-factory.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor-factory.js ***!
  \********************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=media-stream-track-audio-source-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor.js ***!
  \************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=media-stream-track-audio-source-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor-factory.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor-factory.js ***!
  \*****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=minimal-audio-context-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=minimal-audio-context-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor-factory.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor-factory.js ***!
  \**********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=minimal-base-audio-context-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor.js ***!
  \**************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=minimal-base-audio-context-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor-factory.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor-factory.js ***!
  \*************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=minimal-offline-audio-context-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor.js ***!
  \*****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=minimal-offline-audio-context-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/monitor-connections-factory.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/monitor-connections-factory.js ***!
  \***************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=monitor-connections-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/monitor-connections-function.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/monitor-connections-function.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=monitor-connections-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory-factory.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory-factory.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-analyser-node-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-analyser-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-analyser-node.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-analyser-node.js ***!
  \********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-analyser-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor-factory.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor-factory.js ***!
  \***************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-buffer-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor.js ***!
  \*******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-buffer-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory-factory.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory-factory.js ***!
  \***********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-buffer-source-node-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory.js ***!
  \***************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-buffer-source-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node.js ***!
  \*******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-buffer-source-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer.js ***!
  \*******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-buffer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor-factory.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor-factory.js ***!
  \****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-context-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-context-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-context.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-context.js ***!
  \********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory-factory.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory-factory.js ***!
  \*********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-destination-node-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory.js ***!
  \*************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-destination-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-destination-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-listener.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-listener.js ***!
  \*********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-listener.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-node.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-node.js ***!
  \*****************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-param-map.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-param-map.js ***!
  \**********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-param-map.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-param.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-param.js ***!
  \******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-param.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor-factory.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor-factory.js ***!
  \*********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-worklet-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor.js ***!
  \*************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-worklet-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory-factory.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory-factory.js ***!
  \*****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-worklet-node-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-worklet-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory-factory.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory-factory.js ***!
  \***********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-worklet-node-faker-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory.js ***!
  \***************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-worklet-node-faker-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-options.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-options.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-worklet-node-options.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-worklet-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet.js ***!
  \********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-audio-worklet.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node-factory.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node-factory.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-biquad-filter-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-biquad-filter-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory-factory.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory-factory.js ***!
  \******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-channel-merger-node-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory.js ***!
  \**********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-channel-merger-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-channel-merger-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node-factory.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node-factory.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-channel-splitter-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-channel-splitter-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory-factory.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory-factory.js ***!
  \*******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-constant-source-node-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory.js ***!
  \***********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-constant-source-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory-factory.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory-factory.js ***!
  \*************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-constant-source-node-faker-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory.js ***!
  \*****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-constant-source-node-faker-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node.js ***!
  \***************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-constant-source-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-context.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-context.js ***!
  \**************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory-factory.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory-factory.js ***!
  \*************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-convolver-node-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory.js ***!
  \*****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-convolver-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-convolver-node.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-convolver-node.js ***!
  \*********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-convolver-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-delay-node-factory.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-delay-node-factory.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-delay-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-delay-node.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-delay-node.js ***!
  \*****************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-delay-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory-factory.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory-factory.js ***!
  \***********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-dynamics-compressor-node-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory.js ***!
  \***************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-dynamics-compressor-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node.js ***!
  \*******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-dynamics-compressor-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-event-target.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-event-target.js ***!
  \*******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-event-target.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-gain-node-factory.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-gain-node-factory.js ***!
  \************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-gain-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-gain-node.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-gain-node.js ***!
  \****************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-gain-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory-factory.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory-factory.js ***!
  \**************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-iir-filter-node-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-iir-filter-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory-factory.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory-factory.js ***!
  \********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-iir-filter-node-faker-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-iir-filter-node-faker-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node.js ***!
  \**********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-iir-filter-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node-factory.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node-factory.js ***!
  \**********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-media-element-audio-source-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node.js ***!
  \**************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-media-element-audio-source-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node-factory.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node-factory.js ***!
  \**************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-media-stream-audio-destination-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node.js ***!
  \******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-media-stream-audio-destination-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node-factory.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node-factory.js ***!
  \*********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-media-stream-audio-source-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node.js ***!
  \*************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-media-stream-audio-source-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory-factory.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory-factory.js ***!
  \***********************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-media-stream-track-audio-source-node-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory.js ***!
  \***************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-media-stream-track-audio-source-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node.js ***!
  \*******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-media-stream-track-audio-source-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor-factory.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor-factory.js ***!
  \************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-offline-audio-context-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor.js ***!
  \****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-offline-audio-context-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-offline-audio-context.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory-factory.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory-factory.js ***!
  \**************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-oscillator-node-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-oscillator-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node.js ***!
  \**********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-oscillator-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory-factory.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory-factory.js ***!
  \**********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-panner-node-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-panner-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory-factory.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory-factory.js ***!
  \****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-panner-node-faker-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-panner-node-faker-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-panner-node.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-panner-node.js ***!
  \******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-panner-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory-factory.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory-factory.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-periodic-wave-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-periodic-wave-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave.js ***!
  \********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-periodic-wave.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node-factory.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node-factory.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-script-processor-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-script-processor-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory-factory.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory-factory.js ***!
  \*****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-stereo-panner-node-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-stereo-panner-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory-factory.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory-factory.js ***!
  \***********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-stereo-panner-node-faker-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory.js ***!
  \***************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-stereo-panner-node-faker-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-stereo-panner-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory-factory.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory-factory.js ***!
  \***************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-wave-shaper-node-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory.js ***!
  \*******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-wave-shaper-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory-factory.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory-factory.js ***!
  \*********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-wave-shaper-node-faker-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory.js ***!
  \*************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-wave-shaper-node-faker-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node.js ***!
  \***********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=native-wave-shaper-node.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/not-supported-error-factory.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/not-supported-error-factory.js ***!
  \***************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=not-supported-error-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/offline-audio-context-constructor-factory.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/offline-audio-context-constructor-factory.js ***!
  \*****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=offline-audio-context-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor-factory.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor-factory.js ***!
  \***********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=oscillator-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor.js ***!
  \***************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=oscillator-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory-factory.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory-factory.js ***!
  \****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=oscillator-node-renderer-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=oscillator-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer.js ***!
  \************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=oscillator-node-renderer.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/oscillator-type.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/oscillator-type.js ***!
  \***************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=oscillator-type.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/output-connection.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/output-connection.js ***!
  \*****************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=output-connection.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/over-sample-type.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/over-sample-type.js ***!
  \****************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=over-sample-type.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/overwrite-accessors-function.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/overwrite-accessors-function.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=overwrite-accessors-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor-factory.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor-factory.js ***!
  \*******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=panner-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor.js ***!
  \***********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=panner-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory-factory.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory-factory.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=panner-node-renderer-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=panner-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/panning-model-type.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/panning-model-type.js ***!
  \******************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=panning-model-type.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/passive-audio-node-input-connection.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/passive-audio-node-input-connection.js ***!
  \***********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=passive-audio-node-input-connection.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/passive-audio-param-input-connection.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/passive-audio-param-input-connection.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=passive-audio-param-input-connection.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor-factory.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor-factory.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=periodic-wave-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=periodic-wave-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/pick-element-from-set-function.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/pick-element-from-set-function.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=pick-element-from-set-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/render-automation-factory.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/render-automation-factory.js ***!
  \*************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=render-automation-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/render-automation-function.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/render-automation-function.js ***!
  \**************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=render-automation-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-factory.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-factory.js ***!
  \***********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=render-inputs-of-audio-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-function.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-function.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=render-inputs-of-audio-node-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-factory.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-factory.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=render-inputs-of-audio-param-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-function.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-function.js ***!
  \*************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=render-inputs-of-audio-param-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-factory.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-factory.js ***!
  \*******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=render-native-offline-audio-context-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-function.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-function.js ***!
  \********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=render-native-offline-audio-context-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/sanitize-audio-worklet-node-options-function.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/sanitize-audio-worklet-node-options-function.js ***!
  \********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=sanitize-audio-worklet-node-options-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/sanitize-channel-splitter-options-function.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/sanitize-channel-splitter-options-function.js ***!
  \******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=sanitize-channel-splitter-options-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/sanitize-periodic-wave-options-function.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/sanitize-periodic-wave-options-function.js ***!
  \***************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=sanitize-periodic-wave-options-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/set-active-audio-worklet-node-inputs-factory.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/set-active-audio-worklet-node-inputs-factory.js ***!
  \********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=set-active-audio-worklet-node-inputs-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/set-active-audio-worklet-node-inputs-function.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/set-active-audio-worklet-node-inputs-function.js ***!
  \*********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=set-active-audio-worklet-node-inputs-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/set-audio-node-tail-time-factory.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/set-audio-node-tail-time-factory.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=set-audio-node-tail-time-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/set-audio-node-tail-time-function.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/set-audio-node-tail-time-function.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=set-audio-node-tail-time-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/set-value-at-time-until-possible-function.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/set-value-at-time-until-possible-function.js ***!
  \*****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=set-value-at-time-until-possible-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/start-rendering-factory.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/start-rendering-factory.js ***!
  \***********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=start-rendering-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/start-rendering-function.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/start-rendering-function.js ***!
  \************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=start-rendering-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor-factory.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor-factory.js ***!
  \**************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=stereo-panner-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=stereo-panner-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory-factory.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory-factory.js ***!
  \*******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=stereo-panner-node-renderer-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory.js ***!
  \***********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=stereo-panner-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-constructor-support-factory.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-constructor-support-factory.js ***!
  \*********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-audio-buffer-constructor-support-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-copy-channel-methods-subarray-support-factory.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-copy-channel-methods-subarray-support-factory.js ***!
  \***************************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-audio-buffer-copy-channel-methods-subarray-support-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-context-close-method-support-factory.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-audio-context-close-method-support-factory.js ***!
  \***********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-audio-context-close-method-support-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-context-decode-audio-data-method-type-error-support-factory.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-audio-context-decode-audio-data-method-type-error-support-factory.js ***!
  \**********************************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-audio-context-decode-audio-data-method-type-error-support-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-context-options-support-factory.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-audio-context-options-support-factory.js ***!
  \******************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-audio-context-options-support-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-node-connect-method-support-factory.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-audio-node-connect-method-support-factory.js ***!
  \**********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-audio-node-connect-method-support-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-node-options-clonability-function.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-node-options-clonability-function.js ***!
  \****************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-audio-worklet-node-options-clonability-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-processor-no-outputs-support-factory.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-processor-no-outputs-support-factory.js ***!
  \*******************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-audio-worklet-processor-no-outputs-support-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-processor-post-message-support-factory.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-processor-post-message-support-factory.js ***!
  \*********************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-audio-worklet-processor-post-message-support-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-channel-merger-node-channel-count-support-factory.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-channel-merger-node-channel-count-support-factory.js ***!
  \******************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-channel-merger-node-channel-count-support-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-constant-source-node-accurate-scheduling-support-factory.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-constant-source-node-accurate-scheduling-support-factory.js ***!
  \*************************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-constant-source-node-accurate-scheduling-support-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-convolver-node-buffer-reassignability-support-factory.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-convolver-node-buffer-reassignability-support-factory.js ***!
  \**********************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-convolver-node-buffer-reassignability-support-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-convolver-node-channel-count-support-factory.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-convolver-node-channel-count-support-factory.js ***!
  \*************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-convolver-node-channel-count-support-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-is-secure-context-support-factory.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-is-secure-context-support-factory.js ***!
  \**************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-is-secure-context-support-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js ***!
  \****************************************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-media-stream-audio-source-node-media-stream-without-audio-track-support.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-offline-audio-context-current-time-support-factory.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-offline-audio-context-current-time-support-factory.js ***!
  \*******************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-offline-audio-context-current-time-support-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/test-stereo-panner-node-default-value-support-factory.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/test-stereo-panner-node-default-value-support-factory.js ***!
  \*****************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=test-stereo-panner-node-default-value-support-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/unknown-error-factory.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/unknown-error-factory.js ***!
  \*********************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=unknown-error-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-node-store.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-node-store.js ***!
  \***********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=unrendered-audio-worklet-node-store.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-nodes.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-nodes.js ***!
  \******************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=unrendered-audio-worklet-nodes.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor-factory.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor-factory.js ***!
  \************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wave-shaper-node-constructor-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wave-shaper-node-constructor.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory-factory.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory-factory.js ***!
  \*****************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wave-shaper-node-renderer-factory-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wave-shaper-node-renderer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/window-factory.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/window-factory.js ***!
  \**************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=window-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/window.js":
/*!******************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/window.js ***!
  \******************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=window.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-factory.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-factory.js ***!
  \**********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wrap-audio-buffer-copy-channel-methods-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-function.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-function.js ***!
  \***********************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wrap-audio-buffer-copy-channel-methods-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory.js ***!
  \************************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-function.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-function.js ***!
  \*************************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wrap-audio-buffer-copy-channel-methods-out-of-bounds-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-start-method-offset-clamping-function.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-start-method-offset-clamping-function.js ***!
  \*******************************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wrap-audio-buffer-source-node-start-method-offset-clamping-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory.js ***!
  \******************************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-function.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-function.js ***!
  \*******************************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wrap-audio-buffer-source-node-stop-method-nullified-buffer-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function.js ***!
  \***********************************************************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-factory.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-factory.js ***!
  \********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wrap-channel-merger-node-factory.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-function.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-function.js ***!
  \*********************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wrap-channel-merger-node-function.js.map

/***/ }),

/***/ "./node_modules/standardized-audio-context/build/es2019/types/wrap-event-listener-function.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es2019/types/wrap-event-listener-function.js ***!
  \****************************************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=wrap-event-listener-function.js.map

/***/ }),

/***/ "./node_modules/web-audio-beat-detector-broker/build/es2019/helpers/render.js":
/*!************************************************************************************!*\
  !*** ./node_modules/web-audio-beat-detector-broker/build/es2019/helpers/render.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var standardized_audio_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! standardized-audio-context */ "./node_modules/standardized-audio-context/build/es2019/module.js");

const render = (audioBuffer, offset, duration) => {
    const offlineAudioContext = new standardized_audio_context__WEBPACK_IMPORTED_MODULE_0__.OfflineAudioContext(audioBuffer.numberOfChannels, Math.round(duration * audioBuffer.sampleRate), audioBuffer.sampleRate);
    const biquadFilter = offlineAudioContext.createBiquadFilter();
    const bufferSourceNode = offlineAudioContext.createBufferSource();
    biquadFilter.frequency.value = 240;
    biquadFilter.type = 'lowpass';
    bufferSourceNode.buffer = audioBuffer;
    bufferSourceNode.connect(biquadFilter).connect(offlineAudioContext.destination);
    bufferSourceNode.start(0, offset, duration);
    return offlineAudioContext.startRendering().then((renderedBuffer) => {
        const channelData = renderedBuffer.getChannelData(0);
        const sampleRate = renderedBuffer.sampleRate;
        return { channelData, sampleRate };
    });
};
//# sourceMappingURL=render.js.map

/***/ }),

/***/ "./node_modules/web-audio-beat-detector-broker/build/es2019/module.js":
/*!****************************************************************************!*\
  !*** ./node_modules/web-audio-beat-detector-broker/build/es2019/module.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   load: () => (/* binding */ load)
/* harmony export */ });
/* harmony import */ var fast_unique_numbers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-unique-numbers */ "./node_modules/fast-unique-numbers/build/es5/bundle.js");
/* harmony import */ var fast_unique_numbers__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fast_unique_numbers__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var standardized_audio_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standardized-audio-context */ "./node_modules/standardized-audio-context/build/es2019/module.js");
/* harmony import */ var _helpers_render__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/render */ "./node_modules/web-audio-beat-detector-broker/build/es2019/helpers/render.js");
/* harmony import */ var _types_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types/index */ "./node_modules/web-audio-beat-detector-broker/build/es2019/types/index.js");



/*
 * @todo Explicitly referencing the barrel file seems to be necessary when enabling the
 * isolatedModules compiler option.
 */


const load = (url) => {
    const worker = new Worker(url);
    const ongoingRecordingRequests = new Set();
    const analyze = (...args) => {
        var _a;
        const [audioBuffer, offsetOrTempoSettings, durationOrTempoSettings] = args;
        const offset = typeof offsetOrTempoSettings === 'number' ? offsetOrTempoSettings : 0;
        const duration = typeof durationOrTempoSettings === 'number' ? durationOrTempoSettings : audioBuffer.duration - offset;
        const tempoSettings = typeof offsetOrTempoSettings === 'object'
            ? offsetOrTempoSettings
            : typeof durationOrTempoSettings === 'object'
                ? durationOrTempoSettings
                : (_a = args[3]) !== null && _a !== void 0 ? _a : null;
        return new Promise(async (resolve, reject) => {
            const { channelData, sampleRate } = await (0,_helpers_render__WEBPACK_IMPORTED_MODULE_2__.render)(audioBuffer, offset, duration);
            const id = (0,fast_unique_numbers__WEBPACK_IMPORTED_MODULE_0__.addUniqueNumber)(ongoingRecordingRequests);
            const onMessage = ({ data }) => {
                if (data.id === id) {
                    ongoingRecordingRequests.delete(id);
                    worker.removeEventListener('message', onMessage);
                    if (data.error === null) {
                        resolve(data.result.tempo);
                    }
                    else {
                        reject(new Error(data.error.message));
                    }
                }
            };
            worker.addEventListener('message', onMessage);
            worker.postMessage({
                id,
                method: 'analyze',
                params: { channelData, sampleRate, ...(tempoSettings === null ? tempoSettings : { tempoSettings }) }
            }, [channelData.buffer]);
        });
    };
    const guess = (...args) => {
        var _a;
        const [audioBuffer, offsetOrTempoSettings, durationOrTempoSettings] = args;
        const offset = typeof offsetOrTempoSettings === 'number' ? offsetOrTempoSettings : 0;
        const duration = typeof durationOrTempoSettings === 'number' ? durationOrTempoSettings : audioBuffer.duration - offset;
        const tempoSettings = typeof offsetOrTempoSettings === 'object'
            ? offsetOrTempoSettings
            : typeof durationOrTempoSettings === 'object'
                ? durationOrTempoSettings
                : (_a = args[3]) !== null && _a !== void 0 ? _a : null;
        return new Promise(async (resolve, reject) => {
            const { channelData, sampleRate } = await (0,_helpers_render__WEBPACK_IMPORTED_MODULE_2__.render)(audioBuffer, offset, duration);
            const id = (0,fast_unique_numbers__WEBPACK_IMPORTED_MODULE_0__.addUniqueNumber)(ongoingRecordingRequests);
            const onMessage = ({ data }) => {
                if (data.id === id) {
                    ongoingRecordingRequests.delete(id);
                    worker.removeEventListener('message', onMessage);
                    if (data.error === null) {
                        resolve(data.result);
                    }
                    else {
                        reject(new Error(data.error.message));
                    }
                }
            };
            worker.addEventListener('message', onMessage);
            worker.postMessage({
                id,
                method: 'guess',
                params: { channelData, sampleRate, ...(tempoSettings === null ? tempoSettings : { tempoSettings }) }
            }, [channelData.buffer]);
        });
    };
    return {
        analyze,
        guess
    };
};
//# sourceMappingURL=module.js.map

/***/ }),

/***/ "./node_modules/web-audio-beat-detector-broker/build/es2019/types/args.js":
/*!********************************************************************************!*\
  !*** ./node_modules/web-audio-beat-detector-broker/build/es2019/types/args.js ***!
  \********************************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=args.js.map

/***/ }),

/***/ "./node_modules/web-audio-beat-detector-broker/build/es2019/types/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/web-audio-beat-detector-broker/build/es2019/types/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony import */ var _args__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./args */ "./node_modules/web-audio-beat-detector-broker/build/es2019/types/args.js");

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/web-audio-beat-detector/build/es2019/factories/load-or-return-broker.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/web-audio-beat-detector/build/es2019/factories/load-or-return-broker.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createLoadOrReturnBroker: () => (/* binding */ createLoadOrReturnBroker)
/* harmony export */ });
const createLoadOrReturnBroker = (loadBroker, worker) => {
    let broker = null;
    return () => {
        if (broker !== null) {
            return broker;
        }
        const blob = new Blob([worker], { type: 'application/javascript; charset=utf-8' });
        const url = URL.createObjectURL(blob);
        broker = loadBroker(url);
        // Bug #1: Edge up until v18 didn't like the URL to be revoked directly.
        setTimeout(() => URL.revokeObjectURL(url));
        return broker;
    };
};
//# sourceMappingURL=load-or-return-broker.js.map

/***/ }),

/***/ "./node_modules/web-audio-beat-detector/build/es2019/module.js":
/*!*********************************************************************!*\
  !*** ./node_modules/web-audio-beat-detector/build/es2019/module.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   guess: () => (/* binding */ guess)
/* harmony export */ });
/* unused harmony export analyze */
/* harmony import */ var web_audio_beat_detector_broker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web-audio-beat-detector-broker */ "./node_modules/web-audio-beat-detector-broker/build/es2019/module.js");
/* harmony import */ var _factories_load_or_return_broker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./factories/load-or-return-broker */ "./node_modules/web-audio-beat-detector/build/es2019/factories/load-or-return-broker.js");
/* harmony import */ var _worker_worker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./worker/worker */ "./node_modules/web-audio-beat-detector/build/es2019/worker/worker.js");



const loadOrReturnBroker = (0,_factories_load_or_return_broker__WEBPACK_IMPORTED_MODULE_1__.createLoadOrReturnBroker)(web_audio_beat_detector_broker__WEBPACK_IMPORTED_MODULE_0__.load, _worker_worker__WEBPACK_IMPORTED_MODULE_2__.worker);
const analyze = (...args) => loadOrReturnBroker().analyze(...args);
const guess = (...args) => loadOrReturnBroker().guess(...args);
//# sourceMappingURL=module.js.map

/***/ }),

/***/ "./node_modules/web-audio-beat-detector/build/es2019/worker/worker.js":
/*!****************************************************************************!*\
  !*** ./node_modules/web-audio-beat-detector/build/es2019/worker/worker.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   worker: () => (/* binding */ worker)
/* harmony export */ });
// This is the minified and stringified code of the web-audio-beat-detector-worker package.
const worker = `(()=>{"use strict";const e=(e,t,s)=>{const o=e.length,n=[];let a=!1;for(let r=0;r<o;r+=1)e[r]>t?a=!0:a&&(a=!1,n.push(r-1),r+=s/4-1);return a&&n.push(o-1),n},t=(t,s,o)=>{const n=(e=>{let t=0;const s=e.length;for(let o=0;o<s;o+=1)e[o]>t&&(t=e[o]);return t})(t),a=.3*n;let r=[],l=n-.05*n;if(n>.25)for(;r.length<30&&l>=a;)r=e(t,l,s),l-=.05*n;const p=(e=>{const t=[];return e.forEach(((s,o)=>{const n=Math.min(e.length-o,10);for(let a=1;a<n;a+=1){const n=e[o+a]-s;t.some((e=>e.interval===n&&(e.peaks.push(s),!0)))||t.push({interval:n,peaks:[s]})}})),t})(r),h=((e,t,s={})=>{var o,n;const a=Math.max(0,null!==(o=s.maxTempo)&&void 0!==o?o:180),r=Math.max(0,null!==(n=s.minTempo)&&void 0!==n?n:90),l=[];return e.forEach((e=>{let s=60/(e.interval/t);for(;s<r;)s*=2;for(;s>a;)s/=2;if(s<r)return;let o=!1,n=e.peaks.length;l.forEach((t=>{if(t.tempo===s&&(t.score+=e.peaks.length,t.peaks=[...t.peaks,...e.peaks],o=!0),t.tempo>s-.5&&t.tempo<s+.5){const o=2*Math.abs(t.tempo-s);n+=(1-o)*t.peaks.length,t.score+=(1-o)*e.peaks.length}})),o||l.push({peaks:e.peaks,score:n,tempo:s})})),l})(p,s,o);return h.sort(((e,t)=>t.score-e.score)),h};addEventListener("message",(({data:e})=>{try{if("analyze"===e.method){const{id:s,params:{channelData:o,sampleRate:n,tempoSettings:a}}=e,r=((e,s,o)=>{const n=t(e,s,o);if(0===n.length)throw new Error("The given channelData does not contain any detectable beats.");return n[0].tempo})(o,n,a);postMessage({error:null,id:s,result:{tempo:r}})}else{if("guess"!==e.method)throw new Error('The given method "'.concat(e.method,'" is not supported'));{const{id:s,params:{channelData:o,sampleRate:n,tempoSettings:a}}=e,{bpm:r,offset:l,tempo:p}=((e,s,o)=>{const n=t(e,s,o);if(0===n.length)throw new Error("The given channelData does not contain any detectable beats.");const{peaks:a,tempo:r}=n[0],l=Math.round(r),p=60/l;a.sort(((e,t)=>e-t));let h=a[0]/s;for(;h>p;)h-=p;return{bpm:l,offset:h,tempo:r}})(o,n,a);postMessage({error:null,id:s,result:{bpm:r,offset:l,tempo:p}})}}}catch(t){postMessage({error:{message:t.message},id:e.id,result:null})}}))})();`; // tslint:disable-line:max-line-length
//# sourceMappingURL=worker.js.map

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \*****************************************************************/
/***/ ((module) => {

function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \***************************************************************/
/***/ ((module) => {

function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}
module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/***/ ((module) => {

function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toPropertyKey = __webpack_require__(/*! ./toPropertyKey.js */ "./node_modules/@babel/runtime/helpers/toPropertyKey.js");
function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}
module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \*********************************************************************/
/***/ ((module) => {

function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableRest.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \****************************************************************/
/***/ ((module) => {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/slicedToArray.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles.js */ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js");
var iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit.js */ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js");
var unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray.js */ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");
var nonIterableRest = __webpack_require__(/*! ./nonIterableRest.js */ "./node_modules/@babel/runtime/helpers/nonIterableRest.js");
function _slicedToArray(r, e) {
  return arrayWithHoles(r) || iterableToArrayLimit(r, e) || unsupportedIterableToArray(r, e) || nonIterableRest();
}
module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toPrimitive.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toPrimitive.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(/*! ./typeof.js */ "./node_modules/@babel/runtime/helpers/typeof.js")["default"]);
function toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
module.exports = toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toPropertyKey.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toPropertyKey.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(/*! ./typeof.js */ "./node_modules/@babel/runtime/helpers/typeof.js")["default"]);
var toPrimitive = __webpack_require__(/*! ./toPrimitive.js */ "./node_modules/@babel/runtime/helpers/toPrimitive.js");
function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}
module.exports = toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/***/ ((module) => {

function _typeof(o) {
  "@babel/helpers - typeof";

  return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray.js */ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js");
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;
  }
}
module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/axios-retry/dist/esm/index.js":
/*!****************************************************!*\
  !*** ./node_modules/axios-retry/dist/esm/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* unused harmony exports namespace, isNetworkError, isRetryableError, isSafeRequestError, isIdempotentRequestError, isNetworkOrIdempotentRequestError, retryAfter, exponentialDelay, linearDelay, DEFAULT_OPTIONS */
/* harmony import */ var is_retry_allowed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! is-retry-allowed */ "./node_modules/is-retry-allowed/index.js");

const namespace = 'axios-retry';
function isNetworkError(error) {
    const CODE_EXCLUDE_LIST = ['ERR_CANCELED', 'ECONNABORTED'];
    if (error.response) {
        return false;
    }
    if (!error.code) {
        return false;
    }
    // Prevents retrying timed out & cancelled requests
    if (CODE_EXCLUDE_LIST.includes(error.code)) {
        return false;
    }
    // Prevents retrying unsafe errors
    return is_retry_allowed__WEBPACK_IMPORTED_MODULE_0__(error);
}
const SAFE_HTTP_METHODS = ['get', 'head', 'options'];
const IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);
function isRetryableError(error) {
    return (error.code !== 'ECONNABORTED' &&
        (!error.response ||
            error.response.status === 429 ||
            (error.response.status >= 500 && error.response.status <= 599)));
}
function isSafeRequestError(error) {
    if (!error.config?.method) {
        // Cannot determine if the request can be retried
        return false;
    }
    return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;
}
function isIdempotentRequestError(error) {
    if (!error.config?.method) {
        // Cannot determine if the request can be retried
        return false;
    }
    return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;
}
function isNetworkOrIdempotentRequestError(error) {
    return isNetworkError(error) || isIdempotentRequestError(error);
}
function retryAfter(error = undefined) {
    const retryAfterHeader = error?.response?.headers['retry-after'];
    if (!retryAfterHeader) {
        return 0;
    }
    // if the retry after header is a number, convert it to milliseconds
    let retryAfterMs = (Number(retryAfterHeader) || 0) * 1000;
    // If the retry after header is a date, get the number of milliseconds until that date
    if (retryAfterMs === 0) {
        retryAfterMs = (new Date(retryAfterHeader).valueOf() || 0) - Date.now();
    }
    return Math.max(0, retryAfterMs);
}
function noDelay(_retryNumber = 0, error = undefined) {
    return Math.max(0, retryAfter(error));
}
function exponentialDelay(retryNumber = 0, error = undefined, delayFactor = 100) {
    const calculatedDelay = 2 ** retryNumber * delayFactor;
    const delay = Math.max(calculatedDelay, retryAfter(error));
    const randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay
    return delay + randomSum;
}
/**
 * Linear delay
 * @param {number | undefined} delayFactor - delay factor in milliseconds (default: 100)
 * @returns {function} (retryNumber: number, error: AxiosError | undefined) => number
 */
function linearDelay(delayFactor = 100) {
    return (retryNumber = 0, error = undefined) => {
        const delay = retryNumber * delayFactor;
        return Math.max(delay, retryAfter(error));
    };
}
const DEFAULT_OPTIONS = {
    retries: 3,
    retryCondition: isNetworkOrIdempotentRequestError,
    retryDelay: noDelay,
    shouldResetTimeout: false,
    onRetry: () => { },
    onMaxRetryTimesExceeded: () => { },
    validateResponse: null
};
function getRequestOptions(config, defaultOptions) {
    return { ...DEFAULT_OPTIONS, ...defaultOptions, ...config[namespace] };
}
function setCurrentState(config, defaultOptions, resetLastRequestTime = false) {
    const currentState = getRequestOptions(config, defaultOptions || {});
    currentState.retryCount = currentState.retryCount || 0;
    if (!currentState.lastRequestTime || resetLastRequestTime) {
        currentState.lastRequestTime = Date.now();
    }
    config[namespace] = currentState;
    return currentState;
}
function fixConfig(axiosInstance, config) {
    // @ts-ignore
    if (axiosInstance.defaults.agent === config.agent) {
        // @ts-ignore
        delete config.agent;
    }
    if (axiosInstance.defaults.httpAgent === config.httpAgent) {
        delete config.httpAgent;
    }
    if (axiosInstance.defaults.httpsAgent === config.httpsAgent) {
        delete config.httpsAgent;
    }
}
async function shouldRetry(currentState, error) {
    const { retries, retryCondition } = currentState;
    const shouldRetryOrPromise = (currentState.retryCount || 0) < retries && retryCondition(error);
    // This could be a promise
    if (typeof shouldRetryOrPromise === 'object') {
        try {
            const shouldRetryPromiseResult = await shouldRetryOrPromise;
            // keep return true unless shouldRetryPromiseResult return false for compatibility
            return shouldRetryPromiseResult !== false;
        }
        catch (_err) {
            return false;
        }
    }
    return shouldRetryOrPromise;
}
async function handleRetry(axiosInstance, currentState, error, config) {
    currentState.retryCount += 1;
    const { retryDelay, shouldResetTimeout, onRetry } = currentState;
    const delay = retryDelay(currentState.retryCount, error);
    // Axios fails merging this configuration to the default configuration because it has an issue
    // with circular structures: https://github.com/mzabriskie/axios/issues/370
    fixConfig(axiosInstance, config);
    if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {
        const lastRequestDuration = Date.now() - currentState.lastRequestTime;
        const timeout = config.timeout - lastRequestDuration - delay;
        if (timeout <= 0) {
            return Promise.reject(error);
        }
        config.timeout = timeout;
    }
    config.transformRequest = [(data) => data];
    await onRetry(currentState.retryCount, error, config);
    if (config.signal?.aborted) {
        return Promise.resolve(axiosInstance(config));
    }
    return new Promise((resolve) => {
        const abortListener = () => {
            clearTimeout(timeout);
            resolve(axiosInstance(config));
        };
        const timeout = setTimeout(() => {
            resolve(axiosInstance(config));
            if (config.signal?.removeEventListener) {
                config.signal.removeEventListener('abort', abortListener);
            }
        }, delay);
        if (config.signal?.addEventListener) {
            config.signal.addEventListener('abort', abortListener, { once: true });
        }
    });
}
async function handleMaxRetryTimesExceeded(currentState, error) {
    if (currentState.retryCount >= currentState.retries)
        await currentState.onMaxRetryTimesExceeded(error, currentState.retryCount);
}
const axiosRetry = (axiosInstance, defaultOptions) => {
    const requestInterceptorId = axiosInstance.interceptors.request.use((config) => {
        setCurrentState(config, defaultOptions, true);
        if (config[namespace]?.validateResponse) {
            // by setting this, all HTTP responses will be go through the error interceptor first
            config.validateStatus = () => false;
        }
        return config;
    });
    const responseInterceptorId = axiosInstance.interceptors.response.use(null, async (error) => {
        const { config } = error;
        // If we have no information to retry the request
        if (!config) {
            return Promise.reject(error);
        }
        const currentState = setCurrentState(config, defaultOptions);
        if (error.response && currentState.validateResponse?.(error.response)) {
            // no issue with response
            return error.response;
        }
        if (await shouldRetry(currentState, error)) {
            return handleRetry(axiosInstance, currentState, error, config);
        }
        await handleMaxRetryTimesExceeded(currentState, error);
        return Promise.reject(error);
    });
    return { requestInterceptorId, responseInterceptorId };
};
// Compatibility with CommonJS
axiosRetry.isNetworkError = isNetworkError;
axiosRetry.isSafeRequestError = isSafeRequestError;
axiosRetry.isIdempotentRequestError = isIdempotentRequestError;
axiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;
axiosRetry.exponentialDelay = exponentialDelay;
axiosRetry.linearDelay = linearDelay;
axiosRetry.isRetryableError = isRetryableError;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (axiosRetry);


/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* unused harmony exports Axios, AxiosError, CanceledError, isCancel, CancelToken, VERSION, all, Cancel, isAxiosError, spread, toFormData, AxiosHeaders, HttpStatusCode, formToJSON, getAdapter, mergeConfig */
/* harmony import */ var _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/axios.js */ "./node_modules/axios/lib/axios.js");


// This module is intended to unwrap Axios default export as named.
// Keep top-level export same with static properties
// so that it can keep same with es module or cjs
const {
  Axios,
  AxiosError,
  CanceledError,
  isCancel,
  CancelToken,
  VERSION,
  all,
  Cancel,
  isAxiosError,
  spread,
  toFormData,
  AxiosHeaders,
  HttpStatusCode,
  formToJSON,
  getAdapter,
  mergeConfig
} = _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__["default"];




/***/ }),

/***/ "./node_modules/axios/lib/adapters/adapters.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/adapters/adapters.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _http_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./http.js */ "./node_modules/axios/lib/helpers/null.js");
/* harmony import */ var _xhr_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./xhr.js */ "./node_modules/axios/lib/adapters/xhr.js");
/* harmony import */ var _fetch_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fetch.js */ "./node_modules/axios/lib/adapters/fetch.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");






const knownAdapters = {
  http: _http_js__WEBPACK_IMPORTED_MODULE_1__["default"],
  xhr: _xhr_js__WEBPACK_IMPORTED_MODULE_2__["default"],
  fetch: _fetch_js__WEBPACK_IMPORTED_MODULE_3__["default"]
}

_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {value});
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {value});
  }
});

const renderReason = (reason) => `- ${reason}`;

const isResolvedHandle = (adapter) => _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(adapter) || adapter === null || adapter === false;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  getAdapter: (adapters) => {
    adapters = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(adapters) ? adapters : [adapters];

    const {length} = adapters;
    let nameOrAdapter;
    let adapter;

    const rejectedReasons = {};

    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;

      adapter = nameOrAdapter;

      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

        if (adapter === undefined) {
          throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_4__["default"](`Unknown adapter '${id}'`);
        }
      }

      if (adapter) {
        break;
      }

      rejectedReasons[id || '#' + i] = adapter;
    }

    if (!adapter) {

      const reasons = Object.entries(rejectedReasons)
        .map(([id, state]) => `adapter ${id} ` +
          (state === false ? 'is not supported by the environment' : 'is not available in the build')
        );

      let s = length ?
        (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
        'as no adapter specified';

      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_4__["default"](
        `There is no suitable adapter to dispatch the request ` + s,
        'ERR_NOT_SUPPORT'
      );
    }

    return adapter;
  },
  adapters: knownAdapters
});


/***/ }),

/***/ "./node_modules/axios/lib/adapters/fetch.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/adapters/fetch.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _helpers_composeSignals_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/composeSignals.js */ "./node_modules/axios/lib/helpers/composeSignals.js");
/* harmony import */ var _helpers_trackStream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/trackStream.js */ "./node_modules/axios/lib/helpers/trackStream.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/progressEventReducer.js */ "./node_modules/axios/lib/helpers/progressEventReducer.js");
/* harmony import */ var _helpers_resolveConfig_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/resolveConfig.js */ "./node_modules/axios/lib/helpers/resolveConfig.js");
/* harmony import */ var _core_settle_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../core/settle.js */ "./node_modules/axios/lib/core/settle.js");










const isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';
const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';

// used only inside the fetch adapter
const encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?
    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :
    async (str) => new Uint8Array(await new Response(str).arrayBuffer())
);

const test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e) {
    return false
  }
}

const supportsRequestStream = isReadableStreamSupported && test(() => {
  let duplexAccessed = false;

  const hasContentType = new Request(_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].origin, {
    body: new ReadableStream(),
    method: 'POST',
    get duplex() {
      duplexAccessed = true;
      return 'half';
    },
  }).headers.has('Content-Type');

  return duplexAccessed && !hasContentType;
});

const DEFAULT_CHUNK_SIZE = 64 * 1024;

const supportsResponseStream = isReadableStreamSupported &&
  test(() => _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isReadableStream(new Response('').body));


const resolvers = {
  stream: supportsResponseStream && ((res) => res.body)
};

isFetchSupported && (((res) => {
  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {
    !resolvers[type] && (resolvers[type] = _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isFunction(res[type]) ? (res) => res[type]() :
      (_, config) => {
        throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"](`Response type '${type}' is not supported`, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"].ERR_NOT_SUPPORT, config);
      })
  });
})(new Response));

const getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }

  if(_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isBlob(body)) {
    return body.size;
  }

  if(_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isSpecCompliantForm(body)) {
    const _request = new Request(_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].origin, {
      method: 'POST',
      body,
    });
    return (await _request.arrayBuffer()).byteLength;
  }

  if(_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isArrayBufferView(body) || _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isArrayBuffer(body)) {
    return body.byteLength;
  }

  if(_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isURLSearchParams(body)) {
    body = body + '';
  }

  if(_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isString(body)) {
    return (await encodeText(body)).byteLength;
  }
}

const resolveBodyLength = async (headers, body) => {
  const length = _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].toFiniteNumber(headers.getContentLength());

  return length == null ? getBodyLength(body) : length;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isFetchSupported && (async (config) => {
  let {
    url,
    method,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = 'same-origin',
    fetchOptions
  } = (0,_helpers_resolveConfig_js__WEBPACK_IMPORTED_MODULE_7__["default"])(config);

  responseType = responseType ? (responseType + '').toLowerCase() : 'text';

  let composedSignal = (0,_helpers_composeSignals_js__WEBPACK_IMPORTED_MODULE_3__["default"])([signal, cancelToken && cancelToken.toAbortSignal()], timeout);

  let request;

  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
      composedSignal.unsubscribe();
  });

  let requestContentLength;

  try {
    if (
      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&
      (requestContentLength = await resolveBodyLength(headers, data)) !== 0
    ) {
      let _request = new Request(url, {
        method: 'POST',
        body: data,
        duplex: "half"
      });

      let contentTypeHeader;

      if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {
        headers.setContentType(contentTypeHeader)
      }

      if (_request.body) {
        const [onProgress, flush] = (0,_helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_6__.progressEventDecorator)(
          requestContentLength,
          (0,_helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_6__.progressEventReducer)((0,_helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_6__.asyncDecorator)(onUploadProgress))
        );

        data = (0,_helpers_trackStream_js__WEBPACK_IMPORTED_MODULE_4__.trackStream)(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
      }
    }

    if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isString(withCredentials)) {
      withCredentials = withCredentials ? 'include' : 'omit';
    }

    // Cloudflare Workers throws when credentials are defined
    // see https://github.com/cloudflare/workerd/issues/902
    const isCredentialsSupported = "credentials" in Request.prototype;
    request = new Request(url, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      credentials: isCredentialsSupported ? withCredentials : undefined
    });

    let response = await fetch(request);

    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');

    if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {
      const options = {};

      ['status', 'statusText', 'headers'].forEach(prop => {
        options[prop] = response[prop];
      });

      const responseContentLength = _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].toFiniteNumber(response.headers.get('content-length'));

      const [onProgress, flush] = onDownloadProgress && (0,_helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_6__.progressEventDecorator)(
        responseContentLength,
        (0,_helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_6__.progressEventReducer)((0,_helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_6__.asyncDecorator)(onDownloadProgress), true)
      ) || [];

      response = new Response(
        (0,_helpers_trackStream_js__WEBPACK_IMPORTED_MODULE_4__.trackStream)(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
          flush && flush();
          unsubscribe && unsubscribe();
        }),
        options
      );
    }

    responseType = responseType || 'text';

    let responseData = await resolvers[_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].findKey(resolvers, responseType) || 'text'](response, config);

    !isStreamResponse && unsubscribe && unsubscribe();

    return await new Promise((resolve, reject) => {
      (0,_core_settle_js__WEBPACK_IMPORTED_MODULE_8__["default"])(resolve, reject, {
        data: responseData,
        headers: _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_5__["default"].from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request
      })
    })
  } catch (err) {
    unsubscribe && unsubscribe();

    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {
      throw Object.assign(
        new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"]('Network Error', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"].ERR_NETWORK, config, request),
        {
          cause: err.cause || err
        }
      )
    }

    throw _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"].from(err, err && err.code, config, request);
  }
}));




/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_settle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../core/settle.js */ "./node_modules/axios/lib/core/settle.js");
/* harmony import */ var _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../defaults/transitional.js */ "./node_modules/axios/lib/defaults/transitional.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _helpers_parseProtocol_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/parseProtocol.js */ "./node_modules/axios/lib/helpers/parseProtocol.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/progressEventReducer.js */ "./node_modules/axios/lib/helpers/progressEventReducer.js");
/* harmony import */ var _helpers_resolveConfig_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../helpers/resolveConfig.js */ "./node_modules/axios/lib/helpers/resolveConfig.js");











const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isXHRAdapterSupported && function (config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = (0,_helpers_resolveConfig_js__WEBPACK_IMPORTED_MODULE_9__["default"])(config);
    let requestData = _config.data;
    const requestHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_7__["default"].from(_config.headers).normalize();
    let {responseType, onUploadProgress, onDownloadProgress} = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;

    function done() {
      flushUpload && flushUpload(); // flush events
      flushDownload && flushDownload(); // flush events

      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);

      _config.signal && _config.signal.removeEventListener('abort', onCanceled);
    }

    let request = new XMLHttpRequest();

    request.open(_config.method.toUpperCase(), _config.url, true);

    // Set the request timeout in MS
    request.timeout = _config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      const responseHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_7__["default"].from(
        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
        request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };

      (0,_core_settle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"]('Request aborted', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"].ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"]('Network Error', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"].ERR_NETWORK, config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';
      const transitional = _config.transitional || _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_2__["default"];
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"](
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"].ETIMEDOUT : _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"].ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = _config.responseType;
    }

    // Handle progress if needed
    if (onDownloadProgress) {
      ([downloadThrottled, flushDownload] = (0,_helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_8__.progressEventReducer)(onDownloadProgress, true));
      request.addEventListener('progress', downloadThrottled);
    }

    // Not all browsers support upload events
    if (onUploadProgress && request.upload) {
      ([uploadThrottled, flushUpload] = (0,_helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_8__.progressEventReducer)(onUploadProgress));

      request.upload.addEventListener('progress', uploadThrottled);

      request.upload.addEventListener('loadend', flushUpload);
    }

    if (_config.cancelToken || _config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = cancel => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_4__["default"](null, config, request) : cancel);
        request.abort();
        request = null;
      };

      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);
      }
    }

    const protocol = (0,_helpers_parseProtocol_js__WEBPACK_IMPORTED_MODULE_5__["default"])(_config.url);

    if (protocol && _platform_index_js__WEBPACK_IMPORTED_MODULE_6__["default"].protocols.indexOf(protocol) === -1) {
      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"]('Unsupported protocol ' + protocol + ':', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"].ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData || null);
  });
});


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/bind.js */ "./node_modules/axios/lib/helpers/bind.js");
/* harmony import */ var _core_Axios_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/Axios.js */ "./node_modules/axios/lib/core/Axios.js");
/* harmony import */ var _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/mergeConfig.js */ "./node_modules/axios/lib/core/mergeConfig.js");
/* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./defaults/index.js */ "./node_modules/axios/lib/defaults/index.js");
/* harmony import */ var _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/formDataToJSON.js */ "./node_modules/axios/lib/helpers/formDataToJSON.js");
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _cancel_CancelToken_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cancel/CancelToken.js */ "./node_modules/axios/lib/cancel/CancelToken.js");
/* harmony import */ var _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cancel/isCancel.js */ "./node_modules/axios/lib/cancel/isCancel.js");
/* harmony import */ var _env_data_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./env/data.js */ "./node_modules/axios/lib/env/data.js");
/* harmony import */ var _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./helpers/toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _helpers_spread_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./helpers/spread.js */ "./node_modules/axios/lib/helpers/spread.js");
/* harmony import */ var _helpers_isAxiosError_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./helpers/isAxiosError.js */ "./node_modules/axios/lib/helpers/isAxiosError.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./adapters/adapters.js */ "./node_modules/axios/lib/adapters/adapters.js");
/* harmony import */ var _helpers_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./helpers/HttpStatusCode.js */ "./node_modules/axios/lib/helpers/HttpStatusCode.js");




















/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  const context = new _core_Axios_js__WEBPACK_IMPORTED_MODULE_2__["default"](defaultConfig);
  const instance = (0,_helpers_bind_js__WEBPACK_IMPORTED_MODULE_1__["default"])(_core_Axios_js__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.request, context);

  // Copy axios.prototype to instance
  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].extend(instance, _core_Axios_js__WEBPACK_IMPORTED_MODULE_2__["default"].prototype, context, {allOwnKeys: true});

  // Copy context to instance
  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance((0,_core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__["default"])(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
const axios = createInstance(_defaults_index_js__WEBPACK_IMPORTED_MODULE_4__["default"]);

// Expose Axios class to allow class inheritance
axios.Axios = _core_Axios_js__WEBPACK_IMPORTED_MODULE_2__["default"];

// Expose Cancel & CancelToken
axios.CanceledError = _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_6__["default"];
axios.CancelToken = _cancel_CancelToken_js__WEBPACK_IMPORTED_MODULE_7__["default"];
axios.isCancel = _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_8__["default"];
axios.VERSION = _env_data_js__WEBPACK_IMPORTED_MODULE_9__.VERSION;
axios.toFormData = _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_10__["default"];

// Expose AxiosError class
axios.AxiosError = _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_11__["default"];

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = _helpers_spread_js__WEBPACK_IMPORTED_MODULE_12__["default"];

// Expose isAxiosError
axios.isAxiosError = _helpers_isAxiosError_js__WEBPACK_IMPORTED_MODULE_13__["default"];

// Expose mergeConfig
axios.mergeConfig = _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__["default"];

axios.AxiosHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_14__["default"];

axios.formToJSON = thing => (0,_helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_5__["default"])(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isHTMLForm(thing) ? new FormData(thing) : thing);

axios.getAdapter = _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_15__["default"].getAdapter;

axios.HttpStatusCode = _helpers_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_16__["default"];

axios.default = axios;

// this module should only have a default export
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (axios);


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _CanceledError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");




/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
class CancelToken {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    let resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    const token = this;

    // eslint-disable-next-line func-names
    this.promise.then(cancel => {
      if (!token._listeners) return;

      let i = token._listeners.length;

      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = onfulfilled => {
      let _resolve;
      // eslint-disable-next-line func-names
      const promise = new Promise(resolve => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new _CanceledError_js__WEBPACK_IMPORTED_MODULE_0__["default"](message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }

  /**
   * Subscribe to the cancel signal
   */

  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }

  /**
   * Unsubscribe from the cancel signal
   */

  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }

  toAbortSignal() {
    const controller = new AbortController();

    const abort = (err) => {
      controller.abort(err);
    };

    this.subscribe(abort);

    controller.signal.unsubscribe = () => this.unsubscribe(abort);

    return controller.signal;
  }

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CancelToken);


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CanceledError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CanceledError.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");





/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function CanceledError(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].call(this, message == null ? 'canceled' : message, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}

_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].inherits(CanceledError, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"], {
  __CANCEL__: true
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CanceledError);


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isCancel)
/* harmony export */ });


function isCancel(value) {
  return !!(value && value.__CANCEL__);
}


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/buildURL.js */ "./node_modules/axios/lib/helpers/buildURL.js");
/* harmony import */ var _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./InterceptorManager.js */ "./node_modules/axios/lib/core/InterceptorManager.js");
/* harmony import */ var _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dispatchRequest.js */ "./node_modules/axios/lib/core/dispatchRequest.js");
/* harmony import */ var _mergeConfig_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mergeConfig.js */ "./node_modules/axios/lib/core/mergeConfig.js");
/* harmony import */ var _buildFullPath_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./buildFullPath.js */ "./node_modules/axios/lib/core/buildFullPath.js");
/* harmony import */ var _helpers_validator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/validator.js */ "./node_modules/axios/lib/helpers/validator.js");
/* harmony import */ var _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");











const validators = _helpers_validator_js__WEBPACK_IMPORTED_MODULE_6__["default"].validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_2__["default"](),
      response: new _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_2__["default"]()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy = {};

        Error.captureStackTrace ? Error.captureStackTrace(dummy) : (dummy = new Error());

        // slice off the Error: ... line
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';
        try {
          if (!err.stack) {
            err.stack = stack;
            // match without the 2 top stack lines
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
            err.stack += '\n' + stack
          }
        } catch (e) {
          // ignore the case where "stack" is an un-writable property
        }
      }

      throw err;
    }
  }

  _request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    config = (0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_4__["default"])(this.defaults, config);

    const {transitional, paramsSerializer, headers} = config;

    if (transitional !== undefined) {
      _helpers_validator_js__WEBPACK_IMPORTED_MODULE_6__["default"].assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }

    if (paramsSerializer != null) {
      if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        }
      } else {
        _helpers_validator_js__WEBPACK_IMPORTED_MODULE_6__["default"].assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }

    _helpers_validator_js__WEBPACK_IMPORTED_MODULE_6__["default"].assertOptions(config, {
      baseUrl: validators.spelling('baseURL'),
      withXsrfToken: validators.spelling('withXSRFToken')
    }, true);

    // Set config.method
    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

    // Flatten headers
    let contextHeaders = headers && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].merge(
      headers.common,
      headers[config.method]
    );

    headers && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      (method) => {
        delete headers[method];
      }
    );

    config.headers = _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_7__["default"].concat(contextHeaders, headers);

    // filter out skipped interceptors
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    let promise;
    let i = 0;
    let len;

    if (!synchronousRequestInterceptors) {
      const chain = [_dispatchRequest_js__WEBPACK_IMPORTED_MODULE_3__["default"].bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;

      promise = Promise.resolve(config);

      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }

      return promise;
    }

    len = requestInterceptorChain.length;

    let newConfig = config;

    i = 0;

    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }

    try {
      promise = _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_3__["default"].call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    i = 0;
    len = responseInterceptorChain.length;

    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }

    return promise;
  }

  getUri(config) {
    config = (0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_4__["default"])(this.defaults, config);
    const fullPath = (0,_buildFullPath_js__WEBPACK_IMPORTED_MODULE_5__["default"])(config.baseURL, config.url);
    return (0,_helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_1__["default"])(fullPath, config.params, config.paramsSerializer);
  }
}

// Provide aliases for supported request methods
_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request((0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_4__["default"])(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});

_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request((0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_4__["default"])(config || {}, {
        method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url,
        data
      }));
    };
  }

  Axios.prototype[method] = generateHTTPMethod();

  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Axios);


/***/ }),

/***/ "./node_modules/axios/lib/core/AxiosError.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosError.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");




/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function AxiosError(message, code, config, request, response) {
  Error.call(this);

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = (new Error()).stack;
  }

  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}

_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});

const prototype = AxiosError.prototype;
const descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED',
  'ERR_NOT_SUPPORT',
  'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(code => {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);

  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, prop => {
    return prop !== 'isAxiosError';
  });

  AxiosError.call(axiosError, error.message, code, config, request, response);

  axiosError.cause = error;

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxiosError);


/***/ }),

/***/ "./node_modules/axios/lib/core/AxiosHeaders.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosHeaders.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/parseHeaders.js */ "./node_modules/axios/lib/helpers/parseHeaders.js");





const $internals = Symbol('internals');

function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}

function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }

  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) ? value.map(normalizeValue) : String(value);
}

function parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;

  while ((match = tokensRE.exec(str))) {
    tokens[match[1]] = match[2];
  }

  return tokens;
}

const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(filter)) {
    return filter.call(this, value, header);
  }

  if (isHeaderNameFilter) {
    value = header;
  }

  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(value)) return;

  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(filter)) {
    return value.indexOf(filter) !== -1;
  }

  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(filter)) {
    return filter.test(value);
  }
}

function formatHeader(header) {
  return header.trim()
    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
}

function buildAccessors(obj, header) {
  const accessorName = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toCamelCase(' ' + header);

  ['get', 'set', 'has'].forEach(methodName => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }

  set(header, valueOrRewrite, rewrite) {
    const self = this;

    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);

      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }

      const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(self, lHeader);

      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
        self[key || _header] = normalizeValue(_value);
      }
    }

    const setHeaders = (headers, _rewrite) =>
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite)
    } else if(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders((0,_helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"])(header), valueOrRewrite);
    } else if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isHeaders(header)) {
      for (const [key, value] of header.entries()) {
        setHeader(value, key, rewrite);
      }
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }

    return this;
  }

  get(header, parser) {
    header = normalizeHeader(header);

    if (header) {
      const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(this, header);

      if (key) {
        const value = this[key];

        if (!parser) {
          return value;
        }

        if (parser === true) {
          return parseTokens(value);
        }

        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(parser)) {
          return parser.call(this, value, key);
        }

        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(parser)) {
          return parser.exec(value);
        }

        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }

  has(header, matcher) {
    header = normalizeHeader(header);

    if (header) {
      const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(this, header);

      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }

    return false;
  }

  delete(header, matcher) {
    const self = this;
    let deleted = false;

    function deleteHeader(_header) {
      _header = normalizeHeader(_header);

      if (_header) {
        const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(self, _header);

        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];

          deleted = true;
        }
      }
    }

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }

    return deleted;
  }

  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;

    while (i--) {
      const key = keys[i];
      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }

    return deleted;
  }

  normalize(format) {
    const self = this;
    const headers = {};

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this, (value, header) => {
      const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(headers, header);

      if (key) {
        self[key] = normalizeValue(value);
        delete self[header];
        return;
      }

      const normalized = format ? formatHeader(header) : String(header).trim();

      if (normalized !== header) {
        delete self[header];
      }

      self[normalized] = normalizeValue(value);

      headers[normalized] = true;
    });

    return this;
  }

  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }

  toJSON(asStrings) {
    const obj = Object.create(null);

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) ? value.join(', ') : value);
    });

    return obj;
  }

  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }

  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
  }

  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }

  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }

  static concat(first, ...targets) {
    const computed = new this(first);

    targets.forEach((target) => computed.set(target));

    return computed;
  }

  static accessor(header) {
    const internals = this[$internals] = (this[$internals] = {
      accessors: {}
    });

    const accessors = internals.accessors;
    const prototype = this.prototype;

    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);

      if (!accessors[lHeader]) {
        buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

    return this;
  }
}

AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

// reserved names hotfix
_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  }
});

_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].freezeMethods(AxiosHeaders);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxiosHeaders);


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");




class InterceptorManager {
  constructor() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }

  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InterceptorManager);


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ buildFullPath)
/* harmony export */ });
/* harmony import */ var _helpers_isAbsoluteURL_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/isAbsoluteURL.js */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
/* harmony import */ var _helpers_combineURLs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/combineURLs.js */ "./node_modules/axios/lib/helpers/combineURLs.js");





/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !(0,_helpers_isAbsoluteURL_js__WEBPACK_IMPORTED_MODULE_0__["default"])(requestedURL)) {
    return (0,_helpers_combineURLs_js__WEBPACK_IMPORTED_MODULE_1__["default"])(baseURL, requestedURL);
  }
  return requestedURL;
}


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ dispatchRequest)
/* harmony export */ });
/* harmony import */ var _transformData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transformData.js */ "./node_modules/axios/lib/core/transformData.js");
/* harmony import */ var _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cancel/isCancel.js */ "./node_modules/axios/lib/cancel/isCancel.js");
/* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../defaults/index.js */ "./node_modules/axios/lib/defaults/index.js");
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../adapters/adapters.js */ "./node_modules/axios/lib/adapters/adapters.js");









/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_3__["default"](null, config);
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  config.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__["default"].from(config.headers);

  // Transform request data
  config.data = _transformData_js__WEBPACK_IMPORTED_MODULE_0__["default"].call(
    config,
    config.transformRequest
  );

  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }

  const adapter = _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_5__["default"].getAdapter(config.adapter || _defaults_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].adapter);

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = _transformData_js__WEBPACK_IMPORTED_MODULE_0__["default"].call(
      config,
      config.transformResponse,
      response
    );

    response.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__["default"].from(response.headers);

    return response;
  }, function onAdapterRejection(reason) {
    if (!(0,_cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_1__["default"])(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = _transformData_js__WEBPACK_IMPORTED_MODULE_0__["default"].call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__["default"].from(reason.response.headers);
      }
    }

    return Promise.reject(reason);
  });
}


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mergeConfig)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");





const headersToObject = (thing) => thing instanceof _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"] ? { ...thing } : thing;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  const config = {};

  function getMergedValue(target, source, prop, caseless) {
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(target) && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(source)) {
      return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].merge.call({caseless}, target, source);
    } else if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(source)) {
      return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].merge({}, source);
    } else if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(a, b, prop , caseless) {
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(b)) {
      return getMergedValue(a, b, prop , caseless);
    } else if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(a)) {
      return getMergedValue(undefined, a, prop , caseless);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(a, b) {
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(a, b) {
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }

  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b , prop) => mergeDeepProperties(headersToObject(a), headersToObject(b),prop, true)
  };

  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge(config1[prop], config2[prop], prop);
    (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
}


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ settle)
/* harmony export */ });
/* harmony import */ var _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");




/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function settle(resolve, reject, response) {
  const validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"](
      'Request failed with status code ' + response.status,
      [_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_BAD_REQUEST, _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ transformData)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../defaults/index.js */ "./node_modules/axios/lib/defaults/index.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");






/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function transformData(fns, response) {
  const config = this || _defaults_index_js__WEBPACK_IMPORTED_MODULE_1__["default"];
  const context = response || config;
  const headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_2__["default"].from(context.headers);
  let data = context.data;

  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });

  headers.normalize();

  return data;
}


/***/ }),

/***/ "./node_modules/axios/lib/defaults/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/defaults/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _transitional_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transitional.js */ "./node_modules/axios/lib/defaults/transitional.js");
/* harmony import */ var _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");
/* harmony import */ var _helpers_toURLEncodedForm_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/toURLEncodedForm.js */ "./node_modules/axios/lib/helpers/toURLEncodedForm.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");
/* harmony import */ var _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/formDataToJSON.js */ "./node_modules/axios/lib/helpers/formDataToJSON.js");










/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function stringifySafely(rawValue, parser, encoder) {
  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

const defaults = {

  transitional: _transitional_js__WEBPACK_IMPORTED_MODULE_2__["default"],

  adapter: ['xhr', 'http', 'fetch'],

  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(data);

    if (isObjectPayload && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isHTMLForm(data)) {
      data = new FormData(data);
    }

    const isFormData = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(data);

    if (isFormData) {
      return hasJSONContentType ? JSON.stringify((0,_helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_6__["default"])(data)) : data;
    }

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBuffer(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBuffer(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isStream(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFile(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBlob(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isReadableStream(data)
    ) {
      return data;
    }
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBufferView(data)) {
      return data.buffer;
    }
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }

    let isFileList;

    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return (0,_helpers_toURLEncodedForm_js__WEBPACK_IMPORTED_MODULE_4__["default"])(data, this.formSerializer).toString();
      }

      if ((isFileList = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;

        return (0,_helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
          isFileList ? {'files[]': data} : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }

    if (isObjectPayload || hasJSONContentType ) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isResponse(data) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isReadableStream(data)) {
      return data;
    }

    if (data && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;

      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(e, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: _platform_index_js__WEBPACK_IMPORTED_MODULE_5__["default"].classes.FormData,
    Blob: _platform_index_js__WEBPACK_IMPORTED_MODULE_5__["default"].classes.Blob
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': undefined
    }
  }
};

_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
  defaults.headers[method] = {};
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (defaults);


/***/ }),

/***/ "./node_modules/axios/lib/defaults/transitional.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/defaults/transitional.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
});


/***/ }),

/***/ "./node_modules/axios/lib/env/data.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
const VERSION = "1.7.8";

/***/ }),

/***/ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js":
/*!****************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/AxiosURLSearchParams.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toFormData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");




/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function encode(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function AxiosURLSearchParams(params, options) {
  this._pairs = [];

  params && (0,_toFormData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(params, this, options);
}

const prototype = AxiosURLSearchParams.prototype;

prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};

prototype.toString = function toString(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;

  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxiosURLSearchParams);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/HttpStatusCode.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/HttpStatusCode.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
};

Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HttpStatusCode);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ bind)
/* harmony export */ });


function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ buildURL)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/AxiosURLSearchParams.js */ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js");





/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?(object|Function)} options
 *
 * @returns {string} The formatted url
 */
function buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  
  const _encode = options && options.encode || encode;

  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(options)) {
    options = {
      serialize: options
    };
  } 

  const serializeFn = options && options.serialize;

  let serializedParams;

  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isURLSearchParams(params) ?
      params.toString() :
      new _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_1__["default"](params, options).toString(_encode);
  }

  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ combineURLs)
/* harmony export */ });


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/composeSignals.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/composeSignals.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");




const composeSignals = (signals, timeout) => {
  const {length} = (signals = signals ? signals.filter(Boolean) : []);

  if (timeout || length) {
    let controller = new AbortController();

    let aborted;

    const onabort = function (reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"] ? err : new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_0__["default"](err instanceof Error ? err.message : err));
      }
    }

    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"](`timeout ${timeout} of ms exceeded`, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ETIMEDOUT))
    }, timeout)

    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach(signal => {
          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);
        });
        signals = null;
      }
    }

    signals.forEach((signal) => signal.addEventListener('abort', onabort));

    const {signal} = controller;

    signal.unsubscribe = () => _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].asap(unsubscribe);

    return signal;
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (composeSignals);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_platform_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].hasStandardBrowserEnv ?

  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + '=' + encodeURIComponent(value)];

      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(path) && cookie.push('path=' + path);

      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(domain) && cookie.push('domain=' + domain);

      secure === true && cookie.push('secure');

      document.cookie = cookie.join('; ');
    },

    read(name) {
      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return (match ? decodeURIComponent(match[3]) : null);
    },

    remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  }

  :

  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {},
    read() {
      return null;
    },
    remove() {}
  });



/***/ }),

/***/ "./node_modules/axios/lib/helpers/formDataToJSON.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/formDataToJSON.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");




/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];

    if (name === '__proto__') return true;

    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(target) ? target.length : name;

    if (isLast) {
      if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }

      return !isNumericKey;
    }

    if (!target[name] || !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(target[name])) {
      target[name] = [];
    }

    const result = buildPath(path, value, target[name], index);

    if (result && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }

    return !isNumericKey;
  }

  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(formData) && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(formData.entries)) {
    const obj = {};

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });

    return obj;
  }

  return null;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (formDataToJSON);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isAbsoluteURL)
/* harmony export */ });


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isAxiosError)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");




/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function isAxiosError(payload) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(payload) && (payload.isAxiosError === true);
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasStandardBrowserEnv ? ((origin, isMSIE) => (url) => {
  url = new URL(url, _platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].origin);

  return (
    origin.protocol === url.protocol &&
    origin.host === url.host &&
    (isMSIE || origin.port === url.port)
  );
})(
  new URL(_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].origin),
  _platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].navigator && /(msie|trident)/i.test(_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].navigator.userAgent)
) : () => true);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/null.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/null.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// eslint-disable-next-line strict
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (null);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");




// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const ignoreDuplicateOf = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toObjectSet([
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
]);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (rawHeaders => {
  const parsed = {};
  let key;
  let val;
  let i;

  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();

    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
      return;
    }

    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
});


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseProtocol.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseProtocol.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ parseProtocol)
/* harmony export */ });


function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/progressEventReducer.js":
/*!****************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/progressEventReducer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   asyncDecorator: () => (/* binding */ asyncDecorator),
/* harmony export */   progressEventDecorator: () => (/* binding */ progressEventDecorator),
/* harmony export */   progressEventReducer: () => (/* binding */ progressEventReducer)
/* harmony export */ });
/* harmony import */ var _speedometer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./speedometer.js */ "./node_modules/axios/lib/helpers/speedometer.js");
/* harmony import */ var _throttle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./throttle.js */ "./node_modules/axios/lib/helpers/throttle.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");




const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = (0,_speedometer_js__WEBPACK_IMPORTED_MODULE_0__["default"])(50, 250);

  return (0,_throttle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(e => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;

    bytesNotified = loaded;

    const data = {
      loaded,
      total,
      progress: total ? (loaded / total) : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e,
      lengthComputable: total != null,
      [isDownloadStream ? 'download' : 'upload']: true
    };

    listener(data);
  }, freq);
}

const progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;

  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
}

const asyncDecorator = (fn) => (...args) => _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].asap(() => fn(...args));


/***/ }),

/***/ "./node_modules/axios/lib/helpers/resolveConfig.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/resolveConfig.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _isURLSameOrigin_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isURLSameOrigin.js */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
/* harmony import */ var _cookies_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cookies.js */ "./node_modules/axios/lib/helpers/cookies.js");
/* harmony import */ var _core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/buildFullPath.js */ "./node_modules/axios/lib/core/buildFullPath.js");
/* harmony import */ var _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/mergeConfig.js */ "./node_modules/axios/lib/core/mergeConfig.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _buildURL_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./buildURL.js */ "./node_modules/axios/lib/helpers/buildURL.js");









/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((config) => {
  const newConfig = (0,_core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_5__["default"])({}, config);

  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;

  newConfig.headers = headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_6__["default"].from(headers);

  newConfig.url = (0,_buildURL_js__WEBPACK_IMPORTED_MODULE_7__["default"])((0,_core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_4__["default"])(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);

  // HTTP basic authentication
  if (auth) {
    headers.set('Authorization', 'Basic ' +
      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))
    );
  }

  let contentType;

  if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isFormData(data)) {
    if (_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasStandardBrowserEnv || _platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(undefined); // Let the browser set it
    } else if ((contentType = headers.getContentType()) !== false) {
      // fix semicolon duplication issue for ReactNative FormData implementation
      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
    }
  }

  // Add xsrf header
  // This is only done if running in a standard browser environment.
  // Specifically not if we're in a web worker, or react-native.

  if (_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasStandardBrowserEnv) {
    withXSRFToken && _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));

    if (withXSRFToken || (withXSRFToken !== false && (0,_isURLSameOrigin_js__WEBPACK_IMPORTED_MODULE_2__["default"])(newConfig.url))) {
      // Add xsrf header
      const xsrfValue = xsrfHeaderName && xsrfCookieName && _cookies_js__WEBPACK_IMPORTED_MODULE_3__["default"].read(xsrfCookieName);

      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }

  return newConfig;
});



/***/ }),

/***/ "./node_modules/axios/lib/helpers/speedometer.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/speedometer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;

  min = min !== undefined ? min : 1000;

  return function push(chunkLength) {
    const now = Date.now();

    const startedAt = timestamps[tail];

    if (!firstSampleTS) {
      firstSampleTS = now;
    }

    bytes[head] = chunkLength;
    timestamps[head] = now;

    let i = tail;
    let bytesCount = 0;

    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }

    head = (head + 1) % samplesCount;

    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }

    if (now - firstSampleTS < min) {
      return;
    }

    const passed = startedAt && now - startedAt;

    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (speedometer);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ spread)
/* harmony export */ });


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/throttle.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/throttle.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Throttle decorator
 * @param {Function} fn
 * @param {Number} freq
 * @return {Function}
 */
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1000 / freq;
  let lastArgs;
  let timer;

  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn.apply(null, args);
  }

  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if ( passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs)
        }, threshold - passed);
      }
    }
  }

  const flush = () => lastArgs && invoke(lastArgs);

  return [throttled, flush];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (throttle);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/toFormData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toFormData.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _platform_node_classes_FormData_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../platform/node/classes/FormData.js */ "./node_modules/axios/lib/helpers/null.js");




// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored


/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function isVisitable(thing) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(thing) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function removeBrackets(key) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function isFlatArray(arr) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(arr) && !arr.some(isVisitable);
}

const predicates = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"], {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function toFormData(obj, formData, options) {
  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (_platform_node_classes_FormData_js__WEBPACK_IMPORTED_MODULE_2__["default"] || FormData)();

  // eslint-disable-next-line no-param-reassign
  options = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(source[option]);
  });

  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isSpecCompliantForm(formData);

  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }

  function convertValue(value) {
    if (value === null) return '';

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isDate(value)) {
      return value.toISOString();
    }

    if (!useBlob && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBlob(value)) {
      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('Blob is not supported. Use a Buffer instead.');
    }

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBuffer(value) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    let arr = value;

    if (value && !path && typeof value === 'object') {
      if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (
        (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) && isFlatArray(value)) ||
        ((_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFileList(value) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key, '[]')) && (arr = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toArray(value))
        )) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);

        arr.forEach(function each(el, index) {
          !(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
            convertValue(el)
          );
        });
        return false;
      }
    }

    if (isVisitable(value)) {
      return true;
    }

    formData.append(renderKey(path, key, dots), convertValue(value));

    return false;
  }

  const stack = [];

  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });

  function build(value, path) {
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(value)) return;

    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }

    stack.push(value);

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(value, function each(el, key) {
      const result = !(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(el) || el === null) && visitor.call(
        formData, el, _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(key) ? key.trim() : key, path, exposedHelpers
      );

      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });

    stack.pop();
  }

  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(obj)) {
    throw new TypeError('data must be an object');
  }

  build(obj);

  return formData;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toFormData);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/toURLEncodedForm.js":
/*!************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toURLEncodedForm.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ toURLEncodedForm)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _toFormData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");






function toURLEncodedForm(data, options) {
  return (0,_toFormData_js__WEBPACK_IMPORTED_MODULE_1__["default"])(data, new _platform_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (_platform_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].isNode && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }

      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/trackStream.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/trackStream.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   trackStream: () => (/* binding */ trackStream)
/* harmony export */ });
/* unused harmony exports streamChunk, readBytes */

const streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;

  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }

  let pos = 0;
  let end;

  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
}

const readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of readStream(iterable)) {
    yield* streamChunk(chunk, chunkSize);
  }
}

const readStream = async function* (stream) {
  if (stream[Symbol.asyncIterator]) {
    yield* stream;
    return;
  }

  const reader = stream.getReader();
  try {
    for (;;) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
}

const trackStream = (stream, chunkSize, onProgress, onFinish) => {
  const iterator = readBytes(stream, chunkSize);

  let bytes = 0;
  let done;
  let _onFinish = (e) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e);
    }
  }

  return new ReadableStream({
    async pull(controller) {
      try {
        const {done, value} = await iterator.next();

        if (done) {
         _onFinish();
          controller.close();
          return;
        }

        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator.return();
    }
  }, {
    highWaterMark: 2
  })
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _env_data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../env/data.js */ "./node_modules/axios/lib/env/data.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");





const validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

const deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + _env_data_js__WEBPACK_IMPORTED_MODULE_0__.VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return (value, opt, opts) => {
    if (validator === false) {
      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"](
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

validators.spelling = function spelling(correctSpelling) {
  return (value, opt) => {
    // eslint-disable-next-line no-console
    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
    return true;
  }
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('options must be an object', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('option ' + opt + ' must be ' + result, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('Unknown option ' + opt, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION);
    }
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  assertOptions,
  validators
});


/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/classes/Blob.js":
/*!*****************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/Blob.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof Blob !== 'undefined' ? Blob : null);


/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/classes/FormData.js":
/*!*********************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/FormData.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof FormData !== 'undefined' ? FormData : null);


/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js":
/*!****************************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../helpers/AxiosURLSearchParams.js */ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof URLSearchParams !== 'undefined' ? URLSearchParams : _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _classes_URLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classes/URLSearchParams.js */ "./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js");
/* harmony import */ var _classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classes/FormData.js */ "./node_modules/axios/lib/platform/browser/classes/FormData.js");
/* harmony import */ var _classes_Blob_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./classes/Blob.js */ "./node_modules/axios/lib/platform/browser/classes/Blob.js");




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  isBrowser: true,
  classes: {
    URLSearchParams: _classes_URLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__["default"],
    FormData: _classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__["default"],
    Blob: _classes_Blob_js__WEBPACK_IMPORTED_MODULE_2__["default"]
  },
  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
});


/***/ }),

/***/ "./node_modules/axios/lib/platform/common/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/platform/common/utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hasBrowserEnv: () => (/* binding */ hasBrowserEnv),
/* harmony export */   hasStandardBrowserEnv: () => (/* binding */ hasStandardBrowserEnv),
/* harmony export */   hasStandardBrowserWebWorkerEnv: () => (/* binding */ hasStandardBrowserWebWorkerEnv),
/* harmony export */   navigator: () => (/* binding */ _navigator),
/* harmony export */   origin: () => (/* binding */ origin)
/* harmony export */ });
const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

const _navigator = typeof navigator === 'object' && navigator || undefined;

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
const hasStandardBrowserEnv = hasBrowserEnv &&
  (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);

/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */
const hasStandardBrowserWebWorkerEnv = (() => {
  return (
    typeof WorkerGlobalScope !== 'undefined' &&
    // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope &&
    typeof self.importScripts === 'function'
  );
})();

const origin = hasBrowserEnv && window.location.href || 'http://localhost';




/***/ }),

/***/ "./node_modules/axios/lib/platform/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/platform/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node/index.js */ "./node_modules/axios/lib/platform/browser/index.js");
/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common/utils.js */ "./node_modules/axios/lib/platform/common/utils.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  ..._common_utils_js__WEBPACK_IMPORTED_MODULE_1__,
  ..._node_index_js__WEBPACK_IMPORTED_MODULE_0__["default"]
});


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_bind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/bind.js */ "./node_modules/axios/lib/helpers/bind.js");




// utils is a library of generic helper functions non-specific to axios

const {toString} = Object.prototype;
const {getPrototypeOf} = Object;

const kindOf = (cache => thing => {
    const str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));

const kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type
}

const typeOfTest = type => thing => typeof thing === type;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
const {isArray} = Array;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
const isUndefined = typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
const isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  let result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
const isString = typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
const isFunction = typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
const isNumber = typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
const isObject = (thing) => thing !== null && typeof thing === 'object';

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
const isBoolean = thing => thing === true || thing === false;

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
const isPlainObject = (val) => {
  if (kindOf(val) !== 'object') {
    return false;
  }

  const prototype = getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
}

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
const isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
const isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
const isStream = (val) => isObject(val) && isFunction(val.pipe);

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
const isFormData = (thing) => {
  let kind;
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) || (
      isFunction(thing.append) && (
        (kind = kindOf(thing)) === 'formdata' ||
        // detect form-data instance
        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')
      )
    )
  )
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
const isURLSearchParams = kindOfTest('URLSearchParams');

const [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
const trim = (str) => str.trim ?
  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */
function forEach(obj, fn, {allOwnKeys = false} = {}) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  let i;
  let l;

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;

    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}

const _global = (() => {
  /*eslint no-undef:0*/
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global)
})();

const isContextDefined = (context) => !isUndefined(context) && context !== _global;

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  const {caseless} = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  }

  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = (0,_helpers_bind_js__WEBPACK_IMPORTED_MODULE_0__["default"])(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {allOwnKeys});
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
const inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
}

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};

  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
}

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
}


/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
const toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
}

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
const isTypedArray = (TypedArray => {
  // eslint-disable-next-line func-names
  return thing => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];

  const iterator = generator.call(obj);

  let result;

  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
}

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];

  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }

  return arr;
}

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
const isHTMLForm = kindOfTest('HTMLFormElement');

const toCamelCase = str => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};

/* Creating a function that will check if an object has a property. */
const hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
const isRegExp = kindOfTest('RegExp');

const reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};

  forEach(descriptors, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });

  Object.defineProperties(obj, reducedDescriptors);
}

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    // skip restricted props in strict mode
    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
      return false;
    }

    const value = obj[name];

    if (!isFunction(value)) return;

    descriptor.enumerable = false;

    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }

    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error('Can not rewrite read-only method \'' + name + '\'');
      };
    }
  });
}

const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};

  const define = (arr) => {
    arr.forEach(value => {
      obj[value] = true;
    });
  }

  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

  return obj;
}

const noop = () => {}

const toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
}

const ALPHA = 'abcdefghijklmnopqrstuvwxyz'

const DIGIT = '0123456789';

const ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
}

const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = '';
  const {length} = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length|0]
  }

  return str;
}

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
}

const toJSONObject = (obj) => {
  const stack = new Array(10);

  const visit = (source, i) => {

    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }

      if(!('toJSON' in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};

        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });

        stack[i] = undefined;

        return target;
      }
    }

    return source;
  }

  return visit(obj, 0);
}

const isAsyncFn = kindOfTest('AsyncFunction');

const isThenable = (thing) =>
  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);

// original code
// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34

const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }

  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({source, data}) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);

    return (cb) => {
      callbacks.push(cb);
      _global.postMessage(token, "*");
    }
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === 'function',
  isFunction(_global.postMessage)
);

const asap = typeof queueMicrotask !== 'undefined' ?
  queueMicrotask.bind(_global) : ( typeof process !== 'undefined' && process.nextTick || _setImmediate);

// *********************

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap
});


/***/ }),

/***/ "./node_modules/lru.min/lib/index.mjs":
/*!********************************************!*\
  !*** ./node_modules/lru.min/lib/index.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createLRU: () => (/* binding */ createLRU)
/* harmony export */ });
const createLRU = (options) => {
  let { max, onEviction } = options;
  if (!(Number.isInteger(max) && max > 0))
    throw new TypeError("`max` must be a positive integer");
  let size = 0;
  let head = 0;
  let tail = 0;
  let free = [];
  const keyMap = /* @__PURE__ */ new Map();
  const keyList = new Array(max).fill(void 0);
  const valList = new Array(max).fill(void 0);
  const next = new Array(max).fill(0);
  const prev = new Array(max).fill(0);
  const setTail = (index, type) => {
    if (index === tail) return;
    const nextIndex = next[index];
    const prevIndex = prev[index];
    if (index === head) head = nextIndex;
    else if (type === "get" || prevIndex !== 0) next[prevIndex] = nextIndex;
    if (nextIndex !== 0) prev[nextIndex] = prevIndex;
    next[tail] = index;
    prev[index] = tail;
    next[index] = 0;
    tail = index;
  };
  const _evict = () => {
    const evictHead = head;
    const key = keyList[evictHead];
    onEviction == null ? void 0 : onEviction(key, valList[evictHead]);
    keyMap.delete(key);
    keyList[evictHead] = void 0;
    valList[evictHead] = void 0;
    head = next[evictHead];
    if (head !== 0) prev[head] = 0;
    size--;
    if (size === 0) head = tail = 0;
    free.push(evictHead);
    return evictHead;
  };
  return {
    /** Adds a key-value pair to the cache. Updates the value if the key already exists. */
    set(key, value) {
      if (key === void 0) return;
      let index = keyMap.get(key);
      if (index === void 0) {
        index = size === max ? _evict() : free.length > 0 ? free.pop() : size;
        keyMap.set(key, index);
        keyList[index] = key;
        size++;
      } else onEviction == null ? void 0 : onEviction(key, valList[index]);
      valList[index] = value;
      if (size === 1) head = tail = index;
      else setTail(index, "set");
    },
    /** Retrieves the value for a given key and moves the key to the most recent position. */
    get(key) {
      const index = keyMap.get(key);
      if (index === void 0) return;
      if (index !== tail) setTail(index, "get");
      return valList[index];
    },
    /** Retrieves the value for a given key without changing its position. */
    peek: (key) => {
      const index = keyMap.get(key);
      return index !== void 0 ? valList[index] : void 0;
    },
    /** Checks if a key exists in the cache. */
    has: (key) => keyMap.has(key),
    /** Iterates over all keys in the cache, from most recent to least recent. */
    *keys() {
      let current = tail;
      for (let i = 0; i < size; i++) {
        yield keyList[current];
        current = prev[current];
      }
    },
    /** Iterates over all values in the cache, from most recent to least recent. */
    *values() {
      let current = tail;
      for (let i = 0; i < size; i++) {
        yield valList[current];
        current = prev[current];
      }
    },
    /** Iterates over `[key, value]` pairs in the cache, from most recent to least recent. */
    *entries() {
      let current = tail;
      for (let i = 0; i < size; i++) {
        yield [keyList[current], valList[current]];
        current = prev[current];
      }
    },
    /** Iterates over each value-key pair in the cache, from most recent to least recent. */
    forEach: (callback) => {
      let current = tail;
      for (let i = 0; i < size; i++) {
        const key = keyList[current];
        const value = valList[current];
        callback(value, key);
        current = prev[current];
      }
    },
    /** Deletes a key-value pair from the cache. */
    delete(key) {
      const index = keyMap.get(key);
      if (index === void 0) return false;
      onEviction == null ? void 0 : onEviction(key, valList[index]);
      keyMap.delete(key);
      free.push(index);
      keyList[index] = void 0;
      valList[index] = void 0;
      const prevIndex = prev[index];
      const nextIndex = next[index];
      if (prevIndex !== 0) next[prevIndex] = nextIndex;
      if (nextIndex !== 0) prev[nextIndex] = prevIndex;
      if (index === head) head = nextIndex;
      if (index === tail) tail = prevIndex;
      size--;
      return true;
    },
    /** Evicts the oldest item or the specified number of the oldest items from the cache. */
    evict: (number) => {
      let toPrune = Math.min(number, size);
      while (toPrune > 0) {
        _evict();
        toPrune--;
      }
    },
    /** Clears all key-value pairs from the cache. */
    clear() {
      if (typeof onEviction === "function") {
        const iterator = keyMap.values();
        for (let result = iterator.next(); !result.done; result = iterator.next())
          onEviction(keyList[result.value], valList[result.value]);
      }
      keyMap.clear();
      keyList.fill(void 0);
      valList.fill(void 0);
      free = [];
      size = 0;
      head = tail = 0;
    },
    /** Resizes the cache to a new maximum size, evicting items if necessary. */
    resize: (newMax) => {
      if (!(Number.isInteger(newMax) && newMax > 0))
        throw new TypeError("`max` must be a positive integer");
      if (newMax === max) return;
      if (newMax < max) {
        let current = tail;
        const preserve = Math.min(size, newMax);
        const remove = size - preserve;
        const newKeyList = new Array(newMax);
        const newValList = new Array(newMax);
        const newNext = new Array(newMax);
        const newPrev = new Array(newMax);
        for (let i = 1; i <= remove; i++)
          onEviction == null ? void 0 : onEviction(keyList[i], valList[i]);
        for (let i = preserve - 1; i >= 0; i--) {
          newKeyList[i] = keyList[current];
          newValList[i] = valList[current];
          newNext[i] = i + 1;
          newPrev[i] = i - 1;
          keyMap.set(newKeyList[i], i);
          current = prev[current];
        }
        head = 0;
        tail = preserve - 1;
        size = preserve;
        keyList.length = newMax;
        valList.length = newMax;
        next.length = newMax;
        prev.length = newMax;
        for (let i = 0; i < preserve; i++) {
          keyList[i] = newKeyList[i];
          valList[i] = newValList[i];
          next[i] = newNext[i];
          prev[i] = newPrev[i];
        }
        free = [];
        for (let i = preserve; i < newMax; i++) free.push(i);
      } else {
        const fill = newMax - max;
        keyList.push(...new Array(fill).fill(void 0));
        valList.push(...new Array(fill).fill(void 0));
        next.push(...new Array(fill).fill(0));
        prev.push(...new Array(fill).fill(0));
      }
      max = newMax;
    },
    /** Returns the maximum number of items that can be stored in the cache. */
    get max() {
      return max;
    },
    /** Returns the number of items currently stored in the cache. */
    get size() {
      return size;
    },
    /** Returns the number of currently available slots in the cache before reaching the maximum size. */
    get available() {
      return max - size;
    }
  };
};



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".bundle.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "mypresets.mayday.blue:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkmypresets_mayday_blue"] = self["webpackChunkmypresets_mayday_blue"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";
/*!*******************************!*\
  !*** ./original_src/index.js ***!
  \*******************************/
/* harmony import */ var web_audio_beat_detector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web-audio-beat-detector */ "./node_modules/web-audio-beat-detector/build/es2019/module.js");
/* harmony import */ var _fetch_music_data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fetch_music_data.js */ "./original_src/fetch_music_data.js");
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/*!
 * Color mode toggler for Bootstrap's docs (https://getbootstrap.com/)
 * Copyright 2011-2023 The Bootstrap Authors
 * Licensed under the Creative Commons Attribution 3.0 Unported License.
 *  Enhanced Feature added by @FreySu
 */
(function () {
  'use strict';

  var storedTheme = localStorage.getItem('theme');
  var getPreferredTheme = function getPreferredTheme() {
    if (storedTheme) {
      return storedTheme;
    }
    localStorage.setItem('theme', 'auto');
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };
  var setTheme = function setTheme(theme) {
    if (theme === 'auto') {
      var prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      document.documentElement.setAttribute('data-bs-theme', prefersDark ? 'dark' : 'light');
    } else {
      document.documentElement.setAttribute('data-bs-theme', theme);
    }
  };
  var toggleTheme = function toggleTheme() {
    var currentTheme = document.documentElement.getAttribute('data-bs-theme');
    var newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    setTheme(newTheme);
    localStorage.setItem('theme', newTheme);
    showActiveTheme(newTheme, true);
  };
  setTheme(getPreferredTheme());
  var showActiveTheme = function showActiveTheme(theme) {
    var focus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var themeDropdown = document.querySelector('#themeDropdown');
    var dropdownItems = document.querySelectorAll('.dropdown-item');
    dropdownItems.forEach(function (item) {
      item.classList.remove('active');
      item.setAttribute('aria-pressed', 'false');
    });
    var activeItem = document.querySelector("[data-bs-theme-value=\"".concat(theme, "\"]"));
    "";
    activeItem.classList.add('active');
    activeItem.setAttribute('aria-pressed', 'true');

    // themeDropdown.textContent = `外观 (${theme})`;

    if (focus) {
      themeDropdown.focus();
    }
  };
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function () {
    if (storedTheme !== 'light' && storedTheme !== 'dark') {
      setTheme(getPreferredTheme());
    }
  });
  window.addEventListener('DOMContentLoaded', function () {
    showActiveTheme(getPreferredTheme());
    document.querySelectorAll('.dropdown-item').forEach(function (item) {
      item.addEventListener('click', function () {
        var theme = item.getAttribute('data-bs-theme-value');
        localStorage.setItem('theme', theme);
        setTheme(theme);
        showActiveTheme(theme, true);
      });
    });

    // // 添加一个按钮或事件来触发 toggleTheme
    // document
    //   .getElementById('toggle-theme-button')
    //   .addEventListener('click', toggleTheme)
  });
})();

// 捕获异步错误（Promise 拒绝）
window.addEventListener('unhandledrejection', function (event) {
  var errorDetails = {
    reason: event.reason,
    stack: event.reason ? event.reason.stack : 'No stack trace available',
    timestamp: new Date().toISOString()
  };
  my_debugger.showError('Unhandled Rejection', errorDetails);
});
function highlightCodeInPreElements() {
  return _highlightCodeInPreElements.apply(this, arguments);
}
function _highlightCodeInPreElements() {
  _highlightCodeInPreElements = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
    var extractLanguageFromUrl, preElements, fragment;
    return _regeneratorRuntime().wrap(function _callee13$(_context14) {
      while (1) switch (_context14.prev = _context14.next) {
        case 0:
          extractLanguageFromUrl = function extractLanguageFromUrl(url) {
            try {
              var match = url.match(/\.([a-zA-Z0-9]+)(?:[\?#]|$)/);
              return match ? match[1] : 'json';
            } catch (error) {
              console.error('Error extracting language from URL:', error);
              return 'json';
            }
          };
          try {
            preElements = Array.from(document.querySelectorAll('pre'));
            fragment = document.createDocumentFragment();
            preElements.forEach(function (pre) {
              if (!pre.querySelector('code')) {
                var language = extractLanguageFromUrl(location.href);
                if (/^[a-zA-Z\-]+$/.test(language)) {
                  var newCodeElement = document.createElement('code');
                  newCodeElement.className = "language-".concat(language);
                  newCodeElement.textContent = pre.textContent;
                  fragment.appendChild(newCodeElement);
                  pre.textContent = '';
                  pre.appendChild(newCodeElement);
                }
              }
            });
            requestAnimationFrame(function () {
              document.body.appendChild(fragment);
              preElements.forEach(function (pre) {
                var codeElement = pre.querySelector('code');
                if (codeElement) {
                  window.hljs.highlightElement(codeElement);

                  // Add the language label if it doesn't already exist
                  if (!codeElement.nextElementSibling || !codeElement.nextElementSibling.classList.contains('highlight-language')) {
                    var language = codeElement.result ? codeElement.result.language : 'plaintext';
                    var languageLabel = document.createElement('span');
                    languageLabel.className = 'highlight-language';
                    languageLabel.textContent = "Language: ".concat(language);
                    pre.appendChild(languageLabel);
                  }
                }
              });
            });
          } catch (error) {
            my_debugger.showError('Error highlighting code in <pre> elements:', error);
          }
        case 2:
        case "end":
          return _context14.stop();
      }
    }, _callee13);
  }));
  return _highlightCodeInPreElements.apply(this, arguments);
}
var my_debugger = {};
my_debugger.showError = function (message) {
  var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var timestamp = new Date().toISOString();
  var logEntry = _objectSpread({
    timestamp: timestamp,
    message: message
  }, error ? {
    error: {
      message: error.message || 'Unknown error',
      stack: error.stack || 'No stack trace available',
      name: error.name || 'Error'
    }
  } : {});

  // if (isDevelopment) {
  // In development, log everything with more details
  console.error(JSON.stringify(logEntry, null, 2));
};

// 确保模板只插入一次
if (!document.querySelector('.toast-container')) {
  document.body.insertAdjacentHTML('beforeend', "\n    <!-- Toast Container -->\n    <div class=\"toast-container position-fixed bottom-0 end-0 p-3\" style=\"z-index: 1111100; transform: translate3d(0px, 36px, 0px);\">\n      <div id=\"programToast\" class=\"toast\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n        <div class=\"toast-header\">\n          <span id=\"toastIcon\" class=\"me-2\"></span>\n          <strong id=\"toastTitle\" class=\"me-auto\"></strong>\n          <small id=\"toastTimeDiff\" class=\"text-muted\"></small>\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\n        </div>\n        <div class=\"toast-body\">\n          <span id=\"toastMessage\"></span>\n          <div id=\"toastButtons\" class=\"mt-2 pt-2 border-top d-flex gap-2\"></div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Modal Template -->\n    <div class=\"modal fade\" id=\"notificationModal\" tabindex=\"-1\" aria-labelledby=\"modalTitle\" aria-hidden=\"true\">\n      <div class=\"modal-dialog modal-dialog-centered\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\" id=\"modalTitle\"></h5>\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n          </div>\n          <div class=\"modal-body\" id=\"modalBody\" style=\"\n    max-height: 30rem;\n    overflow: auto;\n\"></div>\n          <div class=\"modal-footer\" id=\"modalFooter\"></div>\n        </div>\n      </div>\n    </div>\n  ");
}
var currentNotifications = []; // 当前显示的通知队列
var maxNotifications = 3; // 最大允许同时显示的通知数量
/**
 * Configuration object for notification icons and colors
 * @type {Object}
 */
var notificationConfig = {
  icons: {
    info: '📝',
    success: '✅',
    warning: '⚠️',
    error: '❌'
  },
  colors: {
    info: '#0dcaf0',
    success: '#198754',
    warning: '#ffc107',
    error: '#dc3545'
  }
};

/**
 * Shows a notification using either toast or modal
 * @param {string} title - The notification title
 * @param {string} message - The notification message
 * @param {NotificationOptions} [options={}] - Configuration options
 * @returns {bootstrap.Toast|bootstrap.Modal|null} The notification instance (toast or modal)
 * @throws {Error} When required DOM elements are not found
 * @example
 * // Show a simple toast notification
 * showNotification('Hello', 'This is a message');
 *
 * // Show a success modal with custom buttons
 * showNotification('Success', 'Operation completed', {
 *   type: 'success',
 *   modal: true,
 *   buttons: [{
 *     text: 'Continue',
 *     onClick: () => console.log('Continued')
 *   }]
 * });
 */
function showNotification(title, message) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaults = {
    type: 'info',
    duration: 3000,
    position: 'end-0',
    animate: true,
    dismissible: true,
    buttons: [],
    modal: false,
    size: 'medium',
    html: false,
    triggerTime: Date.now() // 记录触发时间
  };
  var config = _objectSpread(_objectSpread({}, defaults), options);

  // 如果当前通知数量超过最大值，移除最早的弹窗
  if (currentNotifications.length >= maxNotifications) {
    var oldestNotification = currentNotifications.shift();
    if (oldestNotification) {
      oldestNotification.hide();
    }
  }
  // 处理模态框通知
  if (config.modal) {
    var modalInstance = showModalNotification(title, message, config);
    if (modalInstance) {
      currentNotifications.push(modalInstance);
      modalInstance._element.addEventListener('hidden.bs.modal', function () {
        var index = currentNotifications.indexOf(modalInstance);
        if (index !== -1) {
          currentNotifications.splice(index, 1);
        }
      });
    }
    return modalInstance;
  }

  // 处理吐司通知
  var toastInstance = showToastNotification(title, message, config);
  if (toastInstance) {
    currentNotifications.push(toastInstance);
    toastInstance._element.addEventListener('hidden.bs.toast', function () {
      var index = currentNotifications.indexOf(toastInstance);
      if (index !== -1) {
        currentNotifications.splice(index, 1);
      }
    });
  }
  return toastInstance;
}

/**
 * Shows a toast notification
 * @private
 * @param {string} title - The toast title
 * @param {string} message - The toast message
 * @param {NotificationOptions} config - Configuration options
 * @returns {bootstrap.Toast|null} The toast instance or null if failed
 */
function showToastNotification(title, message, config) {
  try {
    var toastEl = document.getElementById('programToast');
    if (!toastEl) throw new Error('Toast element not found');

    // Create a new toast element if the existing one is showing
    if (toastEl.classList.contains('show')) {
      var newToastEl = toastEl.cloneNode(true);
      newToastEl.removeAttribute('id');
      document.querySelector('.toast-container').appendChild(newToastEl);
      toastEl = newToastEl;
    }
    // Create Bootstrap toast instance
    var toastInstance = new bootstrap.Toast(toastEl, {
      animation: config.animate,
      autohide: config.duration !== false,
      delay: config.duration
    });

    // Get elements
    var iconEl = document.getElementById('toastIcon');
    var titleEl = document.getElementById('toastTitle');
    var messageEl = document.getElementById('toastMessage');
    var buttonContainer = document.getElementById('toastButtons');
    var closeBtn = toastEl.querySelector('.btn-close');

    // Set content
    if (iconEl) {
      iconEl.textContent = notificationConfig.icons[config.type];
      iconEl.style.color = notificationConfig.colors[config.type];
    }
    if (titleEl) titleEl.textContent = title;
    if (messageEl) {
      if (config.html) {
        messageEl.innerHTML = message;
      } else {
        messageEl.textContent = message;
      }
    }

    // Handle buttons
    if (buttonContainer) {
      buttonContainer.innerHTML = '';
      if (config.buttons && config.buttons.length > 0) {
        config.buttons.forEach(function (button) {
          var btnElement = document.createElement('button');
          btnElement.textContent = button.text;
          btnElement.className = button["class"] || 'btn btn-sm btn-primary';
          btnElement.onclick = function () {
            if (button.onClick) button.onClick();
            if (button.closeOnClick !== false) {
              toastInstance.hide();
            }
          };
          buttonContainer.appendChild(btnElement);
        });
        buttonContainer.style.display = 'flex';
      } else {
        buttonContainer.style.display = 'none';
      }
    }

    // Handle close button
    if (closeBtn) {
      closeBtn.style.display = config.dismissible ? 'block' : 'none';
    }
    var timeDiffEl = document.getElementById('toastTimeDiff');
    timeDiffEl.textContent = '刚刚';
    var intervalId = setInterval(function () {
      timeDiffEl.textContent = calculateTimeDifference(Date.now(), config.triggerTime);
    }, 1000);
    toastInstance._element.addEventListener('hidden.bs.toast', function () {
      return clearInterval(intervalId);
    });
    toastInstance.show();
    return toastInstance;
  } catch (error) {
    my_debugger.showError('Failed to show toast notification:', error);
    return null;
  }
}

/**
 * Shows a modal notification
 * @private
 * @param {string} title - The modal title
 * @param {string} message - The modal message
 * @param {NotificationOptions} config - Configuration options
 * @returns {bootstrap.Modal|null} The modal instance or null if failed
 */
function showModalNotification(title, message, config) {
  try {
    var _config$dismissible;
    // Ensure config.dismissible is always boolean
    config.dismissible = Boolean((_config$dismissible = config.dismissible) !== null && _config$dismissible !== void 0 ? _config$dismissible : true); // defaults to true if undefined
    var modalEl = document.getElementById('notificationModal');
    if (!modalEl) throw new Error('Modal element not found');

    // Get modal elements
    var titleEl = modalEl.querySelector('#modalTitle');
    var bodyEl = modalEl.querySelector('#modalBody');
    var footerEl = modalEl.querySelector('#modalFooter');
    var closeBtn = modalEl.querySelector('.btn-close');
    var dialogEl = modalEl.querySelector('.modal-dialog');

    // Set modal size
    dialogEl.className = "modal-dialog modal-dialog-centered ".concat(config.size === 'large' ? 'modal-lg' : config.size === 'small' ? 'modal-sm' : '');

    // Set content
    if (titleEl) {
      titleEl.innerHTML = "".concat(notificationConfig.icons[config.type], " ").concat(title);
    }
    if (bodyEl) {
      if (config.html) {
        bodyEl.innerHTML = message;
      } else {
        bodyEl.textContent = message;
      }
    }

    // Handle buttons
    if (footerEl) {
      footerEl.innerHTML = config.dismissible ? '<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>' : '';
      if (config.buttons.length > 0) {
        config.buttons.forEach(function (button) {
          var btnElement = document.createElement('button');
          btnElement.textContent = button.text;
          btnElement.className = button["class"] || 'btn btn-primary';
          btnElement.onclick = function () {
            if (button.onClick) button.onClick();
            if (button.closeOnClick !== false) {
              modalInstance.hide();
            }
          };
          footerEl.appendChild(btnElement);
        });
      }
    }

    // Handle close button
    if (closeBtn) {
      closeBtn.style.display = config.dismissible ? 'block' : 'none';
    }

    // Create and show modal
    var modalInstance = new bootstrap.Modal(modalEl, {
      backdrop: config.dismissible ? true : 'static',
      keyboard: config.dismissible || false
    });
    modalInstance.show();
    return modalInstance;
  } catch (error) {
    my_debugger.showError('Failed to show modal notification:', error);
    return null;
  }
}

/**
 * Calculates the time difference between two dates
 * @param {Date} now - The current date
 * @param {Date} triggerTime - The trigger time of the notification
 * @returns {string} The formatted time difference
 */
function calculateTimeDifference(now, triggerTime) {
  var diff = now - triggerTime;
  var seconds = Math.floor(diff / 1000);
  var minutes = Math.floor(seconds / 60);
  var hours = Math.floor(minutes / 60);
  var days = Math.floor(hours / 24);
  if (seconds < 60) return "".concat(seconds, "\u79D2\u524D");
  if (minutes < 60) return "".concat(minutes, "\u5206\u949F\u524D");
  if (hours < 24) return "".concat(hours, "\u5C0F\u65F6\u524D");
  if (days < 7) return "".concat(days, "\u5929\u524D");
  return '刚刚';
}
var ThemeConfigForm = /*#__PURE__*/function () {
  function ThemeConfigForm() {
    _classCallCheck(this, ThemeConfigForm);
    this.themeConfig = {
      themeColors: {
        low: [{
          color: 'whi',
          per: '30%'
        }, {
          color: 'red',
          per: '70%'
        }],
        mid: [{
          color: 'yel',
          per: '20%'
        }, {
          color: 'ora',
          per: '30%'
        }, {
          color: 'sky',
          per: '20%'
        }, {
          color: 'red',
          per: '30%'
        }],
        high: [{
          color: 'ora',
          per: '40%'
        }, {
          color: 'red',
          per: '60%'
        }],
        accent: [{
          color: 'sky',
          per: '50%'
        }, {
          color: 'yel',
          per: '50%'
        }],
        base: 'red'
      }
    };
    this.sections = ['low', 'mid', 'high', 'accent'];
  }
  return _createClass(ThemeConfigForm, [{
    key: "_addEventListeners",
    value: function _addEventListeners() {
      var _this = this;
      // Add Color buttons
      document.querySelectorAll('.add-color-btn').forEach(function (button) {
        button.addEventListener('click', function (e) {
          var section = e.currentTarget.dataset.section;
          _this.addColorItem(section);
        });
      });

      // Export button
      var exportBtn = document.querySelector('#themeConfig_exportConfig');
      if (exportBtn) {
        exportBtn.addEventListener('click', function () {
          return _this.exportConfig();
        });
      }

      // Import input
      var importInput = document.querySelector('#themeConfig_importConfig');
      if (importInput) {
        importInput.addEventListener('change', function (e) {
          return _this.importConfig(e.target);
        });
      }
      var saveInput = document.querySelector('#themeConfig_saveConfig');
      if (saveInput) {
        saveInput.addEventListener('click', function (e) {
          return _this.saveConfig();
        });
      }
    }
  }, {
    key: "createSectionContainers",
    value: function createSectionContainers() {
      var colorSections = document.getElementById('colorSections');
      if (!colorSections) return;
      colorSections.innerHTML = ''; // Clear existing content

      this.sections.forEach(function (section) {
        var sectionDiv = document.createElement('div');
        sectionDiv.className = 'mb-4';
        sectionDiv.innerHTML = "\n            <div class=\"d-flex justify-content-between align-items-center mb-2\">\n                <h6 class=\"text-capitalize mb-0\">".concat(section, " Colors</h6>\n                <button type=\"button\" class=\"btn btn-sm btn-outline-primary add-color-btn\" data-section=\"").concat(section, "\">\n                    <i class=\"material-icons\">add</i>\u6DFB\u52A0\u989C\u8272\n                </button>\n            </div>\n            <div id=\"").concat(section, "Colors\" class=\"color-items\">\n            </div>\n        ");
        colorSections.appendChild(sectionDiv);
      });

      // Add event listeners to the newly created buttons
      this._addEventListeners();
    }
  }, {
    key: "renderColorItems",
    value: function renderColorItems(section) {
      var _this2 = this;
      var container = document.getElementById("".concat(section, "Colors"));
      if (!container) {
        my_debugger.showError("Container for ".concat(section, " not found"));
        return;
      }
      container.innerHTML = '';

      // 先显示总百分比
      var totalPercentageDiv = document.createElement('div');
      totalPercentageDiv.id = "".concat(section, "TotalPercentage");
      totalPercentageDiv.className = 'total-percentage';
      container.appendChild(totalPercentageDiv); // 在列表上方添加总和显示
      this.calculateTotalPercentage(section); // 计算并显示总和

      this.themeConfig.themeColors[section].forEach(function (item, index) {
        var itemDiv = document.createElement('div');
        itemDiv.className = 'row mb-2 align-items-center';
        itemDiv.innerHTML = "\n            <div class=\"col\">\n                ".concat(_this2.createColorSelect(section, index, item.color).outerHTML, "\n            </div>\n            <div class=\"col d-flex\">\n                <div class=\"input-group flex-grow-1\">\n                    <input type=\"number\" class=\"form-control percentage-input\"\n                           value=\"").concat(parseInt(item.per, 10), "\"\n                           min=\"0\" max=\"100\"\n                           data-section=\"").concat(section, "\"\n                           data-index=\"").concat(index, "\">\n                    <span class=\"input-group-text\">%</span>\n                </div>\n            </div>\n            <div class=\"col-auto\">\n                <button type=\"button\" class=\"btn btn-xs btn-outline-danger remove-color-btn\"\n                        data-section=\"").concat(section, "\"\n                        data-index=\"").concat(index, "\">\n                    <i class=\"material-icons\">delete</i>\u5220\u9664\n                </button>\n            </div>\n        ");
        container.appendChild(itemDiv);
        // Add event listeners to the newly created elements
        var select = itemDiv.querySelector('select');
        select.value = item.color;
        select.onchange = function (e) {
          if (index == null) {
            _this2.themeConfig.themeColors.base = e.target.value;
          } else {
            _this2.updateColor(section, index, e.target.value);
          }
        };
      });
      // Remove Color buttons
      document.querySelectorAll('.remove-color-btn').forEach(function (button) {
        button.addEventListener('click', function (e) {
          var _e$currentTarget$data = e.currentTarget.dataset,
            section = _e$currentTarget$data.section,
            index = _e$currentTarget$data.index;
          _this2.removeColorItem(section, parseInt(index));
        });
      });

      // Percentage inputs
      document.querySelectorAll('.percentage-input').forEach(function (input) {
        input.addEventListener('change', function (e) {
          var _e$currentTarget$data2 = e.currentTarget.dataset,
            section = _e$currentTarget$data2.section,
            index = _e$currentTarget$data2.index;
          _this2.updatePercentage(section, parseInt(index), e.target.value);
        });
      });
    }
  }, {
    key: "createColorSelect",
    value: function createColorSelect(section, index, currentValue) {
      var _this3 = this;
      var div = document.createElement('div');
      div.className = 'd-flex align-items-center';

      // 获取颜色的 hex 值
      var hexColor = ColorManager.COLOR_TO_HEX[currentValue];

      // 创建颜色样本 (Swatch)
      var swatch = document.createElement('span');
      swatch.className = 'swatch';
      swatch.title = hexColor; // 鼠标悬停时显示颜色代码
      swatch.style.backgroundColor = hexColor; // 设置背景色为当前颜色的 hex 值

      // 创建下拉选择框
      var select = document.createElement('select');
      select.className = 'form-select';

      // 填充颜色选择框
      Object.values(ColorManager.AVAILABLE_COLORS).forEach(function (color) {
        var option = document.createElement('option');
        option.value = color;
        option.textContent = color.toUpperCase();
        option.selected = color === currentValue;
        select.appendChild(option);
      });

      // 当选择改变时，更新颜色样本 (Swatch) 和选中的颜色
      select.addEventListener('change', function (e) {
        var newColor = e.target.value;
        var newHexColor = ColorManager.COLOR_TO_HEX[newColor];

        // 更新对应颜色项的 swatch 背景色
        swatch.style.backgroundColor = newHexColor;
        swatch.title = newHexColor;

        // 更新配置中的颜色
        index !== null && _this3.updateColor(section, index, newColor);
      });

      // 将 Swatch 和 Select 插入 div 中
      div.appendChild(swatch);
      div.appendChild(select);
      return div;
    }

    // 添加颜色项，增加校验总和
  }, {
    key: "addColorItem",
    value: function addColorItem(section) {
      var totalPercentage = this.calculateTotalPercentage(section);
      if (totalPercentage === 100) {
        showNotification('无法添加更多颜色！ 🎨', '该部分的颜色百分比已满（100%），无法添加更多颜色', {
          type: 'warning',
          duration: 3000
        });
        return;
      }

      // 如果已达到最大百分比限制，禁止添加新颜色
      if (this.themeConfig.themeColors[section].length >= 10) {
        showNotification('最多只能添加10个颜色！ ⚠️', '每个部分的颜色数量已达上限', {
          type: 'warning',
          duration: 3000
        });
        return;
      }
      this.themeConfig.themeColors[section].push({
        color: ColorManager.COLORS.BLU,
        per: '1%'
      }); // 设置最小1%的百分比
      this.renderColorItems(section);
      this.validatePercentages(section);
      showNotification('颜色已添加! ✨', '新的颜色选项已添加到您的调色板', {
        type: 'success',
        duration: 2000
      });
    }
  }, {
    key: "removeColorItem",
    value: function removeColorItem(section, index) {
      this.themeConfig.themeColors[section].splice(index, 1);
      if (this.themeConfig.themeColors[section].length === 0) {
        this.addColorItem(section);
      }
      this.renderColorItems(section);
      this.validatePercentages(section);
      showNotification('颜色已移除! 🗑️', '该颜色已从调色板中移除', {
        type: 'info',
        duration: 2000
      });
    }
  }, {
    key: "updateColor",
    value: function updateColor(section, index, value) {
      this.themeConfig.themeColors[section][index].color = value;
      // 调用渲染方法来重新计算总百分比并更新显示
      this.calculateTotalPercentage(section);
      this.renderColorItems(section);
    }

    // 更新百分比，避免出现0%的情况
  }, {
    key: "updatePercentage",
    value: function updatePercentage(section, index, value) {
      var percentage = parseInt(value, 10);
      if (percentage === 0) {
        showNotification('无效百分比! ⚠️', '百分比不能为0，请设置一个大于0的值', {
          type: 'error',
          duration: 3000
        });
        return;
      }
      this.themeConfig.themeColors[section][index].per = "".concat(percentage, "%");
      this.validatePercentages(section);
      this.calculateTotalPercentage(section);
      showNotification('百分比已更新！📊', '您的颜色分布已更新', {
        type: 'success',
        duration: 2000
      });
    }
  }, {
    key: "calculateTotalPercentage",
    value: function calculateTotalPercentage(section) {
      var items = this.themeConfig.themeColors[section];
      var total = items.reduce(function (sum, item) {
        return sum + parseInt(item.per, 10);
      }, 0);
      this.updatePercentageDisplay(section, total); // 更新显示
      return total;
    }
  }, {
    key: "updatePercentageDisplay",
    value: function updatePercentageDisplay(section, total) {
      var totalDisplay = document.getElementById("".concat(section, "TotalPercentage"));
      if (totalDisplay) {
        totalDisplay.textContent = "\u603B\u767E\u5206\u6BD4: ".concat(total, "%");
      }
    }
  }, {
    key: "validatePercentages",
    value: function validatePercentages(section) {
      var items = this.themeConfig.themeColors[section];
      var total = items.reduce(function (sum, item) {
        return sum + parseInt(item.per, 10);
      }, 0);
      var rest = 100 - total;
      if (total > 100) {
        showNotification('快速检查! 🎨', "".concat(section, "\u4E2D\u7684\u989C\u8272\u8D85\u8FC7100%\u3002\u8BF7\u51CF\u5C11").concat(total - 100, "%\u3002"), {
          type: 'warning',
          duration: 4000,
          dismissible: true
        });
        return false;
      } else if (total < 100) {
        showNotification('快速检查! 🎨', "".concat(section, "\u4E2D\u7684\u989C\u8272\u52A0\u8D77\u6765\u5E94\u8BE5\u662F100! \u73B0\u5728\u5B83\u4EEC\u5904\u4E8E ").concat(total, "% (").concat(rest, "% \u5269\u4F59)\u3002"), {
          type: 'warning',
          duration: 4000,
          dismissible: true
        });
        return false;
      } else if (total === 100) {
        return true;
      }
      showNotification('错误', '出了一点问题，请再试一次。', {
        type: 'error',
        duration: 5000
      });
      return false;
    }
  }, {
    key: "exportConfig",
    value: function exportConfig() {
      var _this4 = this;
      // Validate all sections before export
      var isValid = ['low', 'mid', 'high', 'accent'].every(function (section) {
        return _this4.validatePercentages(section);
      });
      if (!isValid) return;
      var configString = JSON.stringify(this.themeConfig, null, 2);
      var blob = new Blob([configString], {
        type: 'application/json'
      });

      // 使用 FileSaver.js 的 saveAs 来直接保存文件
      window.saveAs(blob, 'theme-config.json');

      // 显示导出成功通知
      showNotification('已导出！📤', '你的颜色设置已成功导出', {
        type: 'success',
        duration: 3000
      });
    }
  }, {
    key: "saveConfig",
    value: function saveConfig() {
      var _this5 = this;
      // Validate all sections before export
      var isValid = ['low', 'mid', 'high', 'accent'].every(function (section) {
        return _this5.validatePercentages(section);
      });
      if (!isValid) return;
      window.AudioAnalyzer && window.AudioAnalyzer.handleThemeChange_manual(this.themeConfig) && showNotification('已保存！💫', '你的颜色偏好已更新', {
        type: 'success'
      });

      /////////
    }
  }, {
    key: "importConfig",
    value: function importConfig(input) {
      var _this6 = this;
      var file = input.files[0];
      if (!file) return;
      var reader = new FileReader();
      reader.onload = function (e) {
        try {
          var imported = JSON.parse(e.target.result);

          // Validate imported colors
          var isValid = _this6.validateImportedConfig(imported);
          if (!isValid) {
            throw new Error('Invalid color codes in imported configuration');
          }
          _this6.themeConfig = imported;
          _this6.initializeForm();
          showNotification('已导入！📥', '你的颜色偏好已成功导入', {
            type: 'success',
            duration: 3000
          });
          _this6.saveConfig();
        } catch (error) {
          showNotification('错误', '出了一点问题，请再试一次。', {
            type: 'error',
            duration: 5000
          });
        }
      };
      reader.readAsText(file);
    }
  }, {
    key: "validateImportedConfig",
    value: function validateImportedConfig(config) {
      var validColors = Object.values(ColorManager.COLORS);
      var sections = ['low', 'mid', 'high', 'accent'];

      // Validate base color
      if (!validColors.includes(config.themeColors.base)) {
        showNotification('配置无效', '基础颜色无效', {
          type: 'error',
          duration: 5000
        });
        return false;
      }

      // Validate section colors
      for (var _i = 0, _sections = sections; _i < _sections.length; _i++) {
        var section = _sections[_i];
        if (!config.themeColors[section]) {
          showNotification('配置无效', "\u7F3A\u5C11\u90E8\u5206\uFF1A".concat(section), {
            type: 'error',
            duration: 5000
          });
          return false;
        }
        var _iterator = _createForOfIteratorHelper(config.themeColors[section]),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var item = _step.value;
            if (!validColors.includes(item.color)) {
              showNotification('配置无效', "".concat(section, " \u90E8\u5206\u989C\u8272\u65E0\u6548"), {
                type: 'error',
                duration: 5000
              });
              return false;
            }
            if (typeof item.per !== 'string') {
              showNotification('配置无效', "".concat(section, " \u90E8\u5206\u767E\u5206\u6BD4\u683C\u5F0F\u65E0\u6548"), {
                type: 'error',
                duration: 5000
              });
              return false;
            }
            var percentage = parseInt(item.per, 10);
            if (isNaN(percentage) || percentage < 0 || percentage > 100) {
              showNotification('配置无效', "".concat(section, " \u90E8\u5206\u767E\u5206\u6BD4\u503C\u65E0\u6548"), {
                type: 'error',
                duration: 5000
              });
              return false;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      return true;
    }
  }, {
    key: "initializeForm",
    value: function initializeForm() {
      var _this7 = this;
      // First create base color select
      var baseContainer = document.getElementById('baseColorContainer');
      if (baseContainer) {
        baseContainer.innerHTML = '';
        var baseSelect = this.createColorSelect('base', null, this.themeConfig.themeColors.base);
        baseContainer.appendChild(baseSelect);
        baseSelect.onchange = function (e) {
          console.log('e: ', e);
          _this7.themeConfig.themeColors.base = e.target.value;
        };
      }

      // Then create section containers and render items
      this.createSectionContainers();
      this.sections.forEach(function (section) {
        _this7.renderColorItems(section);
      });
    }
  }]);
}();
/**
 *
 * @param {string} data
 * @example [length: 03:36]
 * @return {<Array>{string}} ['length', '03:06']
 */
function extractInfo(lrcData) {
  var tags = {};
  var lines = lrcData.split(/\r\n|\n|\r/);
  lines.forEach(function (line) {
    var match = line.match(/\[(\w+):(.+)\]/);
    if (match) {
      var _match = _slicedToArray(match, 3),
        _ = _match[0],
        key = _match[1],
        value = _match[2];
      tags[key] = value.trim();
    }
  });
  return tags;
}
function lrcParser(data) {
  if (typeof data !== 'string') {
    throw new TypeError('expect first argument to be a string');
  }
  // split a long stirng into lines by system's end-of-line marker line \r\n on Windows
  // or \n on POSIX
  var lines = data.split('\n');
  var timeStart = /\[(\d*\:\d*\.?\d*)\]/; // i.g [00:10.55]
  var scriptText = /(.+)/; // Havana ooh na-na (ayy)
  var timeEnd = timeStart;
  var startAndText = new RegExp(timeStart.source + scriptText.source);
  var infos = [];
  var scripts = [];
  var result = {};
  for (var i = 0; startAndText.test(lines[i]) === false; i++) {
    infos.push(lines[i]);
  }

  // infos.reduce((result, info) => {
  //   const [key, value] = extractInfo(info);
  //   result[key] = value;
  //   return result;
  // }, result);
  result.infos = extractInfo(data);
  lines.splice(0, infos.length); // remove all info lines
  var qualified = new RegExp(startAndText.source + '|' + timeEnd.source);
  lines = lines.filter(function (line) {
    return qualified.test(line);
  });
  for (var _i2 = 0, l = lines.length; _i2 < l; _i2++) {
    var matches = startAndText.exec(lines[_i2]);
    var timeEndMatches = timeEnd.exec(lines[_i2 + 1]);
    if (matches && timeEndMatches) {
      var _matches = _slicedToArray(matches, 3),
        start = _matches[1],
        text = _matches[2];
      var _timeEndMatches = _slicedToArray(timeEndMatches, 2),
        end = _timeEndMatches[1];
      scripts.push({
        start: convertTime(start),
        text: text,
        end: convertTime(end)
      });
    }
  }
  result.scripts = scripts;
  return result;
}

// convert time string to seconds
// i.g: [01:09.10] -> 69.10
function convertTime(string) {
  string = string.split(':');
  var minutes = parseInt(string[0], 10);
  var seconds = parseFloat(string[1]);
  if (minutes > 0) {
    var sc = minutes * 60 + seconds;
    return parseFloat(sc.toFixed(2));
  }
  return seconds;
}

/*
 * generate-tool
 */


var AudioAnalyzer = /*#__PURE__*/function () {
  function AudioAnalyzer() {
    _classCallCheck(this, AudioAnalyzer);
    this.state = {
      audioContext: null,
      isAnalyzing: false,
      audioBuffer: null,
      metadata: null,
      lyrics: null,
      themeColors: null
    };
    this.setupEventListeners();
    // 控制状态显示的函数
    this.showStatusNotStarted = function () {
      document.getElementById('statusNotStarted').classList.remove('d-none');
      document.getElementById('statusProcessing').classList.add('d-none');
      document.getElementById('statusCompleted').classList.add('d-none');
    };
    this.showStatusProcessing = function () {
      document.getElementById('statusNotStarted').classList.add('d-none');
      document.getElementById('statusProcessing').classList.remove('d-none');
      document.getElementById('statusCompleted').classList.add('d-none');
    };
    this.showStatusCompleted = function () {
      document.getElementById('statusNotStarted').classList.add('d-none');
      document.getElementById('statusProcessing').classList.add('d-none');
      document.getElementById('statusCompleted').classList.remove('d-none');
    };
  }
  return _createClass(AudioAnalyzer, [{
    key: "setupEventListeners",
    value: function setupEventListeners() {
      var _this8 = this;
      document.getElementById('audioFileInput_generate_tool').addEventListener('change', function (e) {
        return _this8.handleAudioFileSelect(e);
      });
      document.getElementById('lrcFileInput_generate_tool').addEventListener('change', function (e) {
        return _this8.handleLrcFileSelect(e);
      });

      // Analysis button
      document.getElementById('generate-btn').addEventListener('click', function () {
        return _this8.startAnalysis();
      });
      document.getElementById('copy-btn').addEventListener('click', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var content;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              content = document.getElementById('output-result').value;
              _context.next = 4;
              return navigator.clipboard.writeText(content);
            case 4:
              showNotification('耶！', '📋 已复制到剪贴板！', {
                type: 'success',
                duration: 3000
              });
              _context.next = 11;
              break;
            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](0);
              my_debugger.showError('Failed to copy:', _context.t0);
              showNotification('哎呀！', '📋 无法复制到剪贴板！', {
                type: 'error',
                duration: 5000
              });
            case 11:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 7]]);
      })));
      document.getElementById('download-btn').addEventListener('click', function () {
        try {
          var content = document.getElementById('output-result').value;
          if (!content.trim() || !content.replace(/\s/g, '')) {
            showNotification('检查一下！💭', '还没有内容可以下载。先添加一些内容吧！', {
              type: 'warning',
              duration: 4000
            });
            return;
          }
          if (Timeline.parse(content).errors.length) {
            showNotification('哎哟! 🤔', '预设代码无效，请检查内容!\n' + Timeline.parse(content).errors, {
              type: 'error',
              duration: 5000
            });
            return;
          }

          // 转义用户输入，防止XSS攻击
          var escapedContent = content.replace(/</g, '&lt;').replace(/>/g, '&gt;');

          // 使用 FileSaver.js 的 saveAs 方法来保存文件
          var blob = new Blob([escapedContent], {
            type: 'text/plain;charset=utf-8'
          });

          // 文件保存
          window.saveAs(blob, 'converted-output.txt');

          // 添加成功通知
          showNotification('开始下载！✨', '你的文件正在下载中', {
            type: 'success',
            duration: 3000
          });
        } catch (error) {
          // 添加错误通知
          showNotification('Oops! 🤔', 'There was a problem downloading your file. Please try again.', {
            type: 'error',
            duration: 5000,
            dismissible: true
          });

          // 确保my_debugger.showError存在
          if (typeof my_debugger !== 'undefined' && typeof my_debugger.showError === 'function') {
            my_debugger.showError('Download error:', error);
          } else {
            console.error('Download error:', error);
          }
        }
      });
    }
  }, {
    key: "checkFileFormat",
    value: function checkFileFormat(file) {
      var _file$name$toLowerCas;
      // prettier-ignore
      var supportedFormats = ['.aac', '.flac', '.mp3', '.wav', '.ogg', '.m4a'];
      var fileExtension = (_file$name$toLowerCas = file.name.toLowerCase().match(/\.[^.]*$/)) === null || _file$name$toLowerCas === void 0 ? void 0 : _file$name$toLowerCas[0];
      if (!supportedFormats.includes(fileExtension)) {
        showNotification('文件类型检查 ⚠️', '为了获得最佳效果，请使用 AAC、FLAC、MP3、WAV、OGG 或 M4A 文件！', {
          type: 'warning',
          duration: 4000,
          dismissible: true
        });
        return false;
      }
      return true;
    }
  }, {
    key: "getMetadata",
    value: function () {
      var _getMetadata = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(audioBuffer) {
        var _yield$guess, bpm, offset, sampleRate, duration;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return (0,web_audio_beat_detector__WEBPACK_IMPORTED_MODULE_0__.guess)(audioBuffer);
            case 3:
              _yield$guess = _context2.sent;
              bpm = _yield$guess.bpm;
              offset = _yield$guess.offset;
              // 假设其他元数据无法从 web-audio-beat-detector 中获取，设置默认值
              sampleRate = audioBuffer.sampleRate || 44100;
              duration = audioBuffer.duration || 0;
              showNotification('音频解析完成！🎵', "\u627E\u5230 ".concat(bpm, " BPM\uFF0C\u65F6\u957F: ").concat(this.formatDuration(duration), "\uFF0C\u504F\u79FB: ").concat(offset.toFixed(2), " \u79D2"), {
                type: 'success',
                duration: 4000
              });
              console.log({
                bpm: bpm,
                sampleRate: sampleRate,
                duration: duration,
                offset: offset
              });
              return _context2.abrupt("return", {
                bpm: bpm,
                sampleRate: sampleRate,
                duration: duration,
                offset: offset
              });
            case 13:
              _context2.prev = 13;
              _context2.t0 = _context2["catch"](0);
              if (_context2.t0.message.includes('Cannot use a BYOB reader with a non-byte stream')) {
                showNotification('浏览器不支持 🚀', '当前浏览器不支持此功能，请尝试使用 Chrome 或 Firefox 浏览器。', {
                  type: 'error',
                  duration: 5000,
                  modal: true,
                  html: false,
                  dismissible: true
                });
              } else {
                showNotification('音频解析问题 🎧', '无法解析这个音频文件。请尝试不同的格式。', {
                  type: 'error',
                  duration: 5000,
                  dismissible: true
                });
              }
              my_debugger.showError("Error parsing metadata: ".concat(_context2.t0.message), _context2.t0);
              throw _context2.t0;
            case 18:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[0, 13]]);
      }));
      function getMetadata(_x) {
        return _getMetadata.apply(this, arguments);
      }
      return getMetadata;
    }()
  }, {
    key: "handleAudioFileSelect",
    value: function () {
      var _handleAudioFileSelect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(event) {
        var file, arrayBuffer;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              file = event.target.files[0];
              if (!(!file || !this.checkFileFormat(file))) {
                _context3.next = 3;
                break;
              }
              return _context3.abrupt("return");
            case 3:
              _context3.prev = 3;
              if (!this.state.audioContext) {
                _context3.next = 7;
                break;
              }
              _context3.next = 7;
              return this.cleanup();
            case 7:
              this.state.audioContext = new (window.AudioContext || window.webkitAudioContext)();

              // 将音频文件转换为 ArrayBuffer 并解码为 AudioBuffer
              _context3.next = 10;
              return file.arrayBuffer();
            case 10:
              arrayBuffer = _context3.sent;
              _context3.next = 13;
              return this.state.audioContext.decodeAudioData(arrayBuffer);
            case 13:
              this.state.audioBuffer = _context3.sent;
              _context3.next = 16;
              return this.getMetadata(this.state.audioBuffer);
            case 16:
              this.state.metadata = _context3.sent;
              // 更新 UI
              this.updateFileInfo('audioFileInfo', file, this.state.metadata);
              this.updateAnalyzeButtonState();
              showNotification('成功', '音频文件加载成功', {
                type: 'success',
                duration: 3000
              });
              document.getElementById('processing').classList.remove('d-none');
              this.showStatusNotStarted();
              _context3.next = 29;
              break;
            case 24:
              _context3.prev = 24;
              _context3.t0 = _context3["catch"](3);
              document.getElementById('processing').classList.add('d-none');
              showNotification('错误', "\u52A0\u8F7D\u97F3\u9891\u6587\u4EF6\u51FA\u9519\uFF1A".concat(_context3.t0.message), {
                type: 'error',
                duration: 5000
              });
              my_debugger.showError("Error loading audio file: ".concat(_context3.t0.message), _context3.t0);
            case 29:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this, [[3, 24]]);
      }));
      function handleAudioFileSelect(_x2) {
        return _handleAudioFileSelect.apply(this, arguments);
      }
      return handleAudioFileSelect;
    }()
    /*
     async getMetadata(filePath) {
      console.log('filePath: ', filePath);
      try {
        let metadata = {};
        metadata = await parseBlob(filePath); // music-metadata library method: parseBlob(...)
         const bpm = metadata.common.bpm || 120;
        const format = metadata.format || {};
        const sampleRate = format.sampleRate || 44100;
        const bitrate = format.bitrate || 128000;
        const duration = format.duration || 0;
         showNotification(
          '音频解析完成！🎵',
          `找到 ${bpm} BPM，时长: ${this.formatDuration(duration)}`,
          {
            type: 'success',
            duration: 4000,
          },
        );
         return { bpm, sampleRate, bitrate, duration };
      } catch (error) {
        // music-metadata 对于某些浏览器不支持
        if (error.message.includes('Cannot use a BYOB reader with a non-byte stream')) {
          showNotification(
            '浏览器不支持 🚀',
            '当前浏览器不支持此功能，请尝试使用 Chrome 或 Firefox 浏览器。',
            {
              type: 'error',
              duration: 5000,
              modal: true,
              html: false,
              dismissible: true,
            },
          );
        } else {
          showNotification('音频解析问题 🎧', '无法解析这个音频文件。请尝试不同的格式。', {
            type: 'error',
            duration: 5000,
            dismissible: true,
          });
        }
        my_debugger.showError(`Error parsing metadata for file ${filePath}: ${error}`);
        throw error;
      }
    }
     async handleAudioFileSelect(event) {
      const file = event.target.files[0];
       if (!file && !this.checkFileFormat(file)) return;
      try {
        // Load audio file and metadata
        if (this.state.audioContext) {
          await this.cleanup();
        }
        this.state.audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const arrayBuffer = await file.arrayBuffer();
        this.state.audioBuffer = await this.state.audioContext.decodeAudioData(arrayBuffer);
        this.state.metadata = await this.getMetadata(file);
        console.log('file: ', file);
         // Update UI
        this.updateFileInfo('audioFileInfo', file, this.state.metadata);
        this.updateAnalyzeButtonState();
        showNotification('成功', '音频文件加载成功', {
          type: 'success',
          duration: 3000,
        });
        document.getElementById('processing').classList.remove('d-none');
        this.showStatusNotStarted();
      } catch (error) {
        document.getElementById('processing').classList.add('d-none');
        showNotification('错误', `加载音频文件出错：${error.message}`, {
          type: 'error',
          duration: 5000,
        });
        my_debugger.showError(`Error loading audio file: ${error.message}`, error);
      }
    }
     */
  }, {
    key: "handleLrcFileSelect",
    value: (function () {
      var _handleLrcFileSelect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(event) {
        var file, text;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              file = event.target.files[0];
              if (file) {
                _context4.next = 3;
                break;
              }
              return _context4.abrupt("return");
            case 3:
              _context4.prev = 3;
              _context4.next = 6;
              return file.text();
            case 6:
              text = _context4.sent;
              this.state.lyrics = lrcParser(text);

              // Update UI
              this.updateFileInfo('lrcFileInfo', file);
              this.updateAnalyzeButtonState();
              showNotification('成功', '加载LRC文件成功', {
                type: 'success',
                duration: 3000
              });
              _context4.next = 17;
              break;
            case 13:
              _context4.prev = 13;
              _context4.t0 = _context4["catch"](3);
              showNotification('错误', "\u52A0\u8F7DLRC\u6587\u4EF6\u51FA\u9519: ".concat(_context4.t0.message), {
                type: 'error',
                duration: 5000
              });
              my_debugger.showError("Error loading LRC file: ".concat(_context4.t0.message), _context4.t0);
            case 17:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this, [[3, 13]]);
      }));
      function handleLrcFileSelect(_x3) {
        return _handleLrcFileSelect.apply(this, arguments);
      }
      return handleLrcFileSelect;
    }())
  }, {
    key: "handleThemeChange",
    value: function () {
      var _handleThemeChange = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(event) {
        var _this9 = this;
        var file, reader;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              file = event.target.files[0];
              if (file) {
                reader = new FileReader();
                reader.onload = function (e) {
                  try {
                    var parsedData = JSON.parse(e.target.result);
                    if (!parsedData || !parsedData.themeColors) {
                      throw new Error('Invalid theme configuration format');
                    }
                    _this9.state.themeColors = parsedData.themeColors;
                    if (ColorManager.validateThemeColors(_this9.state.themeColors)) {
                      // Update UI
                      _this9.updateFileInfo('themeConfigInfo', file);
                      _this9.updateAnalyzeButtonState();
                      showNotification('成功', '主题颜色导入成功', {
                        type: 'success',
                        duration: 3000
                      });
                    } else {
                      showNotification('错误', '主题颜色配置无效', {
                        type: 'error',
                        duration: 5000
                      });
                      my_debugger.showError("Invalid theme colors configuration. - ".concat(error.message), error);
                    }
                  } catch (error) {
                    showNotification('错误', '无效的JSON格式', {
                      type: 'error',
                      duration: 5000
                    });
                  }
                };
                reader.readAsText(file);
              }
            case 2:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function handleThemeChange(_x4) {
        return _handleThemeChange.apply(this, arguments);
      }
      return handleThemeChange;
    }()
  }, {
    key: "handleThemeChange_manual",
    value: function () {
      var _handleThemeChange_manual = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(configs_json) {
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.prev = 0;
              if (!(!configs_json || !configs_json.themeColors)) {
                _context6.next = 3;
                break;
              }
              throw new Error('Invalid theme configuration format');
            case 3:
              this.state.themeColors = configs_json.themeColors;
              if (!ColorManager.validateThemeColors(this.state.themeColors)) {
                _context6.next = 9;
                break;
              }
              this.updateAnalyzeButtonState();
              showNotification('成功', '主题颜色导入成功', {
                type: 'success',
                duration: 3000
              });
              _context6.next = 10;
              break;
            case 9:
              throw new Error('Invalid theme colors configuration');
            case 10:
              _context6.next = 16;
              break;
            case 12:
              _context6.prev = 12;
              _context6.t0 = _context6["catch"](0);
              showNotification('错误', '主题颜色配置无效', {
                type: 'error',
                duration: 5000
              });
              my_debugger.showError("Invalid theme colors configuration: ".concat(_context6.t0.message), _context6.t0);
            case 16:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this, [[0, 12]]);
      }));
      function handleThemeChange_manual(_x5) {
        return _handleThemeChange_manual.apply(this, arguments);
      }
      return handleThemeChange_manual;
    }()
  }, {
    key: "updateFileInfo",
    value: function updateFileInfo(elementId, file) {
      var metadata = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      try {
        var infoElement = document.getElementById(elementId);
        var info = "\u6587\u4EF6\u540D: ".concat(file.name, "<br>\u5927\u5C0F: ").concat(this.formatFileSize(file.size));
        if (metadata) {
          info += "<br>\u65F6\u957F: ".concat(this.formatDuration(metadata.duration));
          info += "<br>\u91C7\u6837\u7387: ".concat(metadata.sampleRate, "Hz");

          // Success notification when metadata is loaded
          showNotification('音频信息准备就绪 🎵', "\u6210\u529F\u52A0\u8F7D \"".concat(file.name, "\""), {
            type: 'success',
            duration: 3000
          });

          // Show notification if sample rate is unusual
          if (metadata.sampleRate !== 44100 && metadata.sampleRate !== 48000) {
            showNotification('采样率通知🎚️', '检测到异常的采样率。这可能会影响处理', {
              type: 'warning',
              duration: 4000,
              dismissible: true
            });
          }

          // Notification for very long audio files
          if (metadata.duration > 600) {
            // longer than 10 minutes
            showNotification('检测到大文件 📦', '此文件较大，处理可能需要更长时间', {
              type: 'info',
              duration: 4000
            });
          }
        }

        // infoElement.innerHTML = info;
      } catch (error) {
        // Error notification if something goes wrong
        showNotification('文件信息错误 ⚠️', '无法正确显示文件信息', {
          type: 'error',
          duration: 5000,
          dismissible: true
        });
        my_debugger.showError('Error updating file info:', error);
      }

      // Check file size and show appropriate notification
      if (file.size > 100 * 1024 * 1024) {
        // 100MB
        showNotification('检测到大文件 📦', '此文件较大，处理可能需要更长时间', {
          type: 'info',
          duration: 4000
        });
      }
    }
  }, {
    key: "formatFileSize",
    value: function formatFileSize(bytes) {
      var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
      if (bytes === 0) return '0 Bytes';
      var k = 1024;
      var i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
  }, {
    key: "formatDuration",
    value: function formatDuration(seconds) {
      var minutes = Math.floor(seconds / 60);
      var remainingSeconds = Math.floor(seconds % 60);
      return "".concat(minutes, ":").concat(remainingSeconds.toString().padStart(2, '0'));
    }
  }, {
    key: "updateAnalyzeButtonState",
    value: function updateAnalyzeButtonState() {
      var button = document.getElementById('generate-btn');
      var canAnalyze = this.state.audioBuffer && !this.state.isAnalyzing;
      button.disabled = !canAnalyze;
    }
  }, {
    key: "cleanup",
    value: function () {
      var _cleanup = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!(this.state.audioContext !== null)) {
                _context7.next = 4;
                break;
              }
              _context7.next = 3;
              return this.state.audioContext.close();
            case 3:
              this.state.audioContext = null;
            case 4:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function cleanup() {
        return _cleanup.apply(this, arguments);
      }
      return cleanup;
    }()
  }, {
    key: "startAnalysis",
    value: function () {
      var _startAnalysis = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!this.state.isAnalyzing) {
                _context8.next = 3;
                break;
              }
              showNotification('正在处理中 🎵', '请等待当前分析完成', {
                type: 'info',
                duration: 3000
              });
              return _context8.abrupt("return");
            case 3:
              this.state.isAnalyzing = true;
              this.updateAnalyzeButtonState();
              this.clearOutput();
              _context8.prev = 6;
              if (this.state.audioBuffer) {
                _context8.next = 10;
                break;
              }
              showNotification('缺少音频 🎵', '请先上传一个音频文件', {
                type: 'warning',
                duration: 4000,
                dismissible: true,
                modal: true,
                buttons: []
              });
              throw new Error('Audio buffer is not initialized');
            case 10:
              if (this.state.metadata) {
                _context8.next = 13;
                break;
              }
              showNotification('音频无效 🎵', '请先换一个音频文件,再试试吧', {
                type: 'warning',
                duration: 4000,
                dismissible: true,
                modal: true,
                buttons: []
              });
              throw new Error('Metadata is not initialized');
            case 13:
              if (this.state.themeColors) {
                _context8.next = 16;
                break;
              }
              showNotification('颜色主题问题 🎨', '没读取到颜色设置!请检查是否保存', {
                type: 'error',
                duration: 4000,
                dismissible: true,
                modal: true,
                buttons: []
              });
              throw new Error('Theme colors are not initialized');
            case 16:
              if (ColorManager.validateThemeColors(this.state.themeColors)) {
                _context8.next = 19;
                break;
              }
              showNotification('颜色主题问题 🎨', '颜色设置似乎有问题', {
                type: 'error',
                duration: 4000,
                dismissible: true,
                modal: true,
                buttons: []
              });
              throw new Error('Invalid themeColors configuration');
            case 19:
              _context8.next = 21;
              return this.generateColorSequence();
            case 21:
              // Success notification after analysis completes
              showNotification('分析完成！✨', '你的音频已成功处理', {
                type: 'success',
                duration: 4000
              });
              this.showStatusCompleted();
              _context8.next = 28;
              break;
            case 25:
              _context8.prev = 25;
              _context8.t0 = _context8["catch"](6);
              my_debugger.showError("Analysis failed: ".concat(_context8.t0.message), _context8.t0);

              // // Error notification
              // showNotification('分析错误 🎧', error.message, {
              //   type: 'error',
              //   duration: 5000,
              //   dismissible: true
              // })
            case 28:
              _context8.prev = 28;
              this.state.isAnalyzing = false;
              this.updateAnalyzeButtonState();
              return _context8.finish(28);
            case 32:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this, [[6, 25, 28, 32]]);
      }));
      function startAnalysis() {
        return _startAnalysis.apply(this, arguments);
      }
      return startAnalysis;
    }()
  }, {
    key: "generateColorSequence",
    value: function () {
      var _generateColorSequence = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        var _this10 = this;
        var intervalMultiplier,
          offset,
          bpm,
          totalDuration,
          fileSizeInMB,
          interval,
          totalIntervals,
          sentimentAnalyzer,
          sortedLyrics,
          lastOffEffect,
          timelineData,
          currentIndex,
          _processChunk,
          _args11 = arguments;
        return _regeneratorRuntime().wrap(function _callee10$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              intervalMultiplier = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : 1;
              _context11.prev = 1;
              offset = this.state.metadata.offset || 0; // 偏移时间（秒）
              bpm = this.state.metadata.bpm || 120;
              totalDuration = this.state.metadata.duration || 0;
              if (totalDuration > 600) {
                console.warn('Audio duration exceeds recommended length of 10 minutes');
              }
              fileSizeInMB = this.state.audioBuffer.length / (1024 * 1024);
              if (fileSizeInMB > 50) {
                console.warn('Large File Detected 📦', 'This might take a little longer to process', {
                  type: 'warning',
                  duration: 4000
                });
              }
              showNotification('开始处理 🎼', '正在分析你的音频文件...', {
                type: 'info',
                duration: 3000
              });
              this.showStatusProcessing();

              // Setup
              interval = 60 / bpm * 1000 * intervalMultiplier; // milliseconds
              // const totalIntervals = Math.ceil((totalDuration * 1000) / interval);
              totalIntervals = Math.ceil((totalDuration - offset) * 1000 / interval);
              sentimentAnalyzer = {};
              if (!this.state.lyrics) {
                _context11.next = 17;
                break;
              }
              _context11.next = 16;
              return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_lodash_assign_index_js"), __webpack_require__.e("original_src_sentiment-zh_cn_web_min_js")]).then(__webpack_require__.bind(__webpack_require__, /*! ./sentiment-zh_cn_web.min.js */ "./original_src/sentiment-zh_cn_web.min.js"));
            case 16:
              sentimentAnalyzer = sentimentAnalyzer = _context11.sent["default"];
            case 17:
              sortedLyrics = this.state.lyrics ? this.state.lyrics.scripts.sort(function (a, b) {
                return a.start - b.start;
              }) : [];
              lastOffEffect = -Infinity; // To track when we last used the "off4" effect
              timelineData = [];
              currentIndex = 0; //import sentimentAnalyzer from './sentiment-zh_cn_web.min.js';
              _processChunk = /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(startIndex) {
                  var chunkSize, _loop, i;
                  return _regeneratorRuntime().wrap(function _callee9$(_context10) {
                    while (1) switch (_context10.prev = _context10.next) {
                      case 0:
                        _context10.prev = 0;
                        chunkSize = 100; // Process 100 intervals at a time
                        _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {
                          var currentTime, normalizedTime, currentLyric, audioAnalysis, normalizedFrequency, normalizedAmplitude, sentimentScore, isOffEffect, colorCode;
                          return _regeneratorRuntime().wrap(function _loop$(_context9) {
                            while (1) switch (_context9.prev = _context9.next) {
                              case 0:
                                // const currentTime = (i * interval) / 1000;
                                currentTime = offset + i * interval / 1000;
                                normalizedTime = 100 * Math.round(10 * currentTime);
                                console.log("Processing time: ".concat(currentTime, "s, Normalized: ").concat(normalizedTime, ", Total Duration: ").concat(totalDuration, "s"));

                                // // Check if current time exceeds total duration
                                // if (currentTime >= totalDuration) {
                                //   console.log(`Reached end of audio duration at ${currentTime}s`);
                                //   return;
                                // }
                                if (!(currentTime < offset || currentTime >= totalDuration)) {
                                  _context9.next = 6;
                                  break;
                                }
                                console.log("Skipping out-of-range time: ".concat(currentTime, "s"));
                                return _context9.abrupt("return", 1);
                              case 6:
                                currentLyric = sortedLyrics.find(function (lyric) {
                                  return Math.abs(lyric.start - currentTime) < 0.1;
                                });
                                _context9.prev = 7;
                                _context9.next = 10;
                                return _this10.processAudioChunk(_this10.state.audioBuffer, currentTime, 0.1);
                              case 10:
                                audioAnalysis = _context9.sent;
                                normalizedFrequency = 0.5; // Default value
                                normalizedAmplitude = 0.5; // Default value
                                if (typeof audioAnalysis.frequency === 'number' && !isNaN(audioAnalysis.frequency)) {
                                  normalizedFrequency = audioAnalysis.frequency > 0 ? Math.min(audioAnalysis.frequency / 2000, 1) : 0;
                                }
                                if (typeof audioAnalysis.amplitude === 'number' && !isNaN(audioAnalysis.amplitude)) {
                                  normalizedAmplitude = audioAnalysis.amplitude;
                                }

                                // Ensure values are within [0-1] range
                                normalizedFrequency = Math.max(0, Math.min(1, normalizedFrequency));
                                normalizedAmplitude = Math.max(0, Math.min(1, normalizedAmplitude));
                                sentimentScore = 0;
                                if (currentLyric) {
                                  sentimentScore = sentimentAnalyzer(currentLyric.text).comparative;
                                }
                                isOffEffect = normalizedTime - lastOffEffect >= 800;
                                colorCode = ColorManager.getColorCode(normalizedFrequency, normalizedAmplitude, sentimentScore, _this10.state.themeColors, isOffEffect);
                                if (colorCode === 'off4') {
                                  lastOffEffect = normalizedTime;
                                }
                                console.log("---\n[\u6B4C\u8BCD]: ".concat(currentLyric ? currentLyric.text : '无', ", [\u60C5\u611F\u5206\u6570]: ").concat(sentimentScore, ",\n [\u65F6\u95F4]: ").concat(normalizedTime, ", [\u989C\u8272]: ").concat(colorCode, ",\n [\u5F52\u4E00\u5316\u9891\u7387]: ").concat(normalizedFrequency, ", [\u5F52\u4E00\u5316\u5E45\u5EA6]: ").concat(normalizedAmplitude, "\n---\n"));
                                if (currentLyric) {
                                  timelineData.push("".concat(normalizedTime, ",").concat(colorCode, " // ").concat(currentLyric.text));
                                } else {
                                  timelineData.push("".concat(normalizedTime, ",").concat(colorCode));
                                }
                                _context9.next = 29;
                                break;
                              case 26:
                                _context9.prev = 26;
                                _context9.t0 = _context9["catch"](7);
                                if (_context9.t0.message && _context9.t0.message.includes('Reached end of file')) {
                                  showNotification('处理完成 🎵', '完成音频文件的分析', {
                                    type: 'success',
                                    duration: 3000
                                  });
                                } else {
                                  showNotification('处理错误 🎧', '分析你的音频时出现问题', {
                                    type: 'error',
                                    duration: 5000,
                                    dismissible: true
                                  });
                                  my_debugger.showError("Error analyzing audio: ".concat(_context9.t0));
                                }
                              case 29:
                                _this10.updateProgress(i / totalIntervals * 100);
                              case 30:
                              case "end":
                                return _context9.stop();
                            }
                          }, _loop, null, [[7, 26]]);
                        });
                        i = startIndex;
                      case 4:
                        if (!(i < startIndex + chunkSize && i < totalIntervals)) {
                          _context10.next = 11;
                          break;
                        }
                        return _context10.delegateYield(_loop(), "t0", 6);
                      case 6:
                        if (!_context10.t0) {
                          _context10.next = 8;
                          break;
                        }
                        return _context10.abrupt("continue", 8);
                      case 8:
                        i++;
                        _context10.next = 4;
                        break;
                      case 11:
                        currentIndex += chunkSize;
                        if (currentIndex < totalIntervals) {
                          requestAnimationFrame(function () {
                            return _processChunk(currentIndex);
                          });
                        } else {
                          _this10.handleAnalysisResult(timelineData);
                        }
                        _context10.next = 19;
                        break;
                      case 15:
                        _context10.prev = 15;
                        _context10.t1 = _context10["catch"](0);
                        showNotification('块处理错误', _context10.t1.message, {
                          type: 'error',
                          duration: 5000,
                          dismissible: true
                        });
                        throw _context10.t1;
                      case 19:
                      case "end":
                        return _context10.stop();
                    }
                  }, _callee9, null, [[0, 15]]);
                }));
                return function processChunk(_x6) {
                  return _ref2.apply(this, arguments);
                };
              }(); // Start processing from the beginning
              _processChunk(0);
              _context11.next = 30;
              break;
            case 25:
              _context11.prev = 25;
              _context11.t0 = _context11["catch"](1);
              showNotification('分析错误', _context11.t0.message, {
                type: 'error',
                duration: 5000,
                dismissible: true
              });
              this.updateProgress(0);
              throw _context11.t0;
            case 30:
            case "end":
              return _context11.stop();
          }
        }, _callee10, this, [[1, 25]]);
      }));
      function generateColorSequence() {
        return _generateColorSequence.apply(this, arguments);
      }
      return generateColorSequence;
    }()
  }, {
    key: "processAudioChunk",
    value: function () {
      var _processAudioChunk = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11(audioBuffer, startTime, duration) {
        return _regeneratorRuntime().wrap(function _callee11$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", new Promise(function (resolve, reject) {
                // Add input validation
                if (!audioBuffer) {
                  reject(new Error('Audio buffer is null or undefined'));
                  return;
                }
                var sampleRate = audioBuffer.sampleRate;
                if (!sampleRate) {
                  reject(new Error('Invalid sample rate'));
                  return;
                }
                var startSample = Math.floor(startTime * sampleRate);
                var numSamples = Math.floor(duration * sampleRate);

                // Validate array bounds
                if (startSample < 0 || startSample >= audioBuffer.length) {
                  reject(new Error('Start sample out of bounds'));
                  return;
                }
                try {
                  var channelData = audioBuffer.getChannelData(0);
                  if (!channelData) {
                    reject(new Error('Channel data is null'));
                    return;
                  }
                  var chunk = channelData.slice(startSample, startSample + numSamples);

                  // Validate chunk data
                  if (!chunk || chunk.length === 0) {
                    reject(new Error('Invalid audio chunk'));
                    return;
                  }

                  // Calculate amplitude
                  var amplitude = chunk.reduce(function (sum, sample) {
                    return sum + Math.abs(sample);
                  }, 0) / numSamples;

                  // Estimate frequency using zero-crossings
                  var crossings = 0;
                  for (var i = 1; i < chunk.length; i++) {
                    if (chunk[i] > 0 && chunk[i - 1] <= 0 || chunk[i] < 0 && chunk[i - 1] >= 0) {
                      crossings++;
                    }
                  }
                  var frequency = crossings * sampleRate / (2 * chunk.length);
                  resolve({
                    amplitude: isNaN(amplitude) ? 0 : amplitude,
                    frequency: isNaN(frequency) ? 0 : frequency
                  });
                } catch (error) {
                  reject(new Error("Audio processing error: ".concat(error.message)));
                }
              }));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee11);
      }));
      function processAudioChunk(_x7, _x8, _x9) {
        return _processAudioChunk.apply(this, arguments);
      }
      return processAudioChunk;
    }()
  }, {
    key: "updateProgress",
    value: function updateProgress(progress) {
      var progressBar = document.getElementById('progressBar');
      var progressText = document.getElementById('progressText');
      progressBar.style.width = "".concat(progress, "%");
      progressText.textContent = "".concat(Math.round(progress), "%");

      // Update ARIA attributes
      progressBar.setAttribute('aria-valuenow', progress);
      progressText.setAttribute('aria-live', 'polite');
    }
  }, {
    key: "handleAnalysisResult",
    value: function handleAnalysisResult(timelineData) {
      var output = document.getElementById('output-result');
      output.value = this.formatTimelineData(timelineData);
    }
  }, {
    key: "formatTimelineData",
    value: function formatTimelineData(timelineData) {
      return timelineData.map(function (entry) {
        var _entry$split = entry.split(','),
          _entry$split2 = _slicedToArray(_entry$split, 3),
          time = _entry$split2[0],
          color = _entry$split2[1],
          lyric = _entry$split2[2];
        return "".concat(time, ",").concat(color, " ").concat(lyric ? "// ".concat(lyric) : '');
      }).join('\n');
    }
  }, {
    key: "clearOutput",
    value: function clearOutput() {
      document.getElementById('output-result').value = '';
      this.updateProgress(0);
    }
  }, {
    key: "getDefaultThemeColors",
    value: function getDefaultThemeColors() {
      return {
        base: 'blu',
        low: [{
          color: 'blu',
          per: 60
        }, {
          color: 'pur',
          per: 40
        }],
        mid: [{
          color: 'pin',
          per: 50
        }, {
          color: 'red',
          per: 50
        }],
        high: [{
          color: 'yel',
          per: 40
        }, {
          color: 'ora',
          per: 60
        }],
        accent: [{
          color: 'whi',
          per: 100
        }]
      };
    }
  }]);
}(); // Color management class
var ColorManager = /*#__PURE__*/function () {
  function ColorManager() {
    _classCallCheck(this, ColorManager);
  }
  return _createClass(ColorManager, null, [{
    key: "getColorMap",
    value: function getColorMap() {
      var _this11 = this;
      return Object.keys(this.COLORS).reduce(function (map, color) {
        var colorKey = _this11.COLORS[color];
        map[colorKey] = _this11.SPECIAL_INTENSITIES[colorKey] || new Set(_this11.INTENSITIES);
        return map;
      }, {});
    }
  }, {
    key: "validateThemeColors",
    value: function validateThemeColors(themeColors) {
      var colorMap = this.getColorMap();
      var validRanges = ['low', 'mid', 'high', 'accent'];
      var validColors = Object.keys(colorMap);
      for (var _i3 = 0, _validRanges = validRanges; _i3 < _validRanges.length; _i3++) {
        var range = _validRanges[_i3];
        if (!Array.isArray(themeColors[range])) {
          my_debugger.showError("Invalid themeColors: ".concat(range, " should be an array"), 'error');
          return false;
        }
        var _iterator2 = _createForOfIteratorHelper(themeColors[range]),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var colorInfo = _step2.value;
            if (_typeof(colorInfo) !== 'object' || !colorInfo.color || !colorInfo.per) {
              showNotification('颜色范围问题 🎨', "".concat(range, "\u8303\u56F4\u9700\u8981\u6B63\u786E\u914D\u7F6E\uFF01 ").concat(range, "\u8303\u56F4\u5185\u7684\u989C\u8272\u4FE1\u606F\u65E0\u6548: ").concat(JSON.stringify(colorInfo)), {
                type: 'error',
                duration: 4000
              });
              return false;
            }
            if (!validColors.includes(colorInfo.color)) {
              showNotification('颜色选择无效 🎨', "\u8BF7\u4E3A".concat(range, "\u8303\u56F4\u9009\u62E9\u4E00\u4E2A\u6709\u6548\u7684\u989C\u8272\uFF01").concat(range, "\u8303\u56F4\u5185\u989C\u8272\u65E0\u6548: ").concat(colorInfo.color), {
                type: 'error',
                duration: 4000,
                dismissible: true
              });
              return false;
            }
            var percentage = parseInt(colorInfo.per);
            if (isNaN(percentage) || percentage <= 0 || percentage > 100) {
              showNotification('百分比范围 📊', "\u989C\u8272\u767E\u5206\u6BD4\u5FC5\u987B\u57281\u5230100\u4E4B\u95F4\uFF01".concat(range, "\u8303\u56F4\u5185\u65E0\u6548\u767E\u5206\u6BD4: ").concat(colorInfo.per), {
                type: 'warning',
                duration: 4000
              });
              return false;
            }
          }

          // Check if percentages sum up to 100
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        var totalPercentage = themeColors[range].reduce(function (sum, colorInfo) {
          return sum + parseInt(colorInfo.per);
        }, 0);
        if (totalPercentage !== 100) {
          showNotification('百分比范围 🎯', "".concat(range, "\u8303\u56F4\u767E\u5206\u6BD4\u52A0\u8D77\u6765\u5E94\u8BE5\u662F100!"), {
            type: 'warning',
            duration: 5000,
            dismissible: true
          });
          return false;
        }
      }
      if (typeof themeColors.base !== 'string' || !validColors.includes(themeColors.base)) {
        showNotification('基础颜色缺失 🔍', '请为您的主题选择一个基础颜色！', {
          type: 'error',
          duration: 4000
        });
        return false;
      }
      return true;
    }
  }, {
    key: "validateColorCode",
    value: function validateColorCode(colorCode) {
      var color = colorCode.slice(0, 3);
      var intensity = colorCode.slice(3);
      var colorMap = this.getColorMap();
      if (!colorMap.hasOwnProperty(color)) {
        return false;
      }
      return colorMap[color].has(intensity);
    }
  }, {
    key: "getValidColorCode",
    value: function getValidColorCode(color, preferredIntensity) {
      var _this12 = this;
      var colorMap = this.getColorMap();
      if (!colorMap.hasOwnProperty(color)) {
        return null;
      }
      var validIntensities = Array.from(colorMap[color]);
      if (validIntensities.includes(preferredIntensity)) {
        return "".concat(color).concat(preferredIntensity);
      }
      var closestIntensity = validIntensities.reduce(function (closest, current) {
        var currentDiff = Math.abs(_this12.INTENSITIES.indexOf(current) - _this12.INTENSITIES.indexOf(preferredIntensity));
        var closestDiff = Math.abs(_this12.INTENSITIES.indexOf(closest) - _this12.INTENSITIES.indexOf(preferredIntensity));
        return currentDiff < closestDiff ? current : closest;
      }, validIntensities[0]);
      return "".concat(color).concat(closestIntensity);
    }
  }, {
    key: "getColorIntensity",
    value: function getColorIntensity(normalizedFreq, adjustedLoudness) {
      var frequencyFactor = 1 - Math.pow(Math.abs(normalizedFreq - 0.5), 2);
      var combinedIntensity = adjustedLoudness * (1 + frequencyFactor);
      if (isNaN(combinedIntensity)) return 'off4';
      if (combinedIntensity >= 0.9) return 'T';
      if (combinedIntensity >= 0.7) return '4';
      if (combinedIntensity >= 0.5) return '3';
      if (combinedIntensity >= 0.3) return '2';
      return '1';
    }
  }, {
    key: "mapFrequencyToColorInRange",
    value: function mapFrequencyToColorInRange(frequency, range) {
      if (!Array.isArray(range) || range.length === 0) {
        return null;
      }
      var allEqual = range.every(function (item) {
        return item.per === range[0].per;
      });
      if (allEqual) {
        var slots = range.map(function (item) {
          return item.color;
        });
        for (var i = slots.length - 1; i > 0; i--) {
          var j = Math.floor(Math.random() * (i + 1));
          var _ref3 = [slots[j], slots[i]];
          slots[i] = _ref3[0];
          slots[j] = _ref3[1];
        }
        return slots[Math.floor(Math.random() * slots.length)];
      }
      var randomValue = Math.random();
      var accumulator = 0;
      var _iterator3 = _createForOfIteratorHelper(range),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var colorInfo = _step3.value;
          accumulator += parseFloat(colorInfo.per) / 100;
          if (randomValue <= accumulator) {
            return colorInfo.color;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return range[range.length - 1].color;
    }
  }, {
    key: "mapFrequencyToColor",
    value: function mapFrequencyToColor(normalizedFreq, themeColors) {
      var range = {};
      if (normalizedFreq < 0.33) {
        range = themeColors.low;
      } else if (normalizedFreq < 0.66) {
        range = themeColors.mid;
      } else {
        range = themeColors.high;
      }
      if (!Array.isArray(range) || range.length === 0) {
        throw new Error('Invalid color range');
      }
      return this.mapFrequencyToColorInRange(normalizedFreq, range);
    }
  }, {
    key: "getAccentColor",
    value: function getAccentColor(themeColors) {
      if (!Array.isArray(themeColors.accent) || themeColors.accent.length === 0) {
        throw new Error('Invalid accent color range');
      }
      return this.mapFrequencyToColorInRange(Math.random(), themeColors.accent);
    }
  }, {
    key: "getColorCode",
    value: function getColorCode(normalizedFreq, weightedAmplitude, sentimentScore, themeColors) {
      var useOffEffect = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      // Apply Stevens' power law for perceived loudness (exponent ~0.6 for loudness)
      var perceivedLoudness = Math.pow(weightedAmplitude, 0.6);
      // Fletcher-Munson curves suggest that human hearing is most sensitive around 2-4 kHz
      // Adjust the amplitude threshold based on frequency sensitivity
      var sensitivityFactor = this.getSensitivityFactor(normalizedFreq);
      var adjustedLoudness = perceivedLoudness * sensitivityFactor;
      var color = '';
      try {
        color = this.mapFrequencyToColor(normalizedFreq, themeColors);
      } catch (error) {
        my_debugger.showError("Error in mapFrequencyToColor: ".concat(error, ". Using base color."), 'warn');
        color = themeColors.base;
      }

      // Use accent colors for extreme sentiments or high amplitudes
      // Reduced threshold for using accent colors, with less emphasis on sentiment
      if (adjustedLoudness >= 0.7) {
        try {
          color = this.getAccentColor(themeColors);
        } catch (error) {
          my_debugger.showError("Error in getAccentColor: ".concat(error, ". Using original color."), 'warn');
        }
      }

      // Get base intensity
      var intensity = this.getColorIntensity(normalizedFreq, adjustedLoudness);

      // Adjust intensity based on sentiment
      // Using a more gradual scale based on the circumplex model of affect
      if (sentimentScore > 0.75) {
        intensity = Math.min(parseInt(intensity) + Math.ceil(sentimentScore * 0.75), 4).toString();
      } else if (sentimentScore < -0.75) {
        intensity = Math.max(parseInt(intensity) - Math.ceil(Math.abs(sentimentScore) * 0.75), 1).toString();
      }

      // Use flicker effect for high amplitudes or extreme sentiments
      // Threshold based on research on visual flicker fusion threshold
      if (adjustedLoudness > 0.98) {
        intensity = 'T';
      }
      if (useOffEffect && adjustedLoudness >= 0.5) {
        return 'off4';
      }
      var colorCode = "".concat(color).concat(intensity);

      // Validate the color code
      if (!this.validateColorCode(colorCode)) {
        var fallbackColorCode = this.getValidColorCode(color, intensity);
        if (fallbackColorCode) {
          my_debugger.showError("[WARN]Invalid color code generated: ".concat(colorCode, ". Falling back to ").concat(fallbackColorCode, "."), 'warn');
          colorCode = fallbackColorCode;
        } else {
          my_debugger.showError("[ERROR]Critical error: Unable to generate a valid color code - ".concat(colorCode, "."), 'error');
          colorCode = 'whi4'; // Using 'whi4' as a last resort
        }
      }
      return colorCode;
    }
  }, {
    key: "getSensitivityFactor",
    value: function getSensitivityFactor(normalizedFreq) {
      // Implement a curve based on the Fletcher-Munson equal-loudness contours
      // This is a simplified approximation
      var peakSensitivity = 0.3; // Corresponds to about 3-4 kHz
      return 1 + Math.sin((normalizedFreq - peakSensitivity) * Math.PI) * 0.3;
    }
  }]);
}();
/*
 * color-visualizer
 */
// File Import Handling
_defineProperty(ColorManager, "COLORS", {
  RED: 'red',
  ORA: 'ora',
  YEL: 'yel',
  SKY: 'sky',
  BLU: 'blu',
  PUR: 'pur',
  PIN: 'pin',
  WHI: 'whi',
  OFF: 'off',
  RAI: 'rai'
});
_defineProperty(ColorManager, "AVAILABLE_COLORS", ['red', 'ora', 'yel', 'sky', 'blu', 'pur', 'pin', 'whi']);
_defineProperty(ColorManager, "COLOR_TO_HEX", {
  red: '#FF0000',
  ora: '#FFA500',
  // 橙色
  yel: '#FFFF00',
  // 黄色
  sky: '#87CEEB',
  // 天蓝色
  blu: '#0000FF',
  // 蓝色
  pur: '#800080',
  // 紫色
  pin: '#FFC0CB',
  // 粉红色
  whi: '#FFFFFF' // 白色
});
_defineProperty(ColorManager, "INTENSITIES", ['1', '2', '3', '4', 'T']);
_defineProperty(ColorManager, "SPECIAL_INTENSITIES", {
  pin: new Set(['2', '4']),
  whi: new Set(['4', 'T']),
  off: new Set(['4']),
  rai: new Set(['4'])
});
var dropZone = document.getElementById('dropZone');
var fileInput = document.getElementById('fileInput');
var sequenceInput = document.getElementById('input');

// Prevent default drag behaviors
['dragenter', 'dragover', 'dragleave', 'drop'].forEach(function (eventName) {
  dropZone.addEventListener(eventName, preventDefaults, false);
  document.body.addEventListener(eventName, preventDefaults, false);
});
function preventDefaults(e) {
  e.preventDefault();
  e.stopPropagation();
}

// Highlight drop zone when dragging over it
['dragenter', 'dragover'].forEach(function (eventName) {
  dropZone.addEventListener(eventName, highlight, false);
});
['dragleave', 'drop'].forEach(function (eventName) {
  dropZone.addEventListener(eventName, unhighlight, false);
});
function highlight(e) {
  dropZone.classList.add('drag-over');
}
function unhighlight(e) {
  dropZone.classList.remove('drag-over');
}

// Handle dropped files
dropZone.addEventListener('drop', handleDrop, false);
dropZone.addEventListener('click', function () {
  return fileInput.click();
});
fileInput.addEventListener('change', handleFileSelect);
function handleDrop(e) {
  var dt = e.dataTransfer;
  var files = dt.files;
  handleFiles(files);
}
function handleFileSelect(e) {
  var files = e.target.files;
  handleFiles(files);
}
function handleFiles(files) {
  var file = files[0];
  if (file) {
    var reader = new FileReader();
    reader.onload = function (e) {
      sequenceInput.value = e.target.result;
    };
    reader.readAsText(file);
  }
}

// config.js - Color configuration
// prettier-ignore
var ColorConfig = {
  colors: {
    red: {
      4: '#ef4444',
      3: '#f87171',
      2: '#fca5a5',
      1: '#fecaca',
      T: '#ef4444'
    },
    ora: {
      4: '#f97316',
      3: '#fb923c',
      2: '#fdba74',
      1: '#fed7aa',
      T: '#f97316'
    },
    yel: {
      4: '#eab308',
      3: '#facc15',
      2: '#fde047',
      1: '#fef08a',
      T: '#eab308'
    },
    sky: {
      4: '#06b6d4',
      3: '#22d3ee',
      2: '#67e8f9',
      1: '#a5f3fc',
      T: '#06b6d4'
    },
    blu: {
      4: '#3b82f6',
      3: '#60a5fa',
      2: '#93c5fd',
      1: '#bfdbfe',
      T: '#3b82f6'
    },
    pur: {
      4: '#a855f7',
      3: '#c084fc',
      2: '#d8b4fe',
      1: '#e9d5ff',
      T: '#a855f7'
    },
    off: {
      4: '#333333'
    },
    pin: {
      4: '#ec4899',
      2: '#f472b6'
    },
    whi: {
      4: '#ffffff',
      T: '#eeeeee'
    }
  },
  colorCache: new Map(),
  getColorCode: function getColorCode(colorName) {
    var _this$colors$base;
    if (this.colorCache.has(colorName)) {
      return this.colorCache.get(colorName);
    }
    var _ref4 = [colorName.slice(0, 3), colorName.slice(3)],
      base = _ref4[0],
      level = _ref4[1];
    var color = ((_this$colors$base = this.colors[base]) === null || _this$colors$base === void 0 ? void 0 : _this$colors$base[level]) || null;
    this.colorCache.set(colorName, color);
    return color;
  }
};

// models/Timeline.js - Timeline data structure
var Timeline = /*#__PURE__*/function () {
  function Timeline() {
    var sequence = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    _classCallCheck(this, Timeline);
    this.sequence = sequence;
  }
  return _createClass(Timeline, [{
    key: "addFrame",
    value: function addFrame(time, color) {
      if (typeof time !== 'number' || time < 0) {
        throw new Error('Invalid time value');
      }
      if (!color || typeof color !== 'string') {
        throw new Error('Invalid color value');
      }
      this.sequence.push({
        time: time,
        color: color
      });
      this.sort();
    }
  }, {
    key: "sort",
    value: function sort() {
      this.sequence.sort(function (a, b) {
        return a.time - b.time;
      });
    }
  }, {
    key: "getFrameAtTime",
    value: function getFrameAtTime(currentTime) {
      if (!this.sequence.length) return null;
      var left = 0;
      var right = this.sequence.length - 1;

      // Binary search for the appropriate frame
      while (left < right) {
        var mid = Math.floor((left + right + 1) / 2);
        if (this.sequence[mid].time <= currentTime) {
          left = mid;
        } else {
          right = mid - 1;
        }
      }
      return this.sequence[left];
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      if (this.sequence.length === 0) return 0;
      return this.sequence[this.sequence.length - 1].time;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.sequence = [];
    }
  }, {
    key: "loadFromInput",
    value: function loadFromInput(input) {
      var _this13 = this;
      var _Timeline$parse = Timeline.parse(input),
        errors = _Timeline$parse.errors,
        frames = _Timeline$parse.frames;
      if (errors.length) {
        throw new Error(errors.join('\n'));
      }
      frames.forEach(function (_ref5) {
        var time = _ref5.time,
          color = _ref5.color;
        return _this13.addFrame(time, color);
      });
    }
  }], [{
    key: "validate",
    value: function validate(line, index) {
      if (typeof line !== 'string') {
        return {
          errors: ["Line ".concat(index + 1, ": Invalid input type")]
        };
      }
      if (line.length <= 0) {
        return {
          errors: ["Line ".concat(index + 1, ": Empty Context")]
        };
      }
      if (line.length > 1000) {
        return {
          errors: ["Line ".concat(index + 1, ": Line too long")]
        };
      }
      var contentWithoutComment = line.split('//')[0].trim();
      if (!contentWithoutComment) {
        return null;
      }
      var errors = [];
      var _contentWithoutCommen = contentWithoutComment.split(',').map(function (s) {
          return s.trim();
        }),
        _contentWithoutCommen2 = _slicedToArray(_contentWithoutCommen, 2),
        time = _contentWithoutCommen2[0],
        color = _contentWithoutCommen2[1];
      var timeMs = parseInt(time);
      if (isNaN(timeMs)) {
        errors.push("Line ".concat(index + 1, ": Invalid time value: ").concat(time));
      } else if (timeMs % 100 !== 0) {
        errors.push("Line ".concat(index + 1, ": Time must be multiple of 100ms"));
      }
      if (!color) {
        errors.push("Line ".concat(index + 1, ": Missing color value"));
      } else if (!ColorConfig.getColorCode(color)) {
        errors.push("Line ".concat(index + 1, ": Invalid color code: ").concat(color));
      }
      return errors.length ? {
        errors: errors
      } : {
        time: timeMs,
        color: color
      };
    }
  }, {
    key: "parse",
    value: function parse(input) {
      var lines = input.split('\n');
      var errors = [];
      var frames = [];
      lines.forEach(function (line, index) {
        var result = Timeline.validate(line, index);
        if (result) {
          if (result.errors) {
            errors.push.apply(errors, _toConsumableArray(result.errors));
          } else {
            frames.push(result);
          }
        }
      });

      // Sort frames by time
      frames.sort(function (a, b) {
        return a.time - b.time;
      });

      // Validate minimum interval
      for (var i = 1; i < frames.length; i++) {
        var gap = frames[i].time - frames[i - 1].time;
        if (gap < 200) {
          errors.push("Invalid gap of ".concat(gap, "ms between ").concat(frames[i - 1].time, "ms and ").concat(frames[i].time, "ms"));
        }
      }
      return {
        errors: errors,
        frames: frames
      };
    }
  }]);
}(); // Update the AnimationController class
var AnimationController = /*#__PURE__*/function () {
  function AnimationController(element, timerDisplay) {
    _classCallCheck(this, AnimationController);
    this.element = element;
    this.timerDisplay = timerDisplay;
    this.timeline = null;
    this.startTimeStamp = 0;
    this.lastFrameTimeStamp = 0;
    this.animationFrame = null;
    this.pausedTimeStamp = 0;
    this.audioCurrentTimeStamp = 0;
    this.isPaused = false;
    this.colorInfoTemplate = document.createElement('div');
    this.colorInfoTemplate.className = 'color-info';
  }
  return _createClass(AnimationController, [{
    key: "setTimeline",
    value: function setTimeline(timeline) {
      this.timeline = timeline;
      this.reset();
    }
  }, {
    key: "start",
    value: function start() {
      if (this.isPaused) {
        // Resume from paused state
        this.startTimeStamp = performance.now() - this.pausedTimeStamp;
        this.isPaused = false;
      } else {
        // Start fresh
        this.reset();
        this.startTimeStamp = performance.now();
      }
      this.animate();
    }
  }, {
    key: "pause",
    value: function pause() {
      if (!this.isPaused && this.animationFrame) {
        cancelAnimationFrame(this.animationFrame);
        this.animationFrame = null;
        this.pausedTimeStamp = performance.now() - this.startTimeStamp;
        this.isPaused = true;
      }
    }
  }, {
    key: "resume",
    value: function resume() {
      if (this.isPaused) {
        this.start();
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.animationFrame) {
        cancelAnimationFrame(this.animationFrame);
        this.animationFrame = null;
      }
      this.reset();
      // Dispatch a custom event when animation stops
      this.element.dispatchEvent(new CustomEvent('animationStopped'));
    }
  }, {
    key: "reset",
    value: function reset() {
      this.startTimeStamp = 0;
      this.lastFrameTimeStamp = 0;
      this.pausedTimeStamp = 0;
      this.isPaused = false;
      this.element.style.backgroundColor = 'var(--surface-secondary';
      this.element.innerHTML = '';
      this.updateDisplay(0);
    }
  }, {
    key: "restart",
    value: function restart() {
      this.stop();
      this.start();
    }
  }, {
    key: "clear",
    value: function clear() {
      this.stop();
      this.timeline = null;
      this.element.style.backgroundColor = 'var(--surface-secondary';
      this.element.innerHTML = '';
      this.updateDisplay(0);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.clear();
      this.element = null;
      this.timerDisplay = null;
      this.colorInfoTemplate = null;
    }
  }, {
    key: "hexToRgb",
    value: function hexToRgb(hex) {
      var value = parseInt(hex.slice(1), 16);
      var r = value >> 16 & 255;
      var g = value >> 8 & 255;
      var b = value & 255;
      return "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
    }
  }, {
    key: "updateColorInfo",
    value: function updateColorInfo(colorName, hexColor, time) {
      var fragment = document.createDocumentFragment();
      var div = this.colorInfoTemplate.cloneNode(true);
      div.innerHTML = "\n                    <div>Name: ".concat(colorName, "</div>\n                    <div>Time: ").concat(time, "ms</div>\n                    <div>Hex: ").concat(hexColor, "</div>\n                    <div>RGB: ").concat(this.hexToRgb(hexColor), "</div>\n                ");
      fragment.appendChild(div);
      this.element.innerHTML = '';
      this.element.appendChild(fragment);
    }
  }, {
    key: "animate",
    value: function animate() {
      var _this14 = this,
        _this$timeline;
      var currentTimeStamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      if (this.isPaused) return;

      // 防止过于频繁地更新，控制帧率 (大约 60FPS)
      if (this.lastFrameTimeStamp && currentTimeStamp - this.lastFrameTimeStamp < 16) {
        this.animationFrame = requestAnimationFrame(function (time) {
          return _this14.animate(time);
        });
        return;
      }
      this.lastFrameTimeStamp = currentTimeStamp;
      var elapsed = this.audioCurrentTimeStamp;

      // 更新显示，显示经过的时间
      this.updateDisplay(elapsed);

      // 获取当前时间点的动画帧
      var frame = (_this$timeline = this.timeline) === null || _this$timeline === void 0 ? void 0 : _this$timeline.getFrameAtTime(elapsed);
      if (frame) {
        var hexColor = ColorConfig.getColorCode(frame.color);
        if (hexColor) {
          this.element.style.backgroundColor = hexColor;
          this.updateColorInfo(frame.color, hexColor, frame.time);
        }
      }

      // 如果音频和动画还未结束，继续更新
      if (elapsed <= this.timeline.getDuration() + 1000) {
        this.animationFrame = requestAnimationFrame(function (time) {
          return _this14.animate(time);
        });
      } else {
        this.stop();
      }
    }
  }, {
    key: "updateDisplay",
    value: function updateDisplay(time) {
      this.timerDisplay.textContent = formatTimestamp(time, 'mm:ss:ms');
      document.querySelector('#milliseconds ').textContent = "".concat(Math.floor(time), "ms");
    }
  }, {
    key: "updateAnimation",
    value: function updateAnimation(currentTime) {
      var _this$timeline2;
      // 根据当前时间更新动画的状态
      var frame = (_this$timeline2 = this.timeline) === null || _this$timeline2 === void 0 ? void 0 : _this$timeline2.getFrameAtTime(currentTime);
      if (frame) {
        var color = ColorConfig.getColorCode(frame.color);
        if (color) {
          this.element.style.backgroundColor = color;
          this.updateColorInfo(frame.color, color, frame.time);
        }
      }
    }
  }, {
    key: "updateProgress",
    value: function updateProgress(audioCurrentTimeStamp) {
      this.audioCurrentTimeStamp = audioCurrentTimeStamp;
      this.animate();
    }
  }]);
}();
var AudioVisualizer = /*#__PURE__*/function () {
  function AudioVisualizer(audioElement) {
    _classCallCheck(this, AudioVisualizer);
    this.audio = audioElement;
    this.isInitialized = false;
    this.canvas = document.getElementById('visualizer');
    this.ctx = this.canvas.getContext('2d');
    this.visualizationType = document.getElementById('visualizationType');
    this.minHeight = 100; // Minimum height for mobile
    this.maxHeight = 200; // Maximum height for larger screens

    this.setupAudioContext();
    this.setupEventListeners();
    this.resizeCanvas();
  }
  return _createClass(AudioVisualizer, [{
    key: "setupAudioContext",
    value: function setupAudioContext() {
      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
      this.analyser = this.audioContext.createAnalyser();
      // Reduce FFT size for better performance on mobile
      this.analyser.fftSize = window.innerWidth < 768 ? 1024 : 2048;
      this.bufferLength = this.analyser.frequencyBinCount;
      this.dataArray = new Uint8Array(this.bufferLength);
      this.source = this.audioContext.createMediaElementSource(this.audio);
      this.source.connect(this.analyser);
      this.analyser.connect(this.audioContext.destination);
      this.isInitialized = true;
    }
  }, {
    key: "setupEventListeners",
    value: function setupEventListeners() {
      var _this15 = this;
      // Debounce resize event for better performance
      var resizeTimeout;
      window.addEventListener('resize', function () {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(function () {
          return _this15.resizeCanvas();
        }, 250);
      });
      this.visualizationType.addEventListener('change', function () {
        return _this15.draw();
      });

      // Handle orientation change for mobile devices
      window.addEventListener('orientationchange', function () {
        setTimeout(function () {
          return _this15.resizeCanvas();
        }, 100);
      });
    }
  }, {
    key: "resizeCanvas",
    value: function resizeCanvas() {
      var containerWidth = this.canvas.parentElement.offsetWidth;
      var screenWidth = window.innerWidth;

      // Responsive height calculation
      var canvasHeight;
      if (screenWidth < 576) {
        // Mobile
        canvasHeight = this.minHeight;
      } else if (screenWidth < 992) {
        // Tablet
        canvasHeight = Math.min(this.minHeight * 1.5, this.maxHeight);
      } else {
        // Desktop
        canvasHeight = this.maxHeight;
      }

      // Update canvas dimensions
      this.canvas.style.height = "".concat(canvasHeight, "px");
      this.canvas.width = containerWidth * window.devicePixelRatio;
      this.canvas.height = canvasHeight * window.devicePixelRatio;

      // Scale canvas context
      this.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);

      // Adjust visualization parameters based on screen size
      this.analyser.fftSize = screenWidth < 768 ? 1024 : 2048;
      this.bufferLength = this.analyser.frequencyBinCount;
      this.dataArray = new Uint8Array(this.bufferLength);
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this16 = this;
      if (!this.isInitialized) return;
      requestAnimationFrame(function () {
        return _this16.draw();
      });
      this.analyser.getByteTimeDomainData(this.dataArray);

      // Clear canvas
      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
      if (this.visualizationType.value === 'frequency') {
        this.drawFrequencyBars();
      } else {
        this.drawWaveform();
      }
    }
  }, {
    key: "drawFrequencyBars",
    value: function drawFrequencyBars() {
      this.analyser.getByteFrequencyData(this.dataArray);

      // Adjust bar width based on screen size
      var screenWidth = window.innerWidth;
      var barWidthMultiplier = screenWidth < 576 ? 1.5 : 2.5;
      var barWidth = this.canvas.width / this.bufferLength * barWidthMultiplier;
      var barSpacing = screenWidth < 576 ? 0.5 : 1;
      var x = 0;
      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
      for (var i = 0; i < this.bufferLength; i++) {
        var barHeight = this.dataArray[i] / 255 * this.canvas.height * 0.8;

        // Create gradient with adjusted colors for better visibility
        var gradient = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);
        gradient.addColorStop(0, '#00ff88');
        gradient.addColorStop(0.5, '#00ffff');
        gradient.addColorStop(1, '#0088ff');
        this.ctx.fillStyle = gradient;
        this.ctx.fillRect(x, this.canvas.height - barHeight, Math.max(barWidth, 1),
        // Ensure minimum width of 1px
        barHeight);
        x += barWidth + barSpacing;
      }
    }
  }, {
    key: "drawWaveform",
    value: function drawWaveform() {
      this.analyser.getByteTimeDomainData(this.dataArray);

      // Adjust line width based on screen size
      this.ctx.lineWidth = window.innerWidth < 576 ? 1 : 2;
      this.ctx.strokeStyle = '#00ffff';
      this.ctx.beginPath();
      var sliceWidth = this.canvas.width / this.bufferLength;
      var x = 0;
      for (var i = 0; i < this.bufferLength; i++) {
        var v = this.dataArray[i] / 128.0;
        var y = v * (this.canvas.height / 2);
        if (i === 0) {
          this.ctx.moveTo(x, y);
        } else {
          this.ctx.lineTo(x, y);
        }
        x += sliceWidth;
      }
      this.ctx.lineTo(this.canvas.width, this.canvas.height / 2);
      this.ctx.stroke();
    }
  }, {
    key: "start",
    value: function start() {
      if (this.audioContext.state === 'suspended') {
        this.audioContext.resume();
      }
      this.draw();
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.audioContext.state === 'running') {
        this.audioContext.suspend();
      }
    }
  }]);
}();
var waveSurferController = /*#__PURE__*/function () {
  function waveSurferController(audioElement) {
    _classCallCheck(this, waveSurferController);
    this.audio = audioElement;
    this.setupWavesurfer();
  }
  return _createClass(waveSurferController, [{
    key: "setupWavesurfer",
    value: function setupWavesurfer() {
      var _this17 = this;
      // Initialize Wavesurfer.js
      this.wavesurfer = WaveSurfer.create({
        container: '#wavesurfer_color_preview',
        media: this.audio,
        responsive: true,
        normalize: false,
        interact: true,
        mediaControls: false
      });
      this.wavesurfer.on('ready', function () {
        _this17.visualizerReady = true;
      });
    }
  }, {
    key: "loadAudio",
    value: function loadAudio(url) {
      this.wavesurfer.load(url);
    }
  }, {
    key: "start",
    value: function start() {
      if (this.visualizerReady) {
        this.wavesurfer.play();
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.visualizerReady) {
        this.wavesurfer.pause();
      }
    }
  }]);
}(); // Audio handling class
var AudioController = /*#__PURE__*/function () {
  function AudioController(animationController) {
    _classCallCheck(this, AudioController);
    this.audio = new Audio();
    this.waveSurferController = null;
    this.isAudioLoaded = false;
    this.syncedWithTimeline = true;
    this.isDraggingProgress = false;
    this.animationController = animationController || null;
    this.visualizer = null;
    this.setupAudioElements();
    this.setupEventListeners();
  }
  return _createClass(AudioController, [{
    key: "setupAudioElements",
    value: function setupAudioElements() {
      this.audioDropZone = document.getElementById('audioDropZone');
      this.audioInput = document.getElementById('audioInput');
      this.audioControls = document.getElementById('audioControls');
      this.audioProgress = document.getElementById('audioProgress');
      this.currentTimeDisplay = document.getElementById('currentTime');
      this.totalTimeDisplay = document.getElementById('totalTime');
      this.audioFileName = document.getElementById('audioFileName');
      this.currentPer = document.getElementById('currentPer');
    }
  }, {
    key: "setupEventListeners",
    value: function setupEventListeners() {
      var _this18 = this;
      // Audio file drop handling
      this.audioDropZone.addEventListener('drop', function (e) {
        return _this18.handleAudioDrop(e);
      });
      this.audioDropZone.addEventListener('click', function () {
        return _this18.audioInput.click();
      });
      this.audioInput.addEventListener('change', function (e) {
        return _this18.handleAudioSelect(e);
      });

      // Audio playback events
      this.audio.addEventListener('loadedmetadata', function () {
        return _this18.handleAudioLoaded();
      });
      this.audio.addEventListener('timeupdate', function () {
        return _this18.updateTimeDisplay();
      });
      this.audio.addEventListener('ended', function () {
        return _this18.handleAudioEnded();
      });

      // Timeline slider control
      this.audioProgress.addEventListener('input', function (e) {
        if (_this18.audio && !isNaN(_this18.audio.duration) && _this18.audio.duration > 0) {
          var percentage = parseFloat(e.target.value) / 100;
          var newTime = percentage * _this18.audio.duration;
          if (isFinite(newTime) && newTime >= 0) {
            _this18.audio.currentTime = newTime;
          } else {
            showNotification('播放出错', '检测到无效的时间位置.', {
              type: 'error',
              duration: 3000
            });
          }
        } else {
          showNotification('音频未就绪', '请确保音频文件已正确加载。', {
            type: 'warning',
            duration: 3000
          });
        }
      });

      // Progress bar handling with improved sync
      this.audioProgress.addEventListener('mousedown', function (e) {
        _this18.isDraggingProgress = true;
        _this18.handleProgressChange(e);
      });
      this.audioProgress.addEventListener('mousemove', function (e) {
        if (_this18.isDraggingProgress) {
          _this18.handleProgressChange(e);
        }
      });
      this.audioProgress.addEventListener('mouseup', function (e) {
        _this18.isDraggingProgress = false;
        _this18.handleProgressChange(e);
      });

      // Add volume control listener
      var volumeControl = document.getElementById('volumeControl');
      if (volumeControl) {
        volumeControl.addEventListener('input', function (e) {
          _this18.setVolume(e.target.value / 100);
        });
      }
    }
  }, {
    key: "handleProgressChange",
    value: function handleProgressChange(e) {
      if (this.audio && !isNaN(this.audio.duration) && this.audio.duration > 0) {
        var percentage = parseFloat(e.target.value) / 100;
        var newTime = percentage * this.audio.duration;
        if (isFinite(newTime) && newTime >= 0) {
          this.audio.currentTime = newTime;
          this.updateTimeDisplay();
        } else {
          showNotification('播放出错', '检测到无效的时间位置.', {
            type: 'error',
            duration: 3000
          });
        }
      } else {
        showNotification('音频未就绪', '请确保音频文件已正确加载。', {
          type: 'warning',
          duration: 3000
        });
      }
    }
  }, {
    key: "handleAudioDrop",
    value: function handleAudioDrop(e) {
      e.preventDefault();
      var file = e.dataTransfer.files[0];
      if (file && file.type.startsWith('audio/')) {
        this.loadAudioFile(file);
      }
    }
  }, {
    key: "handleAudioSelect",
    value: function handleAudioSelect(e) {
      var file = e.target.files[0];
      if (file) {
        this.loadAudioFile(file);
      }
    }
  }, {
    key: "loadAudioFile",
    value: function loadAudioFile(file) {
      var url = URL.createObjectURL(file);
      this.audio.src = url;
      this.audioFileName.textContent = file.name;
      this.isAudioLoaded = true;
      // this.audioControls.className = '';
      this.updateControlButtons(true);

      // // Initialize visualizer after loading audio
      if (!this.waveSurferController) {
        this.waveSurferController = new waveSurferController(this.audio);
      }
      this.waveSurferController.loadAudio(url);
      if (!this.visualizer) {
        this.visualizer = new AudioVisualizer(this.audio);
      }
    }
  }, {
    key: "handleAudioLoaded",
    value: function handleAudioLoaded() {
      this.audioProgress.max = 100;
      this.totalTimeDisplay.textContent = this.formatTime(this.audio.duration);
    }
  }, {
    key: "updateTimeDisplay",
    value: function updateTimeDisplay() {
      // const currentTime = this.audio.currentTime;
      // const duration = this.audio.duration;
      // const currentProgressValue = ((currentTime / duration) * 100).toFixed(2);
      // this.currentTimeDisplay.textContent = this.formatTime(currentTime);
      // this.totalTimeDisplay.textContent = this.formatTime(duration);
      // this.currentPer.textContent = currentProgressValue + '%';
      // this.audioProgress.value = currentProgressValue;

      var currentTime = this.audio.currentTime;
      var duration = this.audio.duration;
      var percent = (currentTime / duration * 100).toFixed(2);
      this.currentTimeDisplay.textContent = this.formatTime(currentTime);
      this.totalTimeDisplay.textContent = this.formatTime(duration);
      this.currentPer.textContent = "".concat(percent, "%");
      this.audioProgress.value = percent;

      // Sync AnimationController with audio progress
      if (this.syncedWithTimeline && this.animationController) {
        this.animationController.updateProgress(this.audio.currentTime * 1000);
      }
    }
  }, {
    key: "handleAudioEnded",
    value: function handleAudioEnded() {
      this.audioProgress.value = 0;
      this.updateTimeDisplay();
      if (this.syncedWithTimeline) {
        // Trigger timeline stop
        document.getElementById('stop').click();
      }
    }
  }, {
    key: "formatTime",
    value: function formatTime(seconds) {
      var mins = Math.floor(seconds / 60);
      var secs = Math.floor(seconds % 60);
      return "".concat(mins.toString().padStart(2, '0'), ":").concat(secs.toString().padStart(2, '0'));
    }

    // Volume control (0.0 to 1.0)
  }, {
    key: "setVolume",
    value: function setVolume(value) {
      var volume = Math.max(0, Math.min(1, value));
      this.audio.volume = volume;
      return volume;
    }

    // // Playback speed control (0.5 to 2.0)
    // setPlaybackRate (rate) {
    //     const validRate = Math.max(0.5, Math.min(2, rate));
    //     this.audio.playbackRate = validRate;
    //     return validRate;
    // }

    // Seek to specific time in seconds
  }, {
    key: "seekTo",
    value: function seekTo(timeInSeconds) {
      if (this.isAudioLoaded) {
        var validTime = Math.max(0, Math.min(timeInSeconds, this.audio.duration));
        this.audio.currentTime = validTime;
        this.updateTimeDisplay();
      }
    }

    // Skip forward by specified seconds
  }, {
    key: "skipForward",
    value: function skipForward() {
      var seconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      if (this.isAudioLoaded) {
        this.seekTo(this.audio.currentTime + seconds);
      }
    }

    // Skip backward by specified seconds
  }, {
    key: "skipBackward",
    value: function skipBackward() {
      var seconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      if (this.isAudioLoaded) {
        this.seekTo(this.audio.currentTime - seconds);
      }
    }

    // Mute/unmute toggle
  }, {
    key: "toggleMute",
    value: function toggleMute() {
      this.audio.muted = !this.audio.muted;
      return this.audio.muted;
    }

    // Get current audio state
  }, {
    key: "getAudioState",
    value: function getAudioState() {
      return {
        currentTime: this.audio.currentTime,
        duration: this.audio.duration,
        volume: this.audio.volume,
        playbackRate: this.audio.playbackRate,
        isMuted: this.audio.muted,
        isPlaying: !this.audio.paused
      };
    }

    // Enhanced play method with optional start time
  }, {
    key: "play",
    value: function play(startFromTime) {
      if (this.isAudioLoaded) {
        var _this$waveSurferContr;
        if (startFromTime !== undefined) {
          this.seekTo(startFromTime);
        }
        this.audio.play();
        (_this$waveSurferContr = this.waveSurferController) === null || _this$waveSurferContr === void 0 || _this$waveSurferContr.start();
      }
    }
  }, {
    key: "syncWithControls_run",
    value: function syncWithControls_run() {
      var _this$waveSurferContr2;
      if (!this.isAudioLoaded) return;
      this.audio.currentTime = 0; // Reset to start
      this.play();
      (_this$waveSurferContr2 = this.waveSurferController) === null || _this$waveSurferContr2 === void 0 || _this$waveSurferContr2.start();
      this.updateControlButtons(true);
    }
  }, {
    key: "syncWithControls_pause",
    value: function syncWithControls_pause() {
      var _this$waveSurferContr3;
      if (!this.isAudioLoaded) return;
      this.audio.pause();
      (_this$waveSurferContr3 = this.waveSurferController) === null || _this$waveSurferContr3 === void 0 || _this$waveSurferContr3.stop();
    }
  }, {
    key: "syncWithControls_resume",
    value: function syncWithControls_resume() {
      var _this$waveSurferContr4;
      if (!this.isAudioLoaded) return;
      this.play();
      (_this$waveSurferContr4 = this.waveSurferController) === null || _this$waveSurferContr4 === void 0 || _this$waveSurferContr4.start();
    }
  }, {
    key: "syncWithControls_stop",
    value: function syncWithControls_stop() {
      var _this$waveSurferContr5;
      if (!this.isAudioLoaded) return;
      this.audio.pause();
      this.audio.currentTime = 0;
      (_this$waveSurferContr5 = this.waveSurferController) === null || _this$waveSurferContr5 === void 0 || _this$waveSurferContr5.stop();
      this.updateTimeDisplay();
      this.audioProgress.value = 0;
      this.currentPer.textContent = '0%';
    }
  }, {
    key: "syncWithControls_restart",
    value: function syncWithControls_restart() {
      var _this$waveSurferContr6;
      if (!this.isAudioLoaded) return;
      this.audio.currentTime = 0;
      this.currentPer.textContent = '0%';
      this.play();
      (_this$waveSurferContr6 = this.waveSurferController) === null || _this$waveSurferContr6 === void 0 || _this$waveSurferContr6.start();
    }
  }, {
    key: "syncWithControls_clear",
    value: function syncWithControls_clear() {
      var _this$waveSurferContr7;
      if (!this.isAudioLoaded) return;
      this.audio.pause();
      this.audio.currentTime = 0;
      (_this$waveSurferContr7 = this.waveSurferController) === null || _this$waveSurferContr7 === void 0 || _this$waveSurferContr7.stop();
      this.isAudioLoaded = false;
      this.audio.src = '';
      this.audioFileName.textContent = '';
      this.audioProgress.value = 0;
      this.currentPer.textContent = '0%';
      this.updateTimeDisplay();
      // this.audioControls.className = 'd-none';
      this.updateControlButtons(false);
    }
  }, {
    key: "updateControlButtons",
    value: function updateControlButtons(isSynced) {
      var controls = document.querySelectorAll('.control-button');
      controls.forEach(function (button) {
        if (isSynced) {
          button.classList.add('synced');
        } else {
          button.classList.remove('synced');
        }
      });
    }
  }]);
}(); // Prevent default drag behaviors for audio drop zone
['dragenter', 'dragover', 'dragleave', 'drop'].forEach(function (eventName) {
  document.getElementById('audioDropZone').addEventListener(eventName, preventDefaults, false);
});
function formatTimestamp(milliseconds) {
  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'dd HH:mm:ss';
  var totalSeconds = Math.floor(milliseconds / 1000);
  var millisecondsPart = milliseconds % 1000;
  var totalMinutes = Math.floor(totalSeconds / 60);
  var seconds = totalSeconds % 60;
  var totalHours = Math.floor(totalMinutes / 60);
  var minutes = totalMinutes % 60;
  var days = Math.floor(totalHours / 24);
  var hours = totalHours % 24;
  var formattedDays = String(days).padStart(2, '0');
  var formattedHours = String(hours).padStart(2, '0');
  var formattedMinutes = String(minutes).padStart(2, '0');
  var formattedSeconds = String(seconds).padStart(2, '0');
  var formattedMilliseconds = String(millisecondsPart.toFixed(0)).padStart(2, '0');
  return format.replace('dd', formattedDays).replace('HH', formattedHours).replace('mm', formattedMinutes).replace('ss', formattedSeconds).replace('ms', formattedMilliseconds);
}

// 简单的去抖函数实现
function debounce(fn, delay) {
  var timeout;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    clearTimeout(timeout);
    timeout = setTimeout(function () {
      return fn.apply(void 0, args);
    }, delay);
  };
}
window.addEventListener('load', function () {
  var fileInputs = document.querySelectorAll('input[type="file"]');
  var hasAutoFilled = Array.from(fileInputs).some(function (input) {
    return input.value !== '';
  });
  if (hasAutoFilled) {
    // Clear the inputs
    fileInputs.forEach(function (input) {
      input.value = '';
    });

    // Use your existing notification system to show the message
    showNotification('需要选择文件', '请再次选择您的文件以确保正确处理。', {
      type: 'info',
      duration: 5000,
      buttons: [{
        text: 'OK',
        "class": 'btn btn-sm btn-primary',
        onClick: function onClick() {}
      }]
    });
  }
});
document.addEventListener('DOMContentLoaded', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
  var loadScripts_segmentit, elements, themeConfigForm, animationController, audioController, updateButtonStates, handleRun, handlePause, handleResume, handleStop, handleRestart, handleClear, performClear, errorCount, maxErrors, lastErrorTime, cooldownDuration, setupHotkeys, toggleHelp, ANNOUNCEMENT_CONTENT_backup, iframe, debouncedFetchSongData, debouncedFetchSongList;
  return _regeneratorRuntime().wrap(function _callee12$(_context13) {
    while (1) switch (_context13.prev = _context13.next) {
      case 0:
        toggleHelp = function _toggleHelp(elm) {
          var isExpanded = elm.getAttribute('aria-expanded') === 'true';
          elm.setAttribute('aria-expanded', !isExpanded);
          elm.textContent = isExpanded ? '帮助 (收起)' : '帮助 (展开)';
        };
        //https://cdn.jsdelivr.net/npm/segmentit@2.0.3/dist/umd/segmentit.min.js
        loadScripts_segmentit = function loadScripts_segmentit(src) {
          var script = document.createElement('script');
          script.src = src;
          script.defer = true;
          script.crossOrigin = 'anonymous';
          script.onload = function () {
            console.log('Script loaded successfully!');
            document.getElementById('loadingOverlay').style.display = 'none'; // 隐藏加载动画
          };
          document.body.appendChild(script);
        };
        loadScripts_segmentit('https://cdn.jsdelivr.net/npm/segmentit@2.0.3/dist/umd/segmentit.min.js');

        // Cache DOM elements
        elements = {
          colorElement: document.getElementById('colorElement'),
          input: document.getElementById('input'),
          timerDisplay: document.getElementById('timer'),
          buttons: {
            run: document.getElementById('run'),
            pause: document.getElementById('pause'),
            resume: document.getElementById('resume'),
            stop: document.getElementById('stop'),
            restart: document.getElementById('restart'),
            clear: document.getElementById('clear')
          }
        }; // Initialize the form
        themeConfigForm = new ThemeConfigForm();
        themeConfigForm.initializeForm();
        window.AudioAnalyzer = new AudioAnalyzer();

        // Initialize controller
        animationController = new AnimationController(elements.colorElement, elements.timerDisplay); // Initialize audio controller
        audioController = new AudioController(animationController); // Add listener for animation stopped event
        elements.colorElement.addEventListener('animationStopped', function () {
          updateButtonStates(false, false);
        });

        // Set initial button states
        updateButtonStates = function updateButtonStates() {
          var running = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          var paused = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          elements.buttons.run.disabled = running;
          elements.buttons.pause.disabled = !running || paused;
          elements.buttons.resume.disabled = !paused;
          elements.buttons.stop.disabled = !running;
          elements.buttons.restart.disabled = !animationController.timeline;
          elements.buttons.clear.disabled = !animationController.timeline;

          // Update button tooltips with hotkey information
          elements.buttons.run.title = '开始（空格）';
          elements.buttons.pause.title = '暂停（空格）';
          elements.buttons.resume.title = '恢复播放（空格）';
          elements.buttons.stop.title = '停止（Esc）';
          elements.buttons.restart.title = '重新启动（Ctrl/Cmd+R）';
          elements.buttons.clear.title = '清除（Ctrl/Cmd+Del）';
        }; // Event Handlers
        handleRun = function handleRun() {
          if (document.activeElement === elements.input) {
            showNotification('检测到正在输入 ⌨️', '请在运行前完成编辑', {
              type: 'info',
              duration: 3000
            });
            return;
          }
          var _Timeline$parse2 = Timeline.parse(elements.input.value),
            errors = _Timeline$parse2.errors,
            frames = _Timeline$parse2.frames;
          if (errors.length) {
            showNotification('时间轴内容检查 ⚠️', '在你的时间轴内容上发现了一些问题:\n' + errors.join('\n'), {
              type: 'error',
              duration: 5000,
              dismissible: true
            });
            return handleStop();
          }
          if (frames.length === 0) {
            showNotification('空白时间轴内容 🎬', '找不到有效的时间轴。请先添加一些内容！', {
              type: 'warning',
              duration: 4000
            });
            return;
          }
          try {
            animationController.timeline = new Timeline(frames);
            animationController.start();
            audioController.syncWithControls_run();
            updateButtonStates(true);
            showNotification('开始预览 🎵', '当前在预览时间轴颜色效果', {
              type: 'success',
              duration: 3000
            });
          } catch (error) {
            showNotification('播放错误 🎼', '无法开始预览。请重试！', {
              type: 'error',
              duration: 4000,
              dismissible: true
            });
            my_debugger.showError('Animation error:', error);
          }
        };
        handlePause = function handlePause() {
          if (document.activeElement === elements.input) {
            showNotification('检测到正在输入 ⌨️', '请在暂停前完成编辑', {
              type: 'info',
              duration: 3000
            });
            return;
          }
          animationController.pause();
          audioController.syncWithControls_pause();
          updateButtonStates(true, true);
          // showNotification('播放状态: 暂停 ⏸️', '已尝试暂停时间轴演示和音频', {
          //   type: 'info',
          //   duration: 3000
          // })
        };
        handleResume = function handleResume() {
          if (document.activeElement === elements.input) {
            showNotification('检测到正在输入 ⌨️', '请在播放前完成编辑', {
              type: 'info',
              duration: 3000
            });
            return;
          }
          animationController.resume();
          audioController.syncWithControls_resume();
          updateButtonStates(true, false);
          // showNotification('播放状态: 继续 ▶️', '从我们暂停的地方继续', {
          //   type: 'success',
          //   duration: 3000
          // })
        };
        handleStop = function handleStop() {
          if (document.activeElement === elements.input) {
            showNotification('检测到正在输入 ⌨️', '请在暂停前完成编辑', {
              type: 'info',
              duration: 3000
            });
            return;
          }
          animationController.stop();
          audioController.syncWithControls_stop();
          updateButtonStates();
          var modalBackdrop = document.querySelector('.modal-backdrop.fade.show');
          modalBackdrop === null || modalBackdrop === void 0 || modalBackdrop.remove();
          // showNotification('播放状态: 暂停 🔄', '已尝试暂停', {
          //   type: 'info',
          //   duration: 3000
          // })
        };
        handleRestart = function handleRestart() {
          if (document.activeElement === elements.input) {
            showNotification('检测到正在输入 ⌨️', '请在暂停前完成编辑', {
              type: 'info',
              duration: 3000
            });
            return;
          }
          animationController.restart();
          audioController.syncWithControls_restart();
          updateButtonStates(true);

          // showNotification('播放状态: 重播 🔄', '已尝试重新开始播放', {
          //   type: 'success',
          //   duration: 3000
          // })
        };
        handleClear = function handleClear() {
          if (document.activeElement === elements.input) {
            showNotification('检测到正在输入 ⌨️', '请在清除前完成编辑', {
              type: 'info',
              duration: 3000
            });
            return;
          }
          if (elements.input.value.trim()) {
            showModalNotification('清除已生成的时间轴内容', '你确定要清除所有内容吗？此操作无法撤销。', {
              type: 'warning',
              buttons: [{
                text: '是的，清除所有 ',
                "class": 'btn btn-danger',
                onClick: function onClick() {
                  performClear();
                }
              }, {
                text: 'Cancel',
                "class": 'btn btn-secondary',
                onClick: function onClick() {
                  showNotification('已取消清除 ↩️', '你的时间轴内容没有改变', {
                    type: 'info',
                    duration: 3000
                  });
                }
              }],
              modal: true
            });
          } else {
            showNotification('没什么需要清理的 🌟', '时间轴内容已经空了', {
              type: 'info',
              duration: 3000
            });
          }
        }; // Separate function to perform the actual clear operation
        performClear = function performClear() {
          try {
            elements.input.value = '';
            animationController.stop();
            animationController.timeline = null;
            elements.colorElement.style.backgroundColor = 'var(--surface-secondary';
            elements.timerDisplay.textContent = '[00:00:00] => 0ms';
            audioController.syncWithControls_clear();
            updateButtonStates();

            // Show success notification after clearing
            showNotification('清除成功 ✨', '一切都被成功重置了', {
              type: 'success',
              duration: 3000
            });
          } catch (error) {
            // Show error notification if something goes wrong
            showNotification('清除错误 ⚠️', '清除输入的时间轴内容时出错', {
              type: 'error',
              duration: 4000,
              dismissible: true
            });
            my_debugger.showError('Clear error:', error);
          }
        }; // Bind click event listeners
        elements.buttons.run.addEventListener('click', handleRun);
        elements.buttons.pause.addEventListener('click', handlePause);
        elements.buttons.resume.addEventListener('click', handleResume);
        elements.buttons.stop.addEventListener('click', handleStop);
        elements.buttons.restart.addEventListener('click', handleRestart);
        elements.buttons.clear.addEventListener('click', handleClear);
        errorCount = 0;
        maxErrors = 5; // 设置最大错误处理次数
        lastErrorTime = 0;
        cooldownDuration = 5000; // 设置冷却时间为5秒
        // Add error handling
        window.addEventListener('error', function (event) {
          if (event.message.indexOf('Script Error')) return console.log(event);
          if (errorCount >= maxErrors) {
            showNotification('频繁错误', "\n                <div class=\"alert alert-warning\">\n                    <p><strong>\u9891\u7E41\u51FA\u73B0\u9519\u8BEF:</strong></p>\n                    <p>\u5FEB\u8DDF\u4F5C\u8005\u53CD\u9988\u4E00\u4E0B!:</p>\n                    <ul>\n                        <li>\u5237\u65B0\u9875\u9762</li>\n                        <li>\u68C0\u67E5\u60A8\u7684\u8F93\u5165\u6570\u636E</li>\n                        <li>\u8BF7\u5728\u51E0\u5206\u949F\u540E\u91CD\u8BD5</li>\n                    </ul>\n                </div>\n            ", {
              type: 'warning',
              size: 'large',
              dismissible: true,
              modal: true,
              html: true,
              buttons: [{
                text: '确定',
                "class": 'btn btn-primary',
                onClick: function onClick() {
                  return location.reload();
                },
                closeOnClick: true
              }]
            });
            return; // 达到最大错误处理次数，不再处理新的错误
          }
          errorCount++;
          var currentTime = new Date().getTime();
          if (currentTime - lastErrorTime < cooldownDuration) {
            return; // 在冷却时间内，不再处理新的错误
          }
          lastErrorTime = currentTime;

          // // 将错误信息记录到本地存储
          // localStorage.setItem('errorLog', JSON.stringify(errorDetails));
          // 或者将错误信息发送到服务器
          // fetch()

          var errorDetails = {
            message: event.message,
            filename: event.filename,
            lineno: event.lineno,
            colno: event.colno,
            error: event.error,
            stack: event.error ? event.error.stack : 'No stack trace available',
            timestamp: new Date().toISOString()
          };
          showNotification('发生错误', "\n              <div class=\"alert alert-danger\">\n                  <p><strong>\u51FA\u9519\u4E86:</strong></p>\n                  <p>".concat(event.message, "</p>\n                  <p>\u6587\u4EF6: ").concat(event.filename, "</p>\n                  <p>\u884C\u53F7: ").concat(event.lineno, ", \u5217\u53F7: ").concat(event.colno, "</p>\n              </div>\n              <p>\u8BF7\u5C1D\u8BD5\u4EE5\u4E0B\u65B9\u6CD5:</p>\n              <ul>\n                  <li>\u5237\u65B0\u9875\u9762</li>\n                  <li>\u68C0\u67E5\u60A8\u7684\u8F93\u5165\u6570\u636E</li>\n                  <li>\u8BF7\u5728\u51E0\u5206\u949F\u540E\u91CD\u8BD5</li>\n              </ul>\n          "), {
            type: 'error',
            size: 'large',
            dismissible: true,
            modal: true,
            html: true,
            buttons: [{
              text: '报告错误',
              "class": 'btn btn-danger',
              onClick: function onClick() {
                return showNotification('Report Error', "\u597D\u4E86\u597D\u4E86\u6211\u77E5\u9053\u4E86!");
              },
              closeOnClick: true
            }]
          });
          my_debugger.showError('Error occurred:', errorDetails);
          var modalBackdrop = document.querySelector('.modal-backdrop.fade.show');
          modalBackdrop === null || modalBackdrop === void 0 || modalBackdrop.remove();
          return handleStop();
        });

        // Setup Mousetrap hotkeys
        setupHotkeys = function setupHotkeys() {
          // Space - Toggle Play/Pause
          Mousetrap.bind('space', function (e) {
            e.preventDefault();
            if (!document.querySelector('.nav-link.active[data-bs-target="#color-visualizer"]')) return;
            if (!animationController.timeline) {
              handleRun();
            } else if (animationController.isPaused) {
              handleResume();
            } else {
              handlePause();
            }
          });

          // Stop - Escape or Ctrl/Cmd + S
          Mousetrap.bind(['escape', 'mod+s'], function (e) {
            e.preventDefault();
            if (!document.querySelector('.nav-link.active[data-bs-target="#color-visualizer"]')) return;
            handleStop();
          });

          // Restart - Ctrl/Cmd + R
          Mousetrap.bind('mod+r', function (e) {
            e.preventDefault();
            if (!document.querySelector('.nav-link.active[data-bs-target="#color-visualizer"]')) return;
            handleRestart();
          });

          // Clear - Ctrl/Cmd + Delete
          Mousetrap.bind('mod+backspace', function (e) {
            e.preventDefault();
            if (!document.querySelector('.nav-link.active[data-bs-target="#color-visualizer"]')) return;
            handleClear();
          });

          // Additional helpful shortcuts
          Mousetrap.bind('mod+enter', function (e) {
            e.preventDefault();
            if (!document.querySelector('.nav-link.active[data-bs-target="#color-visualizer"]')) return;
            handleRun();
          });

          // Prevent default browser shortcuts when working with the animation
          Mousetrap.bind(['mod+s', 'mod+r'], function (e) {
            e.preventDefault();
            if (!document.querySelector('.nav-link.active[data-bs-target="#color-visualizer"]')) return;
          });

          // Add help shortcut to show available hotkeys
          Mousetrap.bind('mod+.', function (e) {
            e.preventDefault();
            if (!document.querySelector('.nav-link.active[data-bs-target="#color-visualizer"]')) return;
            if (!document.querySelector('.modal-backdrop.fade.show')) showModalNotification('快捷键帮助 ⌨️', "<div>\u53EF\u7528\u7684\u5FEB\u6377\u952E:<br>\n      \u2022 \u7A7A\u683C\u952E (Space) - \u64AD\u653E/\u6682\u505C\u5207\u6362<br>\n      \u2022 Ctrl/Cmd + Enter - \u8FD0\u884C<br>\n      \u2022 Esc \u6216 Ctrl/Cmd + S - \u505C\u6B62<br>\n      \u2022 Ctrl/Cmd + R - \u91CD\u65B0\u5F00\u59CB<br>\n      \u2022 Ctrl/Cmd + Backspace - \u6E05\u9664\u5185\u5BB9<br>\n      <br>\n\u63D0\u793A: \u5728\u7F16\u8F91\u6587\u672C\u65F6\uFF0C\u5FEB\u6377\u952E\u4F1A\u6682\u65F6\u7981\u7528</div>", {
              type: 'info',
              buttons: [{
                text: 'OK',
                "class": 'btn btn-primary',
                onClick: function onClick() {}
              }],
              modal: true,
              dismissible: true,
              html: true
            });
          });
        }; // Initialize hotkeys
        if (window.Mousetrap) {
          setupHotkeys();
        } else {
          my_debugger.showError('Mousetrap not found. Hotkeys will not work. Please install it from npm.');
        }

        // // Optional: Add sample data to textarea
        // if (!elements.input.value) {
        //   elements.input.value = '0,pin2\n500,pin2\n1000,sky3\n1500,pin4';
        // }

        // Initial button states
        updateButtonStates();
        if (!window.hljs) {
          _context13.next = 37;
          break;
        }
        _context13.next = 35;
        return highlightCodeInPreElements();
      case 35:
        _context13.next = 38;
        break;
      case 37:
        my_debugger.showError('Highlight.js not found. Skipping code highlighting.');
      case 38:
        ANNOUNCEMENT_CONTENT_backup = "\n<div class=\"card shadow-sm mb-4\">\n        <div class=\"card-header\">\n          <h2 class=\"modal-title\" id=\"announcementModalLabel\">\u6B22\u8FCEwmls\u6765\u73A9!</h2>\n        </div>\n        <div class=\"modal-body\">\n<h6>\u5236\u4F5C\u8005<a\n  href=\"https://www.xiaohongshu.com/user/profile/5c1610720000000005018c49\"\n  target=\"_blank\">\uFF08\u5C0F\u7EA2\u4E66@\u90A3\u4E00\u8F6C\u773C\u53EA\u5269\u6211\uD83E\uDD55)</a>\u7559\u8A00\uFF1A</h6>\n<p>\u672C\u5DE5\u5177\u65E8\u5728\u5E2E\u52A9\u4E94\u6708\u5929\u6F14\u5531\u4F1A\u7684\u89C2\u4F17\u548C\u7EC4\u7EC7\u8005\u8F7B\u677E\u751F\u6210\u8367\u5149\u68D2\u7684\u63A7\u5236\u4EE3\u7801\uFF0C\u5B9E\u73B0\u66F4\u52A0\u70AB\u9177\u7684\u706F\u5149\u6548\u679C\u3002\u901A\u8FC7\u7B80\u5355\u7684\u914D\u7F6E\uFF0C\u4F60\u53EF\u4EE5\u751F\u6210\u81EA\u5B9A\u4E49\u7684\u8367\u5149\u68D2\u63A7\u5236\u4EE3\u7801\uFF0C\u5E76\u5728\u5B9E\u65F6\u9884\u89C8\u4E2D\u67E5\u770B\u57FA\u7840\u6548\u679C\u3002\u751F\u6210\u7B97\u6CD5\u8FD8\u5728\u6301\u7EED\u4F18\u5316!\u672C\u5DE5\u5177\u8FD8\u5728\u8FED\u4EE3!<br>\u611F\u8C22<a\n      href=\"https://www.xiaohongshu.com/user/profile/5d7e751900000000010010bd\"\n      target=\"_blank\">\u5C0F\u7EA2\u4E66@Diu\uD83E\uDD55</a>\u5927\u4F6C\u5F00\u53D1\u7684<strong><code style=\"font-family: 'Lato', sans-serif;\">Mayday.Blue</code></strong>\u5C0F\u7A0B\u5E8F!\n</p>\n\n<h6>\u7F51\u7AD9\u529F\u80FD\u7B80\u4ECB\uFF1A</h6>\n<ul>\n  <li><strong>\u751F\u6210\u5DE5\u5177\uD83C\uDFA8\uFF1A</strong>\u63D0\u4F9B\u4F60\u60F3\u505A\u9884\u8BBE\u7684\u97F3\u9891\u6587\u4EF6,\u8F7B\u677E\u914D\u7F6E\u8367\u5149\u68D2\u7684\u989C\u8272\u4E3B\u9898\u5E76\u751F\u6210 <strong><code style=\"font-family: 'Lato', sans-serif;\">Mayday.Blue</code></strong> \u573A\u63A7\u9884\u8BBE\u4EE3\u7801\u3002</li>\n  <li><strong>\u5B9E\u65F6\u9884\u89C8\uD83D\uDC40\uFF1A</strong>\u53EF\u4EE5\u628A\u751F\u6210\u7684\u9884\u8BBE\u4EE3\u7801\u6DFB\u52A0\u8FDB\u6765\uFF0C\u5B9E\u65F6\u5C55\u793A\u8367\u5149\u68D2\u4F7F\u7528\u5230\u7684\u7535\u8111\u989C\u8272\u6548\u679C\u3002</li>\n</ul>\n\n<h6>\u529F\u80FD\u8BE6\u7EC6\u4ECB\u7ECD\uFF1A</h6>\n<ul>\n  <li>\u751F\u6210\u5DE5\u5177\uD83C\uDFA8\uFF1A\u8BF7\u770B<strong>\u9884\u8BBE\u4EE3\u7801\u751F\u6210\u5668</strong>\u9009\u9879\u5361\u7684\u4F7F\u7528\u6307\u5357</li>\n  <li>\u5B9E\u65F6\u9884\u89C8\uD83D\uDC40\uFF1A\u8BF7\u770B<strong>\u9884\u8BBE\u53EF\u89C6\u5316\u5DE5\u5177</strong>\u9009\u9879\u5361\u7684\u4F7F\u7528\u6307\u5357</li>\n</ul>\n\n<h6>\u91CD\u8981\u7EC6\u8282\uFF1A</h6>\n<ul>\n  <li>\u751F\u6210\u7684\u4EE3\u7801\u53EF\u4EE5\u76F4\u63A5\u590D\u5236\u5E76\u7C98\u8D34\u5230\u4F60\u7684<strong><code style=\"font-family: 'Lato', sans-serif;\">Mayday.Blue</code></strong>\u4E2D\u3002</li>\n  <li>\u652F\u6301\u5BFC\u51FA\u548C\u5BFC\u5165\u989C\u8272\u4E3B\u9898\u914D\u7F6E\uFF0C\u65B9\u4FBF\u4FDD\u5B58\u548C\u5206\u4EAB\u521B\u610F\u3002</li>\n</ul>\n        </div>\n      </div>\n  "; // 检查是否为新用户
        if (!localStorage.getItem('isNewUser')) {
          try {
            showModalNotification('公告📢 - 2024/11/23 15:20', "<iframe id=\"myIframe\" src=\"https://sx5w7odpp7p.feishu.cn/docx/IcuIdkFKJofwhsxfW4GcVdGSnQd\" width=\"100%\" height=\"600px\"></iframe>", {
              type: 'info',
              size: 'large',
              buttons: [{
                text: '不再提示',
                "class": 'btn btn-primary',
                onClick: function onClick() {
                  // 存储用户选择不再提示
                  localStorage.setItem('isNewUser', 'false');
                }
              }],
              html: true,
              dismissible: true
            });
            // 确保 iframe 加载完成后再显示通知
            iframe = document.getElementById('myIframe');
            if (iframe) {
              iframe.onload = function () {
                // 模态通知已经显示，无需额外操作
              };
            }
          } catch (error) {
            console.error('显示公告时发生错误:', error);
            document.querySelector('#notificationModal #modalBody').innerHTML = ANNOUNCEMENT_CONTENT_backup;
          }
        }

        // 包装搜索请求，增加去抖功能
        debouncedFetchSongData = debounce(_fetch_music_data_js__WEBPACK_IMPORTED_MODULE_1__.fetchSongData, 500);
        debouncedFetchSongList = debounce(_fetch_music_data_js__WEBPACK_IMPORTED_MODULE_1__.fetchSongList, 500);
        debouncedFetchSongList({
          query: '一颗苹果',
          limit: 100,
          offset: 0
        }).then(function (songs) {
          console.log('songs: ', songs);
          // for (let i = 0; i < songs.length; i++) {
          //   const song = songs[i];
          //   const songId = song.id;
          // }
          debouncedFetchSongData({
            id: songs[0].id,
            type: 'json',
            level: 'standard'
          }) // 使用songs第一个结果作为测试
          .then(function (data) {
            console.log(data); // 输出请求的数据
          })["catch"](function (error) {
            console.error('debouncedFetchSongData - 数据请求失败', error);
          });
        })["catch"](function (error) {
          console.error('debouncedFetchSongList - 数据请求失败', error);
        });
      case 43:
      case "end":
        return _context13.stop();
    }
  }, _callee12);
})));
})();

/******/ })()
;
//# sourceMappingURL=bundle.js.map